package com.isz.erp.house.biz;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.isz.erp.common.page.PagingHelper;
import com.isz.erp.common.util.DateUtil;
import com.isz.erp.common.util.DictConstants;
import com.isz.erp.common.util.IszLogger;
import com.isz.erp.common.util.ParameterUtil;
import com.isz.erp.common.util.ResultMsg;
import com.isz.erp.common.util.ResultObjectMsg;
import com.isz.erp.common.util.StringUtil;
import com.isz.erp.common.util.UuidUtil;
import com.isz.erp.facade.house.entity.Apartment;
import com.isz.erp.facade.house.entity.BusinessCircle;
import com.isz.erp.facade.house.entity.BusinessCircleDistrict;
import com.isz.erp.facade.house.entity.Follow;
import com.isz.erp.facade.house.entity.House;
import com.isz.erp.facade.house.entity.Residential;
import com.isz.erp.facade.house.entity.ResidentialBuilding;
import com.isz.erp.facade.house.entity.ResidentialBuildingUnit;
import com.isz.erp.facade.house.entity.ResidentialBusinessCircle;
import com.isz.erp.facade.house.entity.ResidentialCorrection;
import com.isz.erp.facade.house.entity.ResidentialDepartment;
import com.isz.erp.facade.house.entity.ResidentialExcelData;
import com.isz.erp.facade.house.entity.ResidentialImg;
import com.isz.erp.facade.house.entity.UnitExcelData;
import com.isz.erp.facade.house.service.FollowService;
import com.isz.erp.facade.house.service.HouseService;
import com.isz.erp.facade.user.entity.SysUser;
import com.isz.erp.facade.user.vo.SessionVo;
import com.isz.erp.house.mapper.BusinessCircleMapper;
import com.isz.erp.house.mapper.HouseMapper;
import com.isz.erp.house.mapper.HouseRentMapper;
import com.isz.erp.house.mapper.ResidentialBuildingMapper;
import com.isz.erp.house.mapper.ResidentialBuildingUnitMapper;
import com.isz.erp.house.mapper.ResidentialBusinessCircleMapper;
import com.isz.erp.house.mapper.ResidentialCorrectionMapper;
import com.isz.erp.house.mapper.ResidentialDepartmentMapper;
import com.isz.erp.house.mapper.ResidentialImgMapper;
import com.isz.erp.house.mapper.ResidentialMapper;
import com.isz.erp.service.comm.house.service.officail.impl.HouseRentOfficailPersonImpl;

/**
 * @author WangShuo *
 * @version 1.0 *
 * @date 创建时间：2016年1月12日 下午7:04:29 *
 * @instruction 说明：
 */
@Service("residentialServiceBiz")
public class ResidentialServiceBiz {
    @Autowired
    private ResidentialMapper residentialMapper;
    @Autowired
    private ResidentialBusinessCircleMapper residentialBusinessCircleMapper;
    @Autowired
    private ResidentialDepartmentMapper residentialDepartmentMapper;
    @Autowired
    private ResidentialImgMapper residentialImgMapper;
    @Autowired
    private HouseService houseServiceBiz;
    @Autowired
    private FollowService followService;
    @Autowired
    private BusinessCircleMapper businessCircleMapper;
    @Autowired
    private HouseService houseService;
    @Autowired
    private HouseRentMapper houseRentMapper;
    @Autowired
    private ResidentialBuildingMapper residentialBuildingMapper;
    @Autowired
    private ResidentialBuildingUnitMapper residentialBuildingUnitMapper;

    @Autowired
    private HouseRentOfficailPersonImpl houseRentOfficailPersonImpl;

    @Autowired
    private HouseMapper houseMapper;

    @Autowired
    private ResidentialCorrectionMapper residentialCorrectionMapper;
    
    
    
    /**
     * 查询楼盘详情(分页)
     *
     * @param data
     * @return
     */
    public ResultObjectMsg<PagingHelper<Residential>> searchResidentialList(Map<String, Object> data) throws Exception {
        int page_num = ParameterUtil.getInt(data, "pageNumber", 1);
        int page_size = ParameterUtil.getInt(data, "pageSize", 10);


        PagingHelper<Residential> ph = new PagingHelper<Residential>();
        ph.setPerPageSize(page_size);
        ph.setCurrentPage(page_num);
        data.put("begin_num", ph.getBeginRowNumber());
        data.put("end_num", ph.getEndRowNumber());

        List<String> paraList = new ArrayList<String>();
        paraList.add("area_code");
        paraList.add("taBusinessCircleList");
        paraList.add("taDepartList");
        paraList.add("property_type");
        data = StringUtil.readAndWritePageData(data, paraList);


        List<Residential> list = residentialMapper.searchResidentialList(data);
        Integer count = residentialMapper.countSearchResidential(data);
        for (Residential residential : list) {
            residential.setTaBusinessCircleList(residential.getTaBusinessCircleList());
            residential.setTaDepartList(residential.getTaDepartList());
            residential.setResidentialImgList(residential.getResidentialImgList());
            ;
        }

        ph.setTotal(count); // 设置总的记录数
        ph.setRows(list); // 设置返回的记录
        return new ResultObjectMsg<PagingHelper<Residential>>(ph);
    }

    /**
     * 保存楼盘信息
     *
     * @param taResidential
     */
    @Transactional
    public ResultMsg saveResidential(Residential taResidential, SysUser user) throws Exception {
        try {
            String validateResult = validate(taResidential);
            if (StringUtil.notNullOrEmpty(validateResult)) {
                return ResultMsg.createErrorMsg(validateResult);
            }
            if (taResidential.getResidential_id() == null) {
                taResidential.setResidential_id(UuidUtil.getUUID());
                taResidential.setCreate_uid(user.getUser_id());
                taResidential.setUpdate_uid(user.getUser_id());
                taResidential.setDeleted(0);

                Map<String, Object> map = new HashMap<String, Object>();
                map.put("residential_name", taResidential.getResidential_name());
                map.put("city_code", taResidential.getCity_code());
                Integer res = residentialMapper.checkResidentialNameHave(map);
                if (res > 0) {
                    return ResultMsg.createErrorMsg("已经存在该楼盘名称!");
                }
                residentialMapper.saveResidential(taResidential);

                //保存商圈关系表
                if (!StringUtil.isNullOrEmpty(taResidential.getTaBusinessCircleString())) {
                    saveBusinessCircle(taResidential);
                }
                //保存所属部门关系表
                if (!StringUtil.isNullOrEmpty(taResidential.getTaDepartString())) {
                    saveTaResidentialDep(taResidential);
                }
                //保存图片关系表
                if (null != taResidential.getResidentialImgList() && taResidential.getResidentialImgList().size() > 0) {
                    saveTaResidentialImg(taResidential);
                }
                //修改官网维护人
                List<House> houses = residentialMapper.searchHouseListByResidentialId(taResidential.getResidential_id());
                for (House house : houses) {
                    houseRentOfficailPersonImpl.configOfficailPerson(house.getHouse_id());
                }
            } else {
                //根据residential_id查找residential
                Residential residentialOld = residentialMapper.selectByPrimaryKey(taResidential.getResidential_id());

                taResidential.setUpdate_uid(user.getUser_id());
                taResidential.setUpdate_time(DateUtil.format(new Date(), DateUtil.DATETIME_FORMAT_PATTERN));

                Map<String, Object> map = new HashMap<String, Object>();
                map.put("residential_name", taResidential.getResidential_name());
                map.put("residential_id", taResidential.getResidential_id());
                map.put("city_code", taResidential.getCity_code());
                Integer res = residentialMapper.checkResidentialNameHave(map);
                if (res > 0) {
                    return ResultMsg.createErrorMsg("已经存在该楼盘名称!");
                }

                if (null == taResidential.getByname()) {//全部删除别名
                    taResidential.setByname(" ");
                }
                residentialMapper.updateByPrimaryKeySelective(taResidential);

                //先删除楼盘和商圈的关系数据
                residentialBusinessCircleMapper.deleteBusinessCircleByPremisesId(taResidential.getResidential_id());
                //保存商圈关系表
                if (taResidential.getTaBusinessCircleString() != null && !"".equals(taResidential.getTaBusinessCircleString())) {
                    saveBusinessCircle(taResidential);
                }

                String getTaDepartStringOld = residentialDepartmentMapper.selecttaResidentialById(taResidential.getResidential_id());
                //先删除楼盘和部门的关系数据
                residentialDepartmentMapper.deleteResidentialDeptByResidentialId(taResidential.getResidential_id());
                //保存所属部门关系表
                if (taResidential.getTaDepartString() != null && !"".equals(taResidential.getTaDepartString())) {
                    saveTaResidentialDep(taResidential);
                }
                //楼盘字典责任部门更改--修改官网维护人
                if ((!(StringUtils.isBlank(getTaDepartStringOld) && StringUtils.isBlank(taResidential.getTaDepartString())))
                        && (StringUtils.isNotBlank(getTaDepartStringOld) && !getTaDepartStringOld.equals(taResidential.getTaDepartString())
                        || StringUtils.isNotBlank(taResidential.getTaDepartString()) && !taResidential.getTaDepartString().equals(getTaDepartStringOld)
                )) {
                    //出租房源官网维护人随机分配
                    List<House> houses = residentialMapper.searchHouseListByResidentialId(taResidential.getResidential_id());
                    for (House house : houses) {
                        houseRentOfficailPersonImpl.configOfficailPerson(house.getHouse_id());

                    }

                }
                //先删除楼盘和图片的关系数据
                //residentialImgMapper.deleteImgByPremisesId(taResidential.getResidential_id());
                //保存图片关系表
                if (null != taResidential.getResidentialImgList() && taResidential.getResidentialImgList().size() > 0) {
                    saveTaResidentialImg(taResidential);
                }

                if (!taResidential.getResidential_name().equals(residentialOld.getResidential_name())) {
                    //新增 出租房源的跟进信息
                    //1.查出楼盘名称下所有出租房源
                    List<House> houses = residentialMapper.searchHouseListByResidentialId(taResidential.getResidential_id());

                    //1.查出楼盘名称下所有自营公寓房源
                    List<Apartment> apartments = residentialMapper.searchApartmentListByResidentialId(taResidential.getResidential_id());

                    //2.保存跟进内容
                    Follow follow = new Follow();
                    follow.setObject_type(DictConstants.FollowObjectType.HOUSE.value());
                    follow.setFollow_type(DictConstants.HouseFollowType.SYSTEMEDIT.value());
                    follow.setFollow_content("楼盘名称：【" + residentialOld.getResidential_name() + "=>" + taResidential.getResidential_name() + "】");
                    follow.setFollow_open(DictConstants.YesNo.Y.value());

                    // 跟进内容
                    String follow_str = follow.getFollow_content();

                    for (House house : houses) {
                        follow.setObject_id(house.getHouse_id());

                        // 如果名称有更新,同步到房源中的物业名称
                        House houseNew = new House();
                        houseNew.setHouse_id(house.getHouse_id());
                        ResidentialBuilding residentialBuilding = residentialBuildingMapper.selectByPrimaryKey(house.getBuilding_id());
                        houseNew.setProperty_name(taResidential.getResidential_name() + residentialBuilding.getBuilding_name() + ("无".equals(house.getUnit()) ? "" : house.getUnit()) + house.getHouse_no());
                        houseNew.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                        houseNew.setUpdate_uid(user.getUser_id());
                        houseMapper.updateByPrimaryKeySelective(houseNew);
                        follow.setFollow_content(follow_str + "【同步物业名称:" + house.getProperty_name() + "=>" + house.getProperty_name() + "】");

                        followService.saveFollow(follow, user);
                    }

                    follow.setObject_type(DictConstants.FollowObjectType.APARTMENT.value());
                    for (Apartment apartment : apartments) {
                        follow.setObject_id(apartment.getApartment_id());
                        followService.saveFollow(follow, user);
                    }

                }

            }
            return ResultMsg.createOkMsg("保存楼盘成功!");
        } catch (NumberFormatException e) {
            throw new RuntimeException();
        }
    }

    //验证楼盘字典必填字段
    private String validate(Residential taResidential) {
        if (StringUtil.isNullOrEmpty(taResidential.getResidential_name())) {
            return "请填写楼盘名称";
        }
        if (StringUtil.isNullOrEmpty(taResidential.getCity_code())) {
            return "请选择城区";
        }
        if (StringUtil.isNullOrEmpty(taResidential.getArea_code())) {
            return "请选择市区";
        }
        if (StringUtil.isNullOrEmpty(taResidential.getTaBusinessCircleString())) {
            return "请选择商圈";
        }
        if (StringUtil.isNullOrEmpty(taResidential.getAddress())) {
            return "请填写街道地址";
        }
        if (StringUtil.isNullOrEmpty(taResidential.getLat())) {
            return "请填写经度";
        }
        if (StringUtil.isNullOrEmpty(taResidential.getLng())) {
            return "请填写纬度";
        }
        return null;
    }

    /**
     * 保存商圈关系表
     *
     * @param taResidential
     */
    public void saveBusinessCircle(Residential taResidential) {
        String taBusinessCircle = taResidential.getTaBusinessCircleString();
        String[] taBusinessCircleList = taBusinessCircle.split(",");
        List<ResidentialBusinessCircle> listSave = new ArrayList<ResidentialBusinessCircle>();
        for (String business_circle_id : taBusinessCircleList) {
            ResidentialBusinessCircle taResidentialBusinessCircle = new ResidentialBusinessCircle();
            taResidentialBusinessCircle.setResidential_business_circle_id(UuidUtil.getUUID());
            taResidentialBusinessCircle.setResidential_id(taResidential.getResidential_id());
            taResidentialBusinessCircle.setBusiness_circle_id(business_circle_id);
            taResidentialBusinessCircle.setCreate_uid(taResidential.getUpdate_uid());
            listSave.add(taResidentialBusinessCircle);
        }
        residentialBusinessCircleMapper.saveBusinessCircle(listSave);
    }

    /**
     * 保存所属部门关系表
     *
     * @param taResidential
     */
    public void saveTaResidentialDep(Residential taResidential) {
        try {
            String taDepartString = taResidential.getTaDepartString();
            String[] taDepartList = taDepartString.split(",");
            List<ResidentialDepartment> listSave = new ArrayList<ResidentialDepartment>();
            for (String dep_id : taDepartList) {
                ResidentialDepartment taResidentialDept = new ResidentialDepartment();
                taResidentialDept.setResidential_dep_id(UuidUtil.getUUID());
                taResidentialDept.setResidential_id(taResidential.getResidential_id());
                taResidentialDept.setDid(dep_id);
                taResidentialDept.setCreate_uid(taResidential.getUpdate_uid());
                listSave.add(taResidentialDept);
            }
            residentialDepartmentMapper.saveResidentialDept(listSave);
        } catch (NumberFormatException e) {
            throw new RuntimeException();
        }
    }

    /**
     * 保存图片关系表
     *
     * @param taResidential
     */
    public void saveTaResidentialImg(Residential taResidential) {
        List<ResidentialImg> list = taResidential.getResidentialImgList();
        List<ResidentialImg> listSave = new ArrayList<ResidentialImg>();
        for (int i = 0; i < list.size(); i++) {
            ResidentialImg residentialImg = list.get(i);
            ResidentialImg taResidentialImg = new ResidentialImg();
            taResidentialImg.setResidential_img_id(UuidUtil.getUUID());
            taResidentialImg.setResidential_id(taResidential.getResidential_id());
            taResidentialImg.setImg_id(residentialImg.getImg_id());
            taResidentialImg.setSort(residentialImg.getSort());
            taResidentialImg.setCreate_uid(taResidential.getUpdate_uid());
            taResidentialImg.setCreate_time(DateUtil.getCurrentDateTimeAsString());
            listSave.add(taResidentialImg);
        }
        residentialImgMapper.saveResidentialImg(listSave);
    }

    /**
     * 保存楼盘图片信息
     *
     * @param taResidential
     */
    public ResultMsg saveResidentialImg(Residential taResidential, SysUser user) throws Exception {
        try {
            taResidential.setUpdate_uid(user.getUser_id());
            residentialMapper.updateByPrimaryKeySelective(taResidential);

            //先删除楼盘和图片的关系数据
            residentialImgMapper.deleteImgByPremisesId(taResidential.getResidential_id());
            //保存图片关系表
            if (taResidential.getResidentialImgList() != null && taResidential.getResidentialImgList().size() > 0) {
                saveTaResidentialImg(taResidential);
            }
            return ResultMsg.createOkMsg("保存楼盘图片成功!");
        } catch (NumberFormatException e) {
            throw new RuntimeException();
        }
    }


    /**
     * 删除楼盘信息
     *
     * @param residential_id
     */
    @Transactional
    public ResultMsg deleteResidential(String residential_id, SysUser user) throws Exception {
        try {
            //1.判断出租房源是否有应用楼盘字典
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("residential_id", residential_id);
            map.put("update_uid", user.getUser_id());
            ResultObjectMsg<Integer> res = houseServiceBiz.checkIsUseRedidential(map);
            IszLogger.require((null != res && null != (Integer) res.getObj() && (Integer) res.getObj() == 0), "已有出租房源应用该楼盘字典");
            //执行删除
            //删除楼盘图片 修改delete为1
            residentialMapper.deleteResidentialImg4Update(map);
            //删除楼盘 部门关联关系 直接删除
            residentialMapper.deleteResidentialDepartment(map);
            //删除楼盘 商圈关联关系
            residentialMapper.deleteResidentialBusinessCircle(map);

            //以下sql操作顺序不可更改
            //1 删除房号
            residentialMapper.deleteResidentialBuildingHouseNo(map);
            //2 删除层
            residentialMapper.deleteResidentialBuildingFloor(map);
            //3 删除单元
            residentialMapper.deleteResidentialBuildingUnit(map);
            //4 删除栋
            residentialMapper.deleteResidentialBuilding4Update(map);
            // 删除楼盘  修改delete为1
            residentialMapper.deleteResidential4Update(map);
            return ResultMsg.createOkMsg("删除楼盘成功!");
        } catch (NumberFormatException e) {
            throw new RuntimeException();
        }
    }


    /**
     * 查询楼盘详情
     *
     * @param residential_id
     * @return
     */
    public ResultObjectMsg<Residential> selectResidentialDetail(String residential_id) throws Exception {
        Residential residential = residentialMapper.selectResidentialDetail(residential_id);
        if (null != residential) {
            residential.setTaBusinessCircleList(residential.getTaBusinessCircleList());
            residential.setTaDepartList(residential.getTaDepartList());
            residential.setResidentialImgList(residential.getResidentialImgList());
        }
        return new ResultObjectMsg<Residential>(residential);
    }

    /**
     * 根据楼盘字典名称判断楼盘字典是否存在
     *
     * @param residential_name
     * @return
     */
    public ResultMsg checkResidentialNameHave(String residential_name) {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("residential_name", residential_name);
        Integer res = residentialMapper.checkResidentialNameHave(map);
        if (res > 0) {
            return ResultMsg.createErrorMsg("已经存在该楼盘名称!");
        } else {
            return ResultMsg.createOkMsg("OK");
        }
    }

    public ResultObjectMsg<Residential> selectByDepId(String dep_id) {
        return new ResultObjectMsg<Residential>(residentialMapper.selectByDepId(dep_id));
    }

    /**
     * 导入商圈 和商圈所在区域表
     *
     * @return
     * @throws Exception
     */
    public ResultMsg getIn() throws Exception {
        List<ResidentialExcelData> residential_excel_data = residentialMapper.getResidentialExcelData();

        for (int i = 0; i < residential_excel_data.size(); i++) {
            ResidentialExcelData residentialExcelData = residential_excel_data.get(i);
            if (residentialExcelData != null) {
                String business_circle = residentialExcelData.getBusiness_circle_name();
                String area = residentialExcelData.getArea_name();
                String city = residentialExcelData.getCity_name();
                BusinessCircle businessCircle = new BusinessCircle();
                Integer num = businessCircleMapper.sercherBudinessCircleByName(business_circle);
                if ((num == null || num <= 0) && !StringUtil.isNullOrEmpty(business_circle) && !StringUtil.isNullOrEmpty(area)) {
                    businessCircle.setBusiness_circle_id(UuidUtil.getUUID());
                    businessCircle.setBusiness_circle_name(business_circle);
                    businessCircle.setCreate_uid("00000000000000000000000000000000");
                    businessCircle.setCreate_time(DateUtil.format(new Date()));
                    businessCircle.setUpdate_uid("00000000000000000000000000000000");
                    businessCircle.setUpdate_time(DateUtil.format(new Date()));
                    businessCircle.setIs_active("Y");
                    businessCircleMapper.insert(businessCircle);

                    BusinessCircleDistrict business_circle_district = new BusinessCircleDistrict();
                    Map<String, Object> map = new HashMap<String, Object>();
                    map.put("business_circle_id", businessCircle.getBusiness_circle_id());
                    map.put("city_code", city);
                    map.put("area_code", area);
                    Integer resNum = businessCircleMapper.sercherBusinessCircleDistrictByName(map);
                    if (resNum == null || resNum <= 0) {
                        business_circle_district.setBusiness_circle_district_id(UuidUtil.getUUID());
                        business_circle_district.setBusiness_circle_id(businessCircle.getBusiness_circle_id());
                        business_circle_district.setArea_code(area);
                        business_circle_district.setCity_code(city);
                        businessCircleMapper.insertBusinessCircleDistrict(business_circle_district);
                    }
                }


            }

        }

        return ResultMsg.createOkMsg("OK");
    }

    /**
     * 导入楼盘字典表 楼盘商圈关系表
     *
     * @return
     * @throws Exception
     */
    public ResultMsg getInResi() throws Exception {
        /*
         * List<ResidentialCopeBig> residentialCopeBigList =
		 * residentialMapper.getIn();
		 * 
		 * for(int i= 0 ; i<residentialCopeBigList.size(); i++){
		 * ResidentialCopeBig residentialCopeBig =
		 * residentialCopeBigList.get(i); String area =
		 * residentialCopeBig.getArea(); String business_circle =
		 * residentialCopeBig.getBusiness_circle(); String build_area =
		 * residentialCopeBig.getBuild_area(); String green_rate =
		 * residentialCopeBig.getGreen_rate();
		 * if(StringUtil.isNullOrEmpty(build_area)){ build_area = "0"; }
		 * if(StringUtil.isNullOrEmpty(green_rate)){ green_rate = "0"; }
		 * 
		 * Residential residential = new Residential();
		 * residential.setResidential_id(UuidUtil.getUUID());
		 * residential.setCity_code("320100"); residential.setArea_code(area);
		 * residential.setResidential_name(residentialCopeBig.
		 * getResidential_name());
		 * residential.setAddress(residentialCopeBig.getAddress());
		 * residential.setProperty_type(residentialCopeBig.getProperty_type());
		 * residential.setProperty_company(residentialCopeBig.
		 * getProperty_company());
		 * residential.setBuild_date(residentialCopeBig.getBuild_date());
		 * residential.setBuild_area(Double.parseDouble(build_area));
		 * residential.setLng(residentialCopeBig.getLng());
		 * residential.setLat(residentialCopeBig.getLat());
		 * //residential.setGreen_rate(Integer.parseInt(green_rate));
		 * residential.setDeleted(0); residential.setCreate_uid("1599");
		 * residential.setCreate_time(DateUtil.format(new Date()));
		 * residential.setUpdate_uid("1599");
		 * residential.setUpdate_time(DateUtil.format(new Date()));
		 * residentialMapper.insert(residential);
		 * 
		 * 
		 * if(!StringUtil.isNullOrEmpty(area) &&
		 * !StringUtil.isNullOrEmpty(business_circle) &&
		 * !StringUtil.isNullOrEmpty(residentialCopeBig.getResidential_name())){
		 * Map<String,Object> map = new HashMap<String,Object>();
		 * map.put("area_code", area); map.put("city_code", "320100");
		 * map.put("business_circle_name", business_circle); BusinessCircle
		 * businessCircle = businessCircleMapper.getBudinessCircle(map);
		 * if(businessCircle != null){ ResidentialBusinessCircle
		 * taResidentialBusinessCircle = new ResidentialBusinessCircle();
		 * taResidentialBusinessCircle.setResidential_business_circle_id(
		 * UuidUtil.getUUID());
		 * taResidentialBusinessCircle.setResidential_id(residential.
		 * getResidential_id());
		 * taResidentialBusinessCircle.setBusiness_circle_id(businessCircle.
		 * getBusiness_circle_id());
		 * taResidentialBusinessCircle.setCreate_uid("1599");
		 * taResidentialBusinessCircle.setCreate_time(DateUtil.format(new
		 * Date()));
		 * residentialBusinessCircleMapper.insert(taResidentialBusinessCircle);
		 * } } }
		 */
        List<UnitExcelData> unit_excel_data = residentialMapper.getUnitExcelData();
        List<ResidentialExcelData> residential_excel_data = residentialMapper.getResidentialExcelData();
        // 先插入楼盘
        for (int i = 0; i < residential_excel_data.size(); i++) {
            ResidentialExcelData residentialExcelData = residential_excel_data.get(i);
            if (null != residentialExcelData) {
                // 检验是否有相同名称的楼盘 residential_name city_name area_name
                int count = residentialMapper.selectResidentialByResidentialExcelData(
                        residentialExcelData.getResidential_name(), residentialExcelData.getArea_name(),
                        residentialExcelData.getCity_name());
                if (count == 0) {
                    String area = residentialExcelData.getArea_name();
                    String city = residentialExcelData.getCity_name();
                    String business_circle = residentialExcelData.getBusiness_circle_name();
                    String residentialName = residentialExcelData.getResidential_name();

                    Residential residential = new Residential();
                    residential.setResidential_id(UuidUtil.getUUID());
                    residential.setCity_code(city);
                    residential.setArea_code(area);
                    residential.setResidential_name(residentialName);
                    residential.setByname(residentialExcelData.getByname());
                    residential.setAddress(residentialExcelData.getAddress());
                    residential.setProperty_type(residentialExcelData.getProperty_type());
                    // residential.setProperty_use(property_use);
                    residential.setProperty_company(residentialExcelData.getProperty_company());
                    residential.setProperty_fee(residentialExcelData.getProperty_fee());
                    residential.setBuild_date(residentialExcelData.getBuild_date());
                    residential.setTotle_buildings(residentialExcelData.getTotle_buildings());
                    residential.setBuild_area(residentialExcelData.getBuild_area());
                    residential.setMetro_stations(residentialExcelData.getMetro_stations());
                    residential.setBus_stations(residentialExcelData.getBus_stations());
                    residential.setLng(residentialExcelData.getLng());
                    residential.setLat(residentialExcelData.getLat());
                    residential.setPlot_ratio(residentialExcelData.getPlot_ratio());
                    residential.setGreen_rate(residentialExcelData.getGreen_rate());
                    residential.setParking_amount(residentialExcelData.getParking_amount());
                    // residential.setOther_info();
                    residential.setRemark(residentialExcelData.getRemark());
                    residential.setDeleted(0);
                    residential.setCreate_uid("00000000000000000000000000000000");
                    residential.setCreate_time(DateUtil.format(new Date()));
                    residential.setUpdate_uid("00000000000000000000000000000000");
                    residential.setUpdate_time(DateUtil.format(new Date()));
                    residentialMapper.insert(residential);// 插入residential
                    System.out.println("residentialMapper+@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");

                    // 商圈
                    if (!StringUtil.isNullOrEmpty(area) && !StringUtil.isNullOrEmpty(business_circle)
                            && !StringUtil.isNullOrEmpty(residentialExcelData.getResidential_name())) {
                        Map<String, Object> map = new HashMap<String, Object>();
                        map.put("area_code", area);
                        map.put("city_code", city);
                        map.put("business_circle_name", business_circle);
                        BusinessCircle businessCircle = businessCircleMapper.getBudinessCircle(map);
                        if (businessCircle != null) {
                            ResidentialBusinessCircle taResidentialBusinessCircle = new ResidentialBusinessCircle();
                            taResidentialBusinessCircle.setResidential_business_circle_id(UuidUtil.getUUID());
                            taResidentialBusinessCircle.setResidential_id(residential.getResidential_id());
                            taResidentialBusinessCircle.setBusiness_circle_id(businessCircle.getBusiness_circle_id());
                            taResidentialBusinessCircle.setCreate_uid("00000000000000000000000000000000");
                            taResidentialBusinessCircle.setCreate_time(DateUtil.format(new Date()));
                            residentialBusinessCircleMapper.insert(taResidentialBusinessCircle);
                            System.out.println("residentialBusinessCircleMapper+rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr");
                        }
                    }

                    for (int j = 0; j < unit_excel_data.size(); j++) {
                        UnitExcelData unitExcelData = unit_excel_data.get(j);
                        if (null != unitExcelData) {
                            // 楼盘--查到对应的楼盘
                            // 检验是否有相同名称的楼盘
                            if (StringUtil.notNullOrEmpty(residentialName)
                                    && residentialName.equals(unitExcelData.getResidential_name())) {
                                // 本楼盘数据进来
                                ResidentialBuilding residentialBuilding = new ResidentialBuilding();
                                residentialBuilding.setBuilding_id(UuidUtil.getUUID());
                                residentialBuilding.setResidential_id(residential.getResidential_id());
                                residentialBuilding.setBuilding_name(unitExcelData.getBuilding_name());
                                residentialBuilding.setSuffix(unitExcelData.getSuffix());
                                residentialBuilding.setGround_floors(unitExcelData.getGround_floors());
                                residentialBuilding.setUnderground_floors(unitExcelData.getUnderground_floors());
                                residentialBuilding.setHousing_type(unitExcelData.getHousing_type());
                                residentialBuilding.setHave_elevator(unitExcelData.getHave_elevator());
                                residentialBuilding.setDeleted(0);
                                residentialBuilding.setHouse_role(unitExcelData.getHouse_role());
                                residentialBuilding.setCreate_time(DateUtil.format(new Date()));
                                residentialBuilding.setCreate_uid("00000000000000000000000000000000");
                                residentialBuilding.setUpdate_time(DateUtil.format(new Date()));
                                residentialBuilding.setUpdate_uid("00000000000000000000000000000000");
                                residentialBuildingMapper.insert(residentialBuilding);
                                System.out.println("residentialBuildingMapper+dddddddddddddddddddd");

                                // 单元
                                String units = unitExcelData.getUnit_name();
                                if (StringUtil.notNullOrEmpty(units)) {
                                    ResidentialBuildingUnit residentialBuildingUnit = new ResidentialBuildingUnit();
                                    residentialBuildingUnit.setBuilding_id(residentialBuilding.getBuilding_id());
                                    residentialBuildingUnit.setCreate_time(DateUtil.format(new Date()));
                                    residentialBuildingUnit.setCreate_uid("00000000000000000000000000000000");
                                    residentialBuildingUnit.setUpdate_time(DateUtil.format(new Date()));
                                    residentialBuildingUnit.setUpdate_uid("00000000000000000000000000000000");
                                    String[] temp = units.split(",");
                                    for (int k = 0; k < temp.length; k++) {
                                        if (StringUtil.notNullOrEmpty(temp[k])) {
                                            residentialBuildingUnit.setUnit_name(temp[k]);
                                            residentialBuildingUnit.setSort(k);
                                            residentialBuildingUnit.setUnit_id(UuidUtil.getUUID());
                                            residentialBuildingUnitMapper.insert(residentialBuildingUnit);
                                            System.out.println("residentialBuildingUnitMapper+dassdsdsdsdsdsdsddddd");
                                        }

                                    }
                                }

                            }

                        }
                    }

                }

                if (count == 1) {
                    //得到residential
                    Residential residential = residentialMapper.selectResidential(
                            residentialExcelData.getResidential_name(), residentialExcelData.getArea_name(),
                            residentialExcelData.getCity_name());

                    //得到re

                    // 商圈关系
                    if (!StringUtil.isNullOrEmpty(residential.getArea_code())
                            && !StringUtil.isNullOrEmpty(residential.getCity_code())
                            && !StringUtil.isNullOrEmpty(residentialExcelData.getResidential_name())) {
                        Map<String, Object> map = new HashMap<String, Object>();
                        map.put("area_code", residential.getArea_code());
                        map.put("city_code", residential.getCity_code());
                        map.put("business_circle_name", residentialExcelData.getBusiness_circle_name());
                        BusinessCircle businessCircle = businessCircleMapper.getBudinessCircle(map);
                        if (businessCircle != null) {
                            ResidentialBusinessCircle taResidentialBusinessCircle = new ResidentialBusinessCircle();
                            taResidentialBusinessCircle.setResidential_business_circle_id(UuidUtil.getUUID());
                            taResidentialBusinessCircle.setResidential_id(residential.getResidential_id());
                            taResidentialBusinessCircle.setBusiness_circle_id(businessCircle.getBusiness_circle_id());
                            taResidentialBusinessCircle.setCreate_uid("00000000000000000000000000000000");
                            taResidentialBusinessCircle.setCreate_time(DateUtil.format(new Date()));
                            residentialBusinessCircleMapper.insert(taResidentialBusinessCircle);
                            System.out.println("residentialBusinessCircleMapper+rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr");
                        }
                    }
                    for (int j = 0; j < unit_excel_data.size(); j++) {
                        UnitExcelData unitExcelData = unit_excel_data.get(j);
                        if (null != unitExcelData) {
                            // 楼盘--查到对应的楼盘
                            if (StringUtil.notNullOrEmpty(residentialExcelData.getResidential_name())
                                    && residentialExcelData.getResidential_name()
                                    .equals(unitExcelData.getResidential_name())) {
                                // 本楼盘数据进来--
                                //Integer countNum = residentialBuildingMapper.getCountbyResidential(residential.getResidential_id(),);
                                ResidentialBuilding residentialBuilding = new ResidentialBuilding();
                                residentialBuilding.setBuilding_id(UuidUtil.getUUID());
                                residentialBuilding.setResidential_id(residential.getResidential_id());
                                residentialBuilding.setBuilding_name(unitExcelData.getBuilding_name());
                                residentialBuilding.setSuffix(unitExcelData.getSuffix());
                                residentialBuilding.setGround_floors(unitExcelData.getGround_floors());
                                residentialBuilding.setUnderground_floors(unitExcelData.getUnderground_floors());
                                residentialBuilding.setHousing_type(unitExcelData.getHousing_type());
                                residentialBuilding.setHave_elevator(unitExcelData.getHave_elevator());
                                residentialBuilding.setDeleted(0);
                                residentialBuilding.setHouse_role(unitExcelData.getHouse_role());
                                residentialBuilding.setCreate_time(DateUtil.format(new Date()));
                                residentialBuilding.setCreate_uid("00000000000000000000000000000000");
                                residentialBuilding.setUpdate_time(DateUtil.format(new Date()));
                                residentialBuilding.setUpdate_uid("00000000000000000000000000000000");
                                residentialBuildingMapper.insert(residentialBuilding);
                                System.out.println("residentialBuildingMapper+dddddddddddddddddddd");

                                // 单元
                                String units = unitExcelData.getUnit_name();
                                if (StringUtil.notNullOrEmpty(units)) {
                                    ResidentialBuildingUnit residentialBuildingUnit = new ResidentialBuildingUnit();
                                    residentialBuildingUnit.setBuilding_id(residentialBuilding.getBuilding_id());
                                    residentialBuildingUnit.setCreate_time(DateUtil.format(new Date()));
                                    residentialBuildingUnit.setCreate_uid("00000000000000000000000000000000");
                                    residentialBuildingUnit.setUpdate_time(DateUtil.format(new Date()));
                                    residentialBuildingUnit.setUpdate_uid("00000000000000000000000000000000");
                                    String[] temp = units.split(",");
                                    for (int k = 0; k < temp.length; k++) {
                                        if (StringUtil.notNullOrEmpty(temp[k])) {
                                            residentialBuildingUnit.setUnit_name(temp[k]);
                                            residentialBuildingUnit.setSort(k);
                                            residentialBuildingUnit.setUnit_id(UuidUtil.getUUID());
                                            residentialBuildingUnitMapper.insert(residentialBuildingUnit);
                                            System.out.println("residentialBuildingUnitMapper+dassdsdsdsdsdsdsddddd");
                                        }

                                    }
                                }

                            }

                        }
                    }

                }
            }
        }

        return ResultMsg.createOkMsg("OK");
    }

    private boolean notAlike(String taDepartString, String taDepartStringOld) {
        if (StringUtil.isNullOrEmpty(taDepartStringOld) || StringUtil.isNullOrEmpty(taDepartString)) {
            return false;
        }
        String[] taDepartList = taDepartString.split(",");
        taDepartList = removeNull(taDepartList);
        Arrays.sort(taDepartList);
        String[] taDepartOldList = taDepartStringOld.split(",");
        taDepartOldList = removeNull(taDepartOldList);
        Arrays.sort(taDepartOldList);

        if (!Arrays.equals(taDepartList, taDepartOldList)) {
            return true;
        }
        return false;
    }

    //去掉数组中的null
    private String[] removeNull(String[] arry) {
        List<String> temp = new ArrayList<>();
        for (String string : arry) {
            if (StringUtil.notNullOrEmpty(string)) {
                temp.add(string);
            }
        }
        String[] noNullArray = new String[temp.size()];
        for (int i = 0; i < temp.size(); i++) {
            noNullArray[i] = temp.get(i);
        }
        return noNullArray;
    }

    /**
     * 楼盘字典下拉列表
     *
     * @param pageData
     * @return ResultObjectMsg<PagingHelper<Map<String, Object>>>
     * @throws Exception
     */
    public ResultObjectMsg<PagingHelper<Map<String, Object>>> searchResidentialListForSelect(Map<String, Object> pageData) throws Exception {
        int page_num = ParameterUtil.getInt(pageData, "pageNumber", 1);
        int page_size = ParameterUtil.getInt(pageData, "pageSize", 10);

        SessionVo sessionVo = (SessionVo) pageData.get("sessionVo");
        if (null != sessionVo) {
            SysUser sysUser = sessionVo.getSysUser();
            if (null != sysUser) {
                pageData.put("user_dep_id", sysUser.getDep_id());
            }
        }

        PagingHelper<Map<String, Object>> ph = new PagingHelper<Map<String, Object>>();
        ph.setPerPageSize(page_size);
        ph.setCurrentPage(page_num);
        pageData.put("begin_num", ph.getBeginRowNumber());
        pageData.put("end_num", ph.getEndRowNumber());

        List<Map<String, Object>> list = residentialMapper.searchResidentialListForSelect(pageData);
        Integer count = residentialMapper.countSearchResidentialForSelect(pageData);
        ph.setTotal(count); // 设置总的记录数
        ph.setRows(list); // 设置返回的记录
        return new ResultObjectMsg<PagingHelper<Map<String, Object>>>(ph);
    }
    
    /**
     * 添加纠错信息
     * @param residentialCorrection
     * @param user
     * @return
     */
    public ResultMsg saveResidentialCorrection(ResidentialCorrection residentialCorrection, SysUser user){
    	residentialCorrection.setResidential_correction_id(UuidUtil.getUUID());
    	residentialCorrection.setCity_code(user.getCurrent_city_code());
    	residentialCorrection.setCreate_time(DateUtil.getCurrentDateTimeAsString());
    	residentialCorrection.setCreate_uid(user.getUser_id());
    	residentialCorrectionMapper.insert(residentialCorrection);
    	return ResultMsg.createOkMsg();
    }

    /**
     * 更新楼盘信息
     *
     * @param residential
     * @param sysUser
     * @return ResultMsg
     */
    @Transactional
    public ResultMsg updateResidential(Residential residential, SysUser sysUser) {
        try {
            if(null == sysUser || StringUtil.isNullOrEmpty(sysUser.getUser_id())) {
                return ResultMsg.createErrorMsg("请登录.");
            }
            if(StringUtil.isNullOrEmpty(residential.getResidential_id())) {
                return ResultMsg.createErrorMsg("缺少楼盘ID.");
            }
            if(StringUtil.isNullOrEmpty(residential.getUpdate_time())) {
                return ResultMsg.createErrorMsg("缺少更新时间.");
            }
            Residential residentialOld = residentialMapper.selectByPrimaryKey(residential.getResidential_id());
            if(null == residentialOld) {
                return ResultMsg.createErrorMsg("楼盘不存在.");
            }
            if(!residentialOld.getUpdate_time().equals(residential.getUpdate_time())) {
                return ResultMsg.createOkMsg("数据已被用户更新,请刷新数据后重试.");
            }
            residential.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
            residential.setUpdate_uid(sysUser.getUser_id());
            residentialMapper.updateByPrimaryKeySelective(residential);
        } catch (Exception e) {

        }

        return ResultMsg.createOkMsg();
    }

	public ResultMsg addResidentialCorrection(
			ResidentialCorrection residentialCorrection, SysUser sysUser) {
		if(StringUtil.isNullOrEmpty(residentialCorrection.getCorrection_info())||residentialCorrection.getCorrection_info().length()<10){
			 return ResultMsg.createErrorMsg("请输入至少10个字的纠错信息.");
		}
		residentialCorrection.initBase(sysUser.getUser_id());
		residentialCorrectionMapper.insert(residentialCorrection);
			
		return ResultMsg.createOkMsg("提交成功");
	}

	public ResultObjectMsg<PagingHelper<ResidentialCorrection>> auditResidentialList(Map<String, Object> pageData) {
		int page_num = ParameterUtil.getInt(pageData, "pageNumber", 1);
        int page_size = ParameterUtil.getInt(pageData, "pageSize", 10);
        List<String> paraList = new ArrayList<String>();
        paraList.add("audit_status_search");
        paraList.add("correction_type_search");
        paraList.add("uid_search");
        
        pageData = StringUtil.readAndWritePageData(pageData, paraList);
        SessionVo sessionVo = (SessionVo) pageData.get("sessionVo");
        if (null != sessionVo) {
            SysUser sysUser = sessionVo.getSysUser();
            pageData.put("current_city_code", sysUser.getCurrent_city_code());
        }

        PagingHelper<ResidentialCorrection> ph = new PagingHelper<ResidentialCorrection>();
        ph.setPerPageSize(page_size);
        ph.setCurrentPage(page_num);

        pageData.put("begin_num", ph.getBeginRowNumber());
        pageData.put("end_num", ph.getEndRowNumber());

        
        
        List<ResidentialCorrection> list = residentialCorrectionMapper.searchResidentialCorrectionList(pageData);
        Integer count = residentialCorrectionMapper.countResidentialCorrection(pageData);

        ph.setTotal(count); // 设置总的记录数
        ph.setRows(list); // 设置返回的记录

        // 功能数据权限
        ResultObjectMsg<PagingHelper<ResidentialCorrection>> resultObjectMsg = new ResultObjectMsg<PagingHelper<ResidentialCorrection>>(ph);
        

        return resultObjectMsg;
	}
	//审核意见
	public ResultMsg auditResidential(
			ResidentialCorrection residentialCorrection,SysUser sysUser) {
		ResidentialCorrection correction = residentialCorrectionMapper.selectById(residentialCorrection.getResidential_correction_id());
		correction.initAudit(sysUser.getUser_id(), residentialCorrection.getCorrection_audit_status());
		correction.setCorrection_audit_opinion(residentialCorrection.getCorrection_audit_opinion());
		residentialCorrectionMapper.updateByPrimaryKey(correction);
		return ResultMsg.createOkMsg();
	}

	public ResultMsg deleteResidentialCorrection(
			ResidentialCorrection residentialCorrection, SysUser sysUser) {
		//删除记录
		ResidentialCorrection correction = residentialCorrectionMapper.selectById(residentialCorrection.getResidential_correction_id());
		correction.setDeleted(1);
		residentialCorrectionMapper.updateByPrimaryKey(correction);
		return ResultMsg.createOkMsg();
	}
}
