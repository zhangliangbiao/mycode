package com.isz.erp.house.biz;

import com.aliyun.oss.ClientException;
import com.aliyun.oss.OSSException;
import com.isz.erp.common.page.PagingHelper;
import com.isz.erp.common.util.*;
import com.isz.erp.facade.house.entity.*;
import com.isz.erp.facade.user.entity.SysDepart;
import com.isz.erp.facade.user.entity.SysDistrict;
import com.isz.erp.facade.user.entity.SysUser;
import com.isz.erp.facade.user.service.DistrictService;
import com.isz.erp.house.mapper.ResidentialImportMapper;
import com.isz.erp.house.util.ResidentialImportUtil;
import com.isz.erp.house.vo.BusinessCircleVo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.*;

/**
 * @author jaychum
 */
@Service("residentialImportBiz")
public class ResidentialImportBiz {
	@Autowired
	private ResidentialImportMapper residentialImportMapper;
	@Autowired
	private DistrictService districtService;

	@Transactional
	public ResultMsg uploadExcel(SysUser sysUser, String bucketName, String rootPath, Map<String, Object> pageData)
			throws RuntimeException, OSSException, ClientException, IOException {
		String action = (String) pageData.get("action");
		String fileName = (String) pageData.get("fileName");
		List<Map<String, String>> dataList = (List<Map<String, String>>) pageData.get("dataList");
		String[] header = (String[]) pageData.get("header");
		String[] dataKeys = (String[]) pageData.get("dataKeys");
		String[] ruleValues = (String[]) pageData.get("ruleValues");

		Map<String, String> keyMap = new LinkedHashMap<String, String>();
		Map<String, String> ruleMap = new LinkedHashMap<String, String>();
		for (int i = 0; i < dataKeys.length; i++) {
			keyMap.put(dataKeys[i], header[i]);
			ruleMap.put(dataKeys[i], ruleValues[i]);
		}
		ResidentialImportUtil importUtil = new ResidentialImportUtil();
		List<Map<String, String>> succList = new ArrayList<Map<String, String>>();
		List<Map<String, String>> errList = new ArrayList<Map<String, String>>();
		int read_num = dataList.size();
		if ("residential_import".equals(action)) {// 楼盘
			String city_code = (String) pageData.get("city_code");
			if (StringUtil.isNullOrEmpty(city_code)) {
				return ResultMsg.createErrorMsg("缺少当前城市city_code.");
			}
			// 字段验证及处理
			// DataRule.checkData(dataList, succList, errList, keyMap, ruleMap);
			importUtil.checkResidential(dataList, succList, errList, keyMap);
			succList = this.batchImportResidential(succList, errList, keyMap, sysUser);
		} else if ("residential_house_import".equals(action)) {
			String residential_id = (String) pageData.get("residential_id");
			if (com.isz.erp.common.util.StringUtil.isNullOrEmpty(residential_id)) {
				return ResultMsg.createErrorMsg("缺少楼盘ID.");
			}
			Residential r = new Residential();
			r.setResidential_id(residential_id);
			Residential residential = residentialImportMapper.selectResidential(r);
			if (residential == null) {
				throw new RuntimeException("未查询到楼盘信息！");
			}
			// 字段验证及处理
			// DataRule.checkData(dataList, succList, errList, keyMap, ruleMap);
			importUtil.checkResidentialHouse(dataList, succList, errList, keyMap);
			succList = this.batchImportHouseNo(residential, succList, errList, keyMap, sysUser);
		}

		// 生成Excel
		String[] reHeader = new String[dataKeys.length + 2];
		String[] redataKeys = new String[dataKeys.length + 2];
		for (int i = 0; i < dataKeys.length; i++) {
			reHeader[i] = header[i];
			redataKeys[i] = dataKeys[i];
		}
		// map.put("excel_rowNum", "第" + rowNum + "行");
		// map.put("excel_checkResult", checkResult);
		reHeader[reHeader.length - 2] = "原文件行数";
		reHeader[reHeader.length - 1] = "";
		redataKeys[redataKeys.length - 2] = "excel_rowNum";
		redataKeys[redataKeys.length - 1] = "excel_checkResult";
		// 获取当前目录
		File file = new File("");
		String outPath = file.getCanonicalPath() + "/" + fileName;

		ExcelXlsUtil.write(outPath, "成功记录", reHeader, redataKeys, succList);
		reHeader[reHeader.length - 1] = "失败原因";
		ExcelXlsUtil.write(outPath, "失败记录", reHeader, redataKeys, errList);
		InputStream instream = new FileInputStream(outPath);
		String suffix = fileName.substring(fileName.lastIndexOf("."));
		// 上传图片到阿里云
		String filePath = rootPath + "/" + DateUtil.getNowYear() + "/" + DateUtil.getNowMonth() + "/"
				+ DateUtil.getNowDayOfMonth() + "/" + DateUtil.getNowHourOfDay() + "/" + UUID.randomUUID().toString()
				+ suffix;
		String aliPath = UploadUtil.uploadFile(bucketName, filePath, "application/vnd.ms-excel", instream);
		if(instream!=null){
			instream.close();
			instream=null;
		}
		// 删除保存到当前磁盘的文件
		File f = new File(outPath);
		if (f.exists()) {
			f.delete();
		}
		if (StringUtil.isNullOrEmpty(aliPath)) {
			throw new RuntimeException("结果Excel文件上传OSS服务器失败.");
		}
		// 计入操作结果历史表
		ResidentialExcelProcess rep = new ResidentialExcelProcess();
		rep.setProcess_id(UuidUtil.getUUID());
		rep.setAction(action);
		rep.setCreate_time(DateUtil.getCurrentDateTimeAsString());
		rep.setCreate_uid(sysUser.getUser_id());
		rep.setCreate_uname(sysUser.getUser_name());
		rep.setFile_name(fileName);
		rep.setFile_url(aliPath);
		rep.setRead_num(read_num);
		rep.setSucc_num(succList.size());
		rep.setErr_num(errList.size());
		rep.setRemark("");
		residentialImportMapper.insert(rep);
		return new ResultMsg().createOkMsg();
	}

	/**
	 * 批量导入楼盘
	 *
	 * @param city_code
	 * @param succList
	 * @param errList
	 * @param keyMap
	 * @param sysUser
	 * @return List<Map<String, String>>
	 */
	private List<Map<String, String>> batchImportResidential(List<Map<String, String>> succList,
			List<Map<String, String>> errList, Map<String, String> keyMap, SysUser sysUser) {
		List<Map<String, String>> saveList = new ArrayList<Map<String, String>>();
		Map<String, Object> pageData=new HashMap<String, Object>();
		pageData.put("level", 2);//查询城市
		ResultObjectMsg<List<SysDistrict>> cityListObj = districtService.selectTaDistrictList(pageData);
		if (cityListObj.getCode() != 0) {
			throw new RuntimeException("查询城市失败：" + cityListObj.getMsg());
		}

		// 当前城市城区列表
		List<SysDistrict> cityList = cityListObj.getObj();
		Map<String, List<SysDistrict>> areaListMap = new HashMap<String, List<SysDistrict>>();
		
		// 已经从库里查出来的楼盘 key=citycode
		Map<String, List<Residential>> residentialListMap = new HashMap<String, List<Residential>>();
		// 查出的城区商圈 key=citycode+"&&"+area_code
		Map<String, List<BusinessCircleVo>> areaBusinessListMap = new HashMap<String, List<BusinessCircleVo>>();
		// 已经从库里查出来的楼盘商圈对应关系 key=residential_id+"&&"+business_circle_id
		//Map<String, List<ResidentialBusinessCircle>> residentialBusinessList = new HashMap<String, List<ResidentialBusinessCircle>>();
		// 各城市 部门列表
		Map<String, List<SysDepart>> sysDepartListMap = new HashMap<String, List<SysDepart>>();
		
		// 新数据
		// 新楼盘
		List<Residential> newResidentialList = new ArrayList<Residential>();
		// 新楼盘的商圈对应关系
		List<ResidentialBusinessCircle> newResidentialBusinessList = new ArrayList<ResidentialBusinessCircle>();
		// 新楼盘 residential_department
		List<ResidentialDepartment> newResidentialDepartmentList = new ArrayList<ResidentialDepartment>();
		ResidentialImportUtil importUtil = new ResidentialImportUtil();
		for (Map<String, String> map : succList) {
			SysDistrict city=(SysDistrict) importUtil.getObject(cityList, "name", map.get("city_name"));
			if (city == null) {
				map.put("excel_checkResult", map.get("excel_checkResult") + " 系统中城市不存在");
				errList.add(map);
				continue;
			}
			List<SysDistrict> areaList=areaListMap.get(city.getCode());
			if(areaList==null){
				Map<String, Object> citymap = new HashMap<String, Object>();
				citymap.put("parent_code", city.getCode());
				ResultObjectMsg<List<SysDistrict>> result = districtService.selectTaDistrictList(citymap);
				if (result.getCode() != 0) {
					throw new RuntimeException("查询城区列表失败：" + result.getMsg());
				}
				areaList=result.getObj();
				areaListMap.put(city.getCode(),areaList);
			}
			SysDistrict area = (SysDistrict) importUtil.getObject(areaList, "name", map.get("area_name"));
			if (area == null) {
				map.put("excel_checkResult", map.get("excel_checkResult") + " 系统中城区不存在");
				errList.add(map);
				continue;
			}
			
			String areaKey = city.getCode() + "&&" + area.getCode();//
			// 城区下商圈
			String business_circle_name = map.get("business_circle_name");
			if (!areaBusinessListMap.containsKey(areaKey)) {// 查出城区商圈
				BusinessCircleVo businessCircleVo = new BusinessCircleVo();
				businessCircleVo.setArea_code(area.getCode());
				businessCircleVo.setCity_code(city.getCode());
				areaBusinessListMap.put(areaKey,
						residentialImportMapper.selectCityAreaBusinessCircle(businessCircleVo));
			}
			BusinessCircleVo businessCircleVo = (BusinessCircleVo) importUtil
					.getObject(areaBusinessListMap.get(areaKey), "business_circle_name", business_circle_name);
			if (businessCircleVo == null) {
				// 城区没有该商圈
				map.put("excel_checkResult", map.get("excel_checkResult") + " 系统中商圈不存在");
				errList.add(map);
				continue;
			}

			// 部门
			List<SysDepart> departList=sysDepartListMap.get(city.getCode());
			if(departList==null){
				departList = residentialImportMapper.selectDepartByCityCode(city.getCode());
				sysDepartListMap.put(city.getCode(), departList);
			}
			String dep_name = map.get("dep_name");
			SysDepart depart = (SysDepart) importUtil.getObject(departList, "dep_name", dep_name);
			if (depart == null) {
				map.put("excel_checkResult", map.get("excel_checkResult") + " 系统中责任部门不存在");
				errList.add(map);
				continue;
			}

			// 楼盘
			String residential_name = map.get("residential_name");
			if (!residentialListMap.containsKey(city.getCode())) {
				residentialListMap.put(city.getCode(), new ArrayList<Residential>());
			}
			Residential residential = (Residential) importUtil.getObject(residentialListMap.get(city.getCode()),
					"residential_name", residential_name);
			Residential residential_byname = (Residential) importUtil.getObject(residentialListMap.get(city.getCode()),
					"byname", residential_name);
			
			if (residential == null && residential_byname==null) {
				Residential r = new Residential();
				r.setCity_code(city.getCode());
				r.setResidential_name(residential_name);
				residential = residentialImportMapper.selectResidential(r);
				if (residential != null) {// 新建楼盘
					residentialListMap.get(city.getCode()).add(residential);
					map.put("excel_checkResult", map.get("excel_checkResult") + " 该楼盘已存在");
					errList.add(map);
					continue;
				}
				// 新楼盘
				residential = importUtil.createResidential(map, area, sysUser);
				residentialListMap.get(city.getCode()).add(residential);
				newResidentialList.add(residential);// 新楼盘
				// 楼盘 商圈关联
				ResidentialBusinessCircle residentialBusinessCircle = new ResidentialBusinessCircle();
				residentialBusinessCircle.setResidential_business_circle_id(UuidUtil.getUUID());
				residentialBusinessCircle.setBusiness_circle_id(businessCircleVo.getBusiness_circle_id());
				residentialBusinessCircle.setResidential_id(residential.getResidential_id());
				residentialBusinessCircle.setCreate_time(DateUtil.getCurrentDateTimeAsString());
				residentialBusinessCircle.setCreate_uid(sysUser.getUser_id());
				newResidentialBusinessList.add(residentialBusinessCircle);

				// 楼盘 部门关联
				ResidentialDepartment residentialDepartment = new ResidentialDepartment();
				residentialDepartment.setResidential_dep_id(UuidUtil.getUUID());
				residentialDepartment.setResidential_id(residential.getResidential_id());
				residentialDepartment.setDid(depart.getDep_id());
				residentialDepartment.setCreate_uid(sysUser.getUser_id());
				residentialDepartment.setCreate_time(DateUtil.getCurrentDateTimeAsString());
				newResidentialDepartmentList.add(residentialDepartment);

				saveList.add(map);
			} else {
				map.put("excel_checkResult", map.get("excel_checkResult") + " 该楼盘已存在");
				errList.add(map);
				continue;
			}
		}

		// 入库
		if (null != newResidentialList && newResidentialList.size() > 0) {
			residentialImportMapper.insertResidentialBatch(newResidentialList);
			if (null != newResidentialBusinessList && newResidentialBusinessList.size() > 0) {
				residentialImportMapper.insertResidentialBusinessCircleBatch(newResidentialBusinessList);
			}
			if (null != newResidentialDepartmentList && newResidentialDepartmentList.size() > 0) {
				residentialImportMapper.insertResidentialDepartmentBatch(newResidentialDepartmentList);
			}
		}

		return saveList;// succList
	}

	/**
	 * 批量导入房号
	 *
	 * @param residential
	 * @param succList
	 * @param errList
	 * @param keyMap
	 * @param sysUser
	 */
	private List<Map<String, String>> batchImportHouseNo(Residential residential, List<Map<String, String>> succList,
			List<Map<String, String>> errList, Map<String, String> keyMap, SysUser sysUser) {
		List<Map<String, String>> saveList = new ArrayList<Map<String, String>>();
		ResidentialImportUtil importUtil = new ResidentialImportUtil();

		// 本楼盘的栋座列表
		ResidentialBuilding param = new ResidentialBuilding();
		param.setResidential_id(residential.getResidential_id());
		List<ResidentialBuilding> dataBuildingList = residentialImportMapper.selectResidentialBuilding(param);
		// 本楼盘内各栋的单元列表 key 栋
		Map<String, List<ResidentialBuildingUnit>> dataUnitListMap = new HashMap<String, List<ResidentialBuildingUnit>>();
		// 层列表 key 单元
		Map<String, List<ResidentialBuildingFloor>> dataFloorListMap = new HashMap<String, List<ResidentialBuildingFloor>>();
		// 房号列表 key 层
		Map<String, List<ResidentialBuildingHouseNo>> dataHouseListMap = new HashMap<String, List<ResidentialBuildingHouseNo>>();

		// 新栋座列表
		List<ResidentialBuilding> newBuildingList = new ArrayList<ResidentialBuilding>();
		// 新单元列表
		List<ResidentialBuildingUnit> newUnitList = new ArrayList<ResidentialBuildingUnit>();
		// 新楼层
		List<ResidentialBuildingFloor> newFloorList = new ArrayList<ResidentialBuildingFloor>();
		// 新房号列表
		List<ResidentialBuildingHouseNo> newHouseList = new ArrayList<ResidentialBuildingHouseNo>();
		for (Map<String, String> map : succList) {
			// 比对栋座
			String building_name = map.get("building_name");
			ResidentialBuilding residentialBuilding = (ResidentialBuilding) importUtil.getObject(dataBuildingList,
					"building_name", building_name);
			if (residentialBuilding == null) {
				// 新增栋座
				residentialBuilding = importUtil.createResidentialBuilding(map, residential, sysUser);
				newBuildingList.add(residentialBuilding);// 加入新增，用于入库
				dataBuildingList.add(residentialBuilding);// 加入本地，用于下次比对
			}
			String building_id = residentialBuilding.getBuilding_id();

			// 比较单元
			// 查找当前栋座下单元
			if (!dataUnitListMap.containsKey(building_id)) {
				ResidentialBuildingUnit paramUnit = new ResidentialBuildingUnit();
				paramUnit.setBuilding_id(building_id);
				dataUnitListMap.put(building_id, residentialImportMapper.selectResidentialBuildingUnit(paramUnit));
			}
			ResidentialBuildingUnit residentialBuildingUnit = (ResidentialBuildingUnit) importUtil.getObject(
					dataUnitListMap.get(building_id), "unit_name", map.get("unit_name"));
			if (residentialBuildingUnit == null) {
				// 新增单元
				residentialBuildingUnit = importUtil.createResidentialBuildingUnit(map, residentialBuilding, sysUser);
				residentialBuildingUnit.setCity_code(residential.getCity_code());
				residentialBuildingUnit.setArea_code(residential.getArea_code());
				newUnitList.add(residentialBuildingUnit);// 加入新增，用于入库
				dataUnitListMap.get(building_id).add(residentialBuildingUnit);// 加入本地，用于下次比对
			}
			String unit_id = residentialBuildingUnit.getUnit_id();
			String floorKey = building_id + "&" + unit_id;

			// 查找当前单元楼层
			if (!dataFloorListMap.containsKey(floorKey)) {
				ResidentialBuildingFloor paramFloor = new ResidentialBuildingFloor();
				paramFloor.setBuilding_id(building_id);
				paramFloor.setUnit_id(unit_id);
				dataFloorListMap.put(floorKey, residentialImportMapper.selectResidentialBuildingFloor(paramFloor));
			}
			// 比较楼层
			ResidentialBuildingFloor residentialBuildingFloor = (ResidentialBuildingFloor) importUtil
					.getObject(dataFloorListMap.get(floorKey), "floor_name", map.get("floor_name"));
			if(residentialBuildingFloor==null){
				//层名规则01=1，例：1未找到时，此处多做一个判断01
				residentialBuildingFloor = (ResidentialBuildingFloor) importUtil.getObject(dataFloorListMap.get(floorKey), "floor_name", "0"+map.get("floor_name"));
			}
			if (residentialBuildingFloor == null) {
				residentialBuildingFloor = importUtil.createResidentialBuildingFloor(map, residentialBuildingUnit,
						sysUser);
				residentialBuildingFloor.setCity_code(residential.getCity_code());
				residentialBuildingFloor.setArea_code(residential.getArea_code());
				newFloorList.add(residentialBuildingFloor);// 加入新增，用于入库
				dataFloorListMap.get(floorKey).add(residentialBuildingFloor);
			}
			String floor_id = residentialBuildingFloor.getFloor_id();

			// 房号
			String houseKey = building_id + "&" + unit_id + "&" + floor_id;
			if (!dataHouseListMap.containsKey(houseKey)) {
				ResidentialBuildingHouseNo paramHouse = new ResidentialBuildingHouseNo();
				paramHouse.setBuilding_id(building_id);
				paramHouse.setUnit_id(unit_id);
				paramHouse.setFloor_id(floor_id);
				paramHouse.setCity_code(residential.getCity_code());
				dataHouseListMap.put(houseKey, residentialImportMapper.selectResidentialBuildingHouseNo(paramHouse));
			}
			ResidentialBuildingHouseNo residentialBuildingHouseNo = (ResidentialBuildingHouseNo) importUtil
					.getObject(dataHouseListMap.get(houseKey), "house_no", map.get("house_no"));
			if(residentialBuildingHouseNo==null){
				//房号规则0101=101，例：101未找到时，此处多做一个判断0101
				residentialBuildingHouseNo = (ResidentialBuildingHouseNo) importUtil.getObject(dataHouseListMap.get(houseKey), "house_no", "0"+map.get("house_no"));
			}
			if (residentialBuildingHouseNo == null) {
				// 新增房号
				residentialBuildingHouseNo = importUtil.createResidentialBuildingHouseNo(map, residentialBuildingFloor,
						sysUser);
				residentialBuildingHouseNo.setCity_code(residential.getCity_code());
				residentialBuildingHouseNo.setArea_code(residential.getArea_code());
				newHouseList.add(residentialBuildingHouseNo);
				dataHouseListMap.get(houseKey).add(residentialBuildingHouseNo);
				saveList.add(map);
			} else {
				// 本地有找到 && 新列表没有 则为已经存在数据库
				if (newHouseList.contains(houseKey)) {
					map.put("excel_checkResult", map.get("excel_checkResult") + " 重复房号");
				} else {
					map.put("excel_checkResult", map.get("excel_checkResult") + " 该房号已存在");
				}
				errList.add(map);// 加入错误记录
			}
		}
		if (null != newBuildingList && newBuildingList.size() > 0) {
			residentialImportMapper.insertResidentialBuildingBatch(newBuildingList);
		}
		if (null != newUnitList && newUnitList.size() > 0) {
			residentialImportMapper.insertResidentialBuildingUnitBatch(newUnitList);
		}
		if (null != newFloorList && newFloorList.size() > 0) {
			residentialImportMapper.insertResidentialBuildingFloorBatch(newFloorList);
		}
		if (null != newHouseList && newHouseList.size() > 0) {
			residentialImportMapper.insertResidentialBuildingHouseNoBatch(newHouseList);
		}
		return saveList;// succList
	}

	/**
	 * 搜索Excel导入记录
	 *
	 * @param pageData
	 * @return ResultObjectMsg<PagingHelper<ResidentialExcelProcess>>
	 * @throws Exception
	 */
	public ResultObjectMsg<PagingHelper<ResidentialExcelProcess>> searchExcelUploadHis(Map<String, Object> pageData)
			throws Exception {
		int page_num = ParameterUtil.getInt(pageData, "pageNumber", 1);
		int page_size = ParameterUtil.getInt(pageData, "pageSize", 10);
		PagingHelper<ResidentialExcelProcess> ph = new PagingHelper<ResidentialExcelProcess>();
		ph.setPerPageSize(page_size);
		ph.setCurrentPage(page_num);
		pageData.put("begin_num", ph.getBeginRowNumber());
		pageData.put("end_num", ph.getEndRowNumber());

		List<ResidentialExcelProcess> list = residentialImportMapper.selectResidentialExcelProcess(pageData);
		int count = residentialImportMapper.selectResidentialExcelProcessCount(pageData);
		ph.setTotal(count); // 设置总的记录数
		ph.setRows(list); // 设置返回的记录
		return new ResultObjectMsg<PagingHelper<ResidentialExcelProcess>>(ph);
	}

}
