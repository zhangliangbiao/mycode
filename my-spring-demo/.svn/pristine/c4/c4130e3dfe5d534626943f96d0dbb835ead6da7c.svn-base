package com.isz.erp.house.biz;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.isz.erp.common.exceptions.ServiceEx;
import com.isz.erp.common.page.PagingHelper;
import com.isz.erp.common.util.BusinessCodeUtil;
import com.isz.erp.common.util.CodeTypeConstants;
import com.isz.erp.common.util.DateUtil;
import com.isz.erp.common.util.DicTools;
import com.isz.erp.common.util.DictConstants;
import com.isz.erp.common.util.IszLogger;
import com.isz.erp.common.util.ParameterUtil;
import com.isz.erp.common.util.PhoneValidateUtil;
import com.isz.erp.common.util.ResultMsg;
import com.isz.erp.common.util.ResultObjectMsg;
import com.isz.erp.common.util.StringUtil;
import com.isz.erp.common.util.UuidUtil;
import com.isz.erp.facade.achievement.enums.ConfigFactorEnum;
import com.isz.erp.facade.achievement.enums.ConfigParentTypeEnum;
import com.isz.erp.facade.achievement.enums.ConfigTypeEnum;
import com.isz.erp.facade.achievement.service.AchievementConfigRedisService;
import com.isz.erp.facade.house.entity.Apartment;
import com.isz.erp.facade.house.entity.ApartmentRelet;
import com.isz.erp.facade.house.entity.ApartmentStatusAction;
import com.isz.erp.facade.house.entity.ApplyPhoto;
import com.isz.erp.facade.house.entity.BusinessCircle;
import com.isz.erp.facade.house.entity.FitmentHouse;
import com.isz.erp.facade.house.entity.FitmentRoom;
import com.isz.erp.facade.house.entity.Follow;
import com.isz.erp.facade.house.entity.House;
import com.isz.erp.facade.house.entity.HouseConfiguration;
import com.isz.erp.facade.house.entity.HouseImg;
import com.isz.erp.facade.house.entity.HouseRent;
import com.isz.erp.facade.house.entity.HouseRoom;
import com.isz.erp.facade.house.entity.HouseRoomConfiguration;
import com.isz.erp.facade.house.entity.HouseRoomImg;
import com.isz.erp.facade.house.vo.ApartmentContractVo;
import com.isz.erp.facade.house.vo.ApartmentHouseContractVo;
import com.isz.erp.facade.house.vo.ApartmentVo;
import com.isz.erp.facade.house.vo.HouseContractVo;
import com.isz.erp.facade.house.vo.ShareHouseRoomVo;
import com.isz.erp.facade.user.entity.SysDistrict;
import com.isz.erp.facade.user.entity.SysUser;
import com.isz.erp.facade.user.service.DepartService;
import com.isz.erp.facade.user.service.DistrictService;
import com.isz.erp.facade.user.service.RedisService;
import com.isz.erp.facade.user.service.UserService;
import com.isz.erp.facade.user.vo.SessionVo;
import com.isz.erp.house.mapper.ApartmentContractVoMapper;
import com.isz.erp.house.mapper.ApartmentMapper;
import com.isz.erp.house.mapper.ApartmentReletMapper;
import com.isz.erp.house.mapper.ApartmentStatusActionMapper;
import com.isz.erp.house.mapper.ApplyPhotoMapper;
import com.isz.erp.house.mapper.FitmentHouseMapper;
import com.isz.erp.house.mapper.FitmentRoomMapper;
import com.isz.erp.house.mapper.FollowMapper;
import com.isz.erp.house.mapper.HouseConfigurationMapper;
import com.isz.erp.house.mapper.HouseContractVoMapper;
import com.isz.erp.house.mapper.HouseImgMapper;
import com.isz.erp.house.mapper.HouseMapper;
import com.isz.erp.house.mapper.HouseRentMapper;
import com.isz.erp.house.mapper.HouseRoomConfigurationMapper;
import com.isz.erp.house.mapper.HouseRoomFuncMapper;
import com.isz.erp.house.mapper.HouseRoomImgMapper;
import com.isz.erp.house.mapper.HouseRoomMapper;
import com.isz.erp.service.comm.house.mapper.NewHouseStatusMapper;
import com.isz.erp.service.comm.house.service.HandleApartmentStatusService;
import com.isz.erp.service.comm.house.service.HandleApartmentStatusService.RentAffectApartment_ActionType;
import com.isz.erp.service.comm.house.service.officail.impl.ApartmentOfficailPersonImpl;

/**
 * 自营公寓业务实现
 *
 * @author lws * luwenshan@ishangzu.com
 * @version 1.0 *
 * @date 创建时间：2016年1月22日 下午6:18:09
 * @instruction 说明：
 */
@Service("apartmentServiceBiz")
public class ApartmentServiceBiz {

    @Autowired
    private ApartmentMapper apartmentMapper;

    @Autowired
    private HouseMapper houseMapper;

    @Autowired
    private HouseConfigurationMapper houseConfigurationMapper;

    @Autowired
    private FollowMapper followMapper;

    @Autowired
    private DepartService departService;

    @Autowired
    private UserService userService;

    @Autowired
    private HouseContractVoMapper houseContractVoMapper;

    @Autowired
    private ApartmentContractVoMapper apartmentContractVoMapper;

    @Autowired
    private HouseRoomMapper houseRoomMapper;

    @Autowired
    private ApartmentStatusActionMapper apartmentStatusActionMapper;

    @Autowired
    private HouseRoomImgMapper houseRoomImgMapper;

    @Autowired
    private HouseRoomConfigurationMapper houseRoomConfigurationMapper;

    @Autowired
    private HouseServiceBiz houseServiceBiz;

    @Autowired
    private HouseRentMapper houseRentMapper;

    @Autowired
    private HouseRoomFuncMapper houseRoomFuncMapper;

    @Autowired
    private HouseImgMapper houseImgMapper;

    //    @Autowired
//    private NewHouseStatusService houseStatusService;
    @Autowired
    private HandleApartmentStatusService handleApartmentStatusService;

    @Autowired
    private NewHouseStatusMapper houseStatusMapper;

    @Autowired
    private DistrictService districtService;

    @Autowired
    private RedisService redisService;

    @Autowired
    private FitmentHouseMapper fitmentHouseMapper;

    @Autowired
    private FitmentRoomMapper fitmentRoomMapper;

    @Autowired
    private ApartmentReletMapper apartmentReletMapper;

    @Autowired
    private AchievementConfigRedisService achievementConfigRedisService;

    @Autowired
    private DesignServiceBiz designServiceBiz;
    @Autowired
    private ApartmentOfficailPersonImpl apartmentOfficailPersonImpl;


    @Autowired
    private ApplyPhotoMapper applyPhotoMapper;

//    @Transactional
//    public void affectApartmentStatusBatch(SysUser user) throws ServiceEx {
//        this.houseStatusService.entrustAffectApartmentStatusBatch(user);
//        this.houseStatusService.rentAutoExpireAffectApartmentStatus(user);
//    }

    @Transactional
    public ResultMsg cancelApartmentRelet(SessionVo vo, String apartmentId) throws Exception {
        try {

            Apartment apartment = apartmentMapper.selectByPrimaryKey(apartmentId);

            if (apartment == null || apartment.getDeleted().intValue() == 1) {
                return ResultMsg.createErrorMsg("找不到公寓信息.");
            }

            if (DictConstants.ApartmentCategory.CUSTOM_RELET.value().equals(apartment.getCategory())) {

                Map<String, Object> validContract = houseStatusMapper.selectValidContract(apartment.getHouse_id());

                Map<String, Object> validApartmentContract = this.houseStatusMapper.selectValidApartmentContractByApartmentId(apartmentId);

                if (validApartmentContract == null) {
                    return ResultMsg.createErrorMsg("当前没有生效的承租合同.");
                }

                if ((validContract != null && vo.isEnabled("ManageApartmentCancelApartmentRelet", (String) validContract.get("sign_did"), (String) validContract.get("sign_uid"))) || (validApartmentContract != null && vo.isEnabled("ManageApartmentCancelApartmentRelet", (String) validApartmentContract.get("sign_did"), (String) validApartmentContract.get("sign_uid")))) {

                    this.apartmentReletMapper.deleteReletByApartmentId(apartmentId, vo.getSysUser().getUser_id());

                    this.houseStatusMapper.updateApartmentCategoryById(apartmentId, vo.getSysUser().getUser_id(), DictConstants.ApartmentCategory.CUSTOM_INRENT.value());

                    //系统生成跟进
                    String follow_content = "【状态类别：客户转租=>客户在租】";
                    saveFollow(apartmentMapper.selectByPrimaryKey(apartmentId), follow_content);
                    return ResultMsg.createOkMsg("取消房源转租成功.");

                } else {

                    return ResultMsg.createErrorMsg("请联系房源方或者客源方取消转租.");
                }

            } else {
                return ResultMsg.createErrorMsg("该公寓客户未转租.");
            }

        } catch (Exception e) {
            IszLogger.error(e);
            throw new ServiceEx(e);
        }
    }

    @Transactional
    public ResultMsg saveApartmentRelet(SessionVo vo, ApartmentRelet relet) throws Exception {

        try {
            if (relet == null) {
                return ResultMsg.createErrorMsg("请输入转租信息.");
            }

            if (relet.getApartment_id() == null) {
                return ResultMsg.createErrorMsg("请选择房源.");
            }

            if (relet.getRent_end_date() == null) {
                return ResultMsg.createErrorMsg("承租到期日不能为空.");
            }

            if (relet.getRent_price() == null) {
                return ResultMsg.createErrorMsg("退租月租金不能为空.");
            }

            if (relet.getLink_type() == null || DicTools.getCnValue("LinkmanType", relet.getLink_type()) == null) {
                return ResultMsg.createErrorMsg("请选择看房联系人.");
            }

            if (relet.getLink_phone() == null || !PhoneValidateUtil.isMobileOrPhone(relet.getLink_phone())) {
                return ResultMsg.createErrorMsg("电话格式不正确.");
            }

            if (relet.getCan_stay_date() == null) {
                return ResultMsg.createErrorMsg("联系电话不能为空.");
            }

            if (relet.getNote() != null && relet.getNote().length() >= 255) {
                return ResultMsg.createErrorMsg("备注最大长度不能超过255个字符.");
            }

            if (this.apartmentCanRelet(vo, relet.getApartment_id()).getCode() != 0) {
                return ResultMsg.createErrorMsg("转租申请已失效.");
            }

            relet.setRelet_id(UuidUtil.getUUID());

            this.apartmentReletMapper.insertSelective(relet);

            this.houseStatusMapper.updateApartmentCategoryById(relet.getApartment_id(), relet.getCreate_uid(), DictConstants.ApartmentCategory.CUSTOM_RELET.value());

            //系统生成跟进
            String follow_content = "【状态类别：客户在租=>客户转租】";
            saveFollow(apartmentMapper.selectByPrimaryKey(relet.getApartment_id()), follow_content);

            return ResultMsg.createOkMsg("房源转租成功.");
        } catch (Exception e) {
            IszLogger.error(e);
            throw new ServiceEx(e);
        }
    }

    public ResultObjectMsg<Map<String, Object>> apartmentCanRelet(SessionVo vo, String apartmentId) throws Exception {

        Apartment apartment = apartmentMapper.selectByPrimaryKey(apartmentId);

        if (apartment == null || apartment.getDeleted().intValue() == 1) {
            return new ResultObjectMsg<Map<String, Object>>("找不到公寓信息.");
        }

        if (DictConstants.RentStatus.RENTED.value().equals(apartment.getRent_status()) && DictConstants.ApartmentCategory.CUSTOM_INRENT.value().equals(apartment.getCategory())) {

            Map<String, Object> validContract = houseStatusMapper.selectValidContract(apartment.getHouse_id());

            Map<String, Object> validApartmentContract = this.houseStatusMapper.selectValidApartmentContractByApartmentId(apartmentId);

            if (validApartmentContract == null) {
                return new ResultObjectMsg<Map<String, Object>>("当前没有生效的承租合同.");
            }

            if ((validContract != null && vo.isEnabled("ManageApartmentSaveApartmentRelet", (String) validContract.get("sign_did"), (String) validContract.get("sign_uid"))) || (validApartmentContract != null && vo.isEnabled("ManageApartmentSaveApartmentRelet", (String) validApartmentContract.get("sign_did"), (String) validApartmentContract.get("sign_uid")))) {

                Map<String, Object> currentRentPrice = apartmentMapper.selectCurrentApartmentRentPrice((String) validApartmentContract.get("contract_id"));

                validApartmentContract.put("currentRentPrice", (currentRentPrice == null || currentRentPrice.get("money") == null) ? 0 : currentRentPrice.get("money"));

                Map<String, Object> renter = this.apartmentMapper.selectCustomerPersonById((String) validApartmentContract.get("person_id"));
                validApartmentContract.put("rentPersonPhone", (renter == null || renter.get("phone") == null) ? "" : renter.get("phone"));

                return new ResultObjectMsg<Map<String, Object>>(validApartmentContract);

            } else {
                return new ResultObjectMsg<Map<String, Object>>("请联系房源方或者客源方转租.");
            }

        } else {
            return new ResultObjectMsg<Map<String, Object>>("该类别无需转租.");
        }

    }

    /**
     * 整租房源-列表
     *
     * @param pageData
     * @return
     * @throws Exception
     */
    public ResultObjectMsg<PagingHelper<Apartment>> searchEntireApartmentList(Map<String, Object> pageData) throws Exception {
        int page_num = ParameterUtil.getInt(pageData, "pageNumber", 1);
        int page_size = ParameterUtil.getInt(pageData, "pageSize", 10);

        SessionVo sessionVo = (SessionVo) pageData.get("sessionVo");
        if (null != sessionVo) {
            SysUser sysUser = sessionVo.getSysUser();
            pageData.put("current_city_code", sysUser.getCurrent_city_code());
        }
        List<String> paraList = new ArrayList<String>();
        // 出租状态(多选)
        paraList.add("rent_status_search");
        // 激活类型(多选)
        paraList.add("activated_type_search");
        // 公寓名称
        paraList.add("apartment_kind_search");
        // 朝向
        paraList.add("orientation_search");
        // 装修
        paraList.add("fitment_type_search");
        // 物业类型
        paraList.add("property_type_search");
        // 物业用途
        paraList.add("property_use_search");
        // 公寓类型
        paraList.add("apartment_type_search");
        // 装修状态
        paraList.add("fitment_status_search");
        // 着火状态
        paraList.add("fire_status_search");
        // 改造方式
        paraList.add("reform_way_search");
        // 看房方式
        paraList.add("look_type_search");
        // 签约部门
        String signDepIds = ParameterUtil.getString(pageData, "sign_dept_search", "");
        if (StringUtils.isNotBlank(signDepIds)) {
            signDepIds = userService.getChildDepIds(signDepIds);
            pageData.put("sign_dept_search", signDepIds);
        }
        paraList.add("sign_dept_search");
        paraList.add("sign_uid_search");
        paraList.add("business_circle_search");
        paraList.add("area_code_search");
        // 责任部门
        String responseDepIds = ParameterUtil.getString(pageData, "dept_response_search", "");
        if (StringUtils.isNotBlank(responseDepIds)) {
            responseDepIds = userService.getChildDepIds(responseDepIds);
            pageData.put("dept_response_search", responseDepIds);
        }

        pageData = StringUtil.readAndWritePageData(pageData, paraList);


        PagingHelper<Apartment> ph = new PagingHelper<Apartment>();
        ph.setPerPageSize(page_size);
        ph.setCurrentPage(page_num);

        pageData.put("begin_num", ph.getBeginRowNumber());
        pageData.put("end_num", ph.getEndRowNumber());

        List<Apartment> list = apartmentMapper.searchApartmentList(pageData);
        /*for (Apartment apartment : list) {
            apartment.setBusinessCircleList(apartment.getBusinessCircleList());
        }*/
        Integer count = apartmentMapper.countSearchApartment(pageData);

        ph.setTotal(count); // 设置总的记录数
        ph.setRows(list); // 设置返回的记录
        return new ResultObjectMsg<PagingHelper<Apartment>>(ph);
    }

    /**
     * 整租房源-详情
     *
     * @param sessionVo
     * @param apartmentId
     * @return ResultObjectMsg<Apartment>
     * @throws Exception
     */
    public ResultObjectMsg<Apartment> selectEntireApartmentDetail(SessionVo sessionVo, String apartmentId) throws Exception {
        Apartment apartment = apartmentMapper.selectEntireHouseByApartmentId(apartmentId);
        if (apartment.getOnlineHouseInfo() != null) {
            apartment.setIssure_audit_status_name(DicTools.getCnValue("IssureAuditStatus", apartment.getOnlineHouseInfo().getAudit_status()));
            apartment.setReject_remark(apartment.getOnlineHouseInfo().getReject_remark());
        }
        //获取拍照申请状态
        ApplyPhoto applyPhoto = applyPhotoMapper.selectByApartmentId(apartmentId);
        if (applyPhoto != null) {
            String photo_status_name = DicTools.getCnValue("ApplyPhotoStatus", applyPhoto.getStatus());
            if (StringUtil.isNullOrEmpty(photo_status_name)) {
                apartment.setPhoto_status_name("未申请拍照");
            } else {
                apartment.setPhoto_status_name(photo_status_name);
            }
            apartment.setPhoto_reject_remark(applyPhoto.getReject_remark());
        } else {
            apartment.setPhoto_status_name("未申请拍照");
        }
        ResultObjectMsg<Apartment> resultObjectMsg = new ResultObjectMsg<Apartment>("公寓详情不存在.");
        if (null != apartment) {
            apartment.setReform_way_cn(StringUtil.isNullOrEmpty(apartment.getReform_way()) ? "" : DicTools.getCnValue(DictConstants.ReformWay.getDictId(), apartment.getReform_way()));
            apartment.setApartment_kind_cn(StringUtil.isNullOrEmpty(apartment.getApartment_kind()) ? "" : DicTools.getCnValue(DictConstants.ApartmentKind.getDictId(), apartment.getApartment_kind()));
            apartment.setApartment_type_cn(StringUtil.isNullOrEmpty(apartment.getApartment_type()) ? "" : DicTools.getCnValue(DictConstants.ApartmentType.getDictId(), apartment.getApartment_type()));
            // 栋座单元
            if ("无".equals(apartment.getUnit())) {
                apartment.setBuilding_unit_suffix(apartment.getBuilding_name() + DicTools.getCnValue(DictConstants.Suffix.getDictId(), apartment.getSuffix()));
            } else {
                apartment.setBuilding_unit_suffix(apartment.getBuilding_name() + DicTools.getCnValue(DictConstants.Suffix.getDictId(), apartment.getSuffix()) + apartment.getUnit());
            }

            // 商圈
            apartment.setBusinessCircleList(apartment.getBusinessCircleList());
            if (null != apartment.getBusinessCircleList() && apartment.getBusinessCircleList().size() > 0) {
                List<String> arrList = new ArrayList<String>();
                for (BusinessCircle businessCircle : apartment.getBusinessCircleList()) {
                    arrList.add(businessCircle.getBusiness_circle_name());
                }
                apartment.setBusiness_circle_name(StringUtil.join(arrList.iterator(), ","));
            }
            // 托管公寓下的出租房源配置-出租房源图片
            if (DictConstants.ApartmentType.MANAGE.value().equals(apartment.getApartment_type())) {
                apartment.setHouseConfigurationList(apartment.getHouseConfigurationList());
                apartment.setHouseImgList(apartment.getHouseImgList());
            }
            // 品牌公寓下的房间配置
            if (DictConstants.ApartmentType.BRAND.value().equals(apartment.getApartment_type())) {
                // 公共区域
                apartment.setHouseRoomPublicConfigurationList(houseRoomConfigurationMapper.selectPublicByHouseId(apartment.getHouse_id()));
                // 卧室
                apartment.setHouseRoomConfigurationList(houseRoomConfigurationMapper.selectRoomByHouseId(apartment.getHouse_id()));
                // 户型图和室内图[公共区域]
                Map<String, Object> publicHouseRoomImgsMap = new HashMap<String, Object>();
                publicHouseRoomImgsMap.put("house_id", apartment.getHouse_id());
                publicHouseRoomImgsMap.put("house_contract_id", apartment.getHouse_contract_id());
                apartment.setHouseRoomImgList(houseRoomImgMapper.selectPublicByHouseIdContractId(publicHouseRoomImgsMap));
                Map<String, Object> publicHouseRoomMap = new HashMap<String, Object>();
                publicHouseRoomMap.put("house_id", apartment.getHouse_id());
                publicHouseRoomMap.put("public_flag", DictConstants.YesNo.Y.value());
                HouseRoom hr = houseRoomMapper.selectByEntireHouseIdAndPublicFlag(publicHouseRoomMap);
                if (null == hr) {
                    return new ResultObjectMsg<Apartment>("公共区域不存在.");
                }
                apartment.setRoom_id(hr.getRoom_id());
            }
            // 有效或未生效的委托合同
            // 有效或未生效的出租合同
            Map<String, Object> paramsMap = new HashMap<String, Object>();
            paramsMap.put("apartment_id", apartment.getApartment_id());
            paramsMap.put("house_id", apartment.getHouse_id());
            // 整租不需要room_id
            apartment.setApartmentHouseContractVoList(houseContractVoMapper.selectByHouseId(apartment.getHouse_id()));
            apartment.setApartmentContractVoList(apartmentContractVoMapper.selectByHouseInfo(paramsMap));
            /*租客性别*/
            if (null != apartment.getApartmentContractVoList() && apartment.getApartmentContractVoList().size() > 0) {
                for (ApartmentContractVo apartmentContractVo : apartment.getApartmentContractVoList()) {
                    apartmentContractVo.setGender_cn(StringUtil.isNullOrEmpty(apartmentContractVo.getGender()) ? "" : DicTools.getCnValue(DictConstants.Gender.getDictId(), apartmentContractVo.getGender()));
                }
            }

            resultObjectMsg = new ResultObjectMsg<Apartment>(apartment);

            resultObjectMsg.setPar("canwebuser", "Y");
            //官网维护人
            ResultObjectMsg<SysUser> rom = userService.getSysUserByUserId(apartment.getWeb_manager_uid());
            SysUser webUser = rom.getObj(); //this.selectRodomApartmentWebUser(apartmentId).getObj();
            if (webUser != null && StringUtil.notNullOrEmpty(webUser.getUser_id())) {
                resultObjectMsg.setPar("canwebuser", "N");
                apartment.setWeb_manager_did(webUser.getDep_id());
                apartment.setWeb_manager_uid(webUser.getUser_id());
            }
            
            //服务管家
            ResultObjectMsg<SysUser> service = userService.getSysUserByUserId(apartment.getService_uid());
            SysUser serviceUser = service.getObj();
            if (serviceUser != null && StringUtil.notNullOrEmpty(serviceUser.getUser_id())) {
            	apartment.setServiceusername(serviceUser.getUser_name());
            	apartment.setServiceName(serviceUser.getDep_name());
            }

            resultObjectMsg.setPar("DataSavePublic", sessionVo.isEnabled("apartmentEntireSavePublic", String.valueOf(apartment.getSign_did()), String.valueOf(apartment.getSign_uid())) == true ? "" : "disabled");
            resultObjectMsg.setPar("DataSaveHouse", sessionVo.isEnabled("apartmentEntireSaveHouse", String.valueOf(apartment.getSign_did()), String.valueOf(apartment.getSign_uid())) == true ? "" : "disabled");
            resultObjectMsg.setPar("DataSaveConfigeration", sessionVo.isEnabled("apartmentEntireSaveConfigeration", String.valueOf(apartment.getSign_did()), String.valueOf(apartment.getSign_uid())) == true ? "" : "disabled");
            resultObjectMsg.setPar("DataDeletePicture", sessionVo.isEnabled("apartmentEntireDeletePicture", String.valueOf(apartment.getSign_did()), String.valueOf(apartment.getSign_uid())) == true ? "" : "disabled");

            // 成本查看权限 2016-08-03
            resultObjectMsg.setPar("DataShowCost", sessionVo.isEnabled("apartmentEntireShowCost", String.valueOf(apartment.getSign_did()), String.valueOf(apartment.getSign_uid())) == true ? "" : "disabled");

            //公共部分权限没有上下级关系
            String publicFuncDataPermType = sessionVo.getUserFuncDataPermType("apartmentEntireSavePublic");
            if (DictConstants.PermType.PERSON.equals(publicFuncDataPermType)) {
                resultObjectMsg.setPar("DataSavePublic", sessionVo.getSysUser().getUser_id().equals(apartment.getSign_uid()) ? "" : "disabled");
            }
            //公共部分权限没有上下级关系
            String dpicFuncDataPermType = sessionVo.getUserFuncDataPermType("apartmentEntireDeletePicture");
            if (DictConstants.PermType.PERSON.equals(dpicFuncDataPermType)) {
                resultObjectMsg.setPar("DataDeletePicture", sessionVo.getSysUser().getUser_id().equals(apartment.getSign_uid()) ? "" : "disabled");
            }

        }

        return resultObjectMsg;
    }

    /**
     * 合租房源-详情
     *
     * @param apartmentId
     * @return
     * @throws Exception
     */
    public ResultObjectMsg<Apartment> selectShareApartmentDetail(String apartmentId, SessionVo sessionVo) throws Exception {
        Apartment apartment = apartmentMapper.selectShareHouseByApartmentId(apartmentId);
        if (apartment.getOnlineHouseInfo() != null) {
            apartment.setIssure_audit_status_name(DicTools.getCnValue("IssureAuditStatus", apartment.getOnlineHouseInfo().getAudit_status()));
            apartment.setReject_remark(apartment.getOnlineHouseInfo().getReject_remark());
        }
        //获取拍照申请状态
        ApplyPhoto applyPhoto = applyPhotoMapper.selectByApartmentId(apartmentId);
        if (applyPhoto != null) {
            String photo_status_name = DicTools.getCnValue("ApplyPhotoStatus", applyPhoto.getStatus());
            if (StringUtil.isNullOrEmpty(photo_status_name)) {
                apartment.setPhoto_status_name("未申请拍照");
            } else {
                apartment.setPhoto_status_name(photo_status_name);
            }
            apartment.setPhoto_reject_remark(applyPhoto.getReject_remark());
        } else {
            apartment.setPhoto_status_name("未申请拍照");
        }
        ResultObjectMsg<Apartment> resultObjectMsg = new ResultObjectMsg<Apartment>("公寓详情不存在.");
        if (null != apartment) {
            apartment.setReform_way_cn(StringUtil.isNullOrEmpty(apartment.getReform_way()) ? "" : DicTools.getCnValue(DictConstants.ReformWay.getDictId(), apartment.getReform_way()));
            apartment.setApartment_kind_cn(StringUtil.isNullOrEmpty(apartment.getApartment_kind()) ? "" : DicTools.getCnValue(DictConstants.ApartmentKind.getDictId(), apartment.getApartment_kind()));
            apartment.setApartment_type_cn(StringUtil.isNullOrEmpty(apartment.getApartment_type()) ? "" : DicTools.getCnValue(DictConstants.ApartmentType.getDictId(), apartment.getApartment_type()));
            // 栋座单元
            if ("无".equals(apartment.getUnit())) {
                apartment.setBuilding_unit_suffix(apartment.getBuilding_name() + DicTools.getCnValue(DictConstants.Suffix.getDictId(), apartment.getSuffix()));
            } else {
                apartment.setBuilding_unit_suffix(apartment.getBuilding_name() + DicTools.getCnValue(DictConstants.Suffix.getDictId(), apartment.getSuffix()) + apartment.getUnit());
            }

            // 商圈
            apartment.setBusinessCircleList(apartment.getBusinessCircleList());
            if (null != apartment.getBusinessCircleList() && apartment.getBusinessCircleList().size() > 0) {
                List<String> arrList = new ArrayList<String>();
                for (BusinessCircle businessCircle : apartment.getBusinessCircleList()) {
                    arrList.add(businessCircle.getBusiness_circle_name());
                }
                apartment.setBusiness_circle_name(StringUtil.join(arrList.iterator(), ","));
            }
            // 房间特色
            apartment.setHouseRoomFeatureList(apartment.getHouseRoomFeatureList());
            // 房间配置
            apartment.setHouseRoomConfigurationList(apartment.getHouseRoomConfigurationList());
            // 室内图
            apartment.setHouseRoomImgList(apartment.getHouseRoomImgList());
            // 有效或未生效的委托合同
            // 有效或未生效的出租合同
            Map<String, Object> paramsMap = new HashMap<String, Object>();
            paramsMap.put("apartment_id", apartment.getApartment_id());
            paramsMap.put("house_id", apartment.getHouse_id());
            paramsMap.put("room_id", apartment.getRoom_id());
            apartment.setApartmentHouseContractVoList(houseContractVoMapper.selectByHouseId(apartment.getHouse_id()));
            apartment.setApartmentContractVoList(apartmentContractVoMapper.selectByHouseInfo(paramsMap));
            /*租客性别*/
            if (null != apartment.getApartmentContractVoList() && apartment.getApartmentContractVoList().size() > 0) {
                for (ApartmentContractVo apartmentContractVo : apartment.getApartmentContractVoList()) {
                    apartmentContractVo.setGender_cn(StringUtil.isNullOrEmpty(apartmentContractVo.getGender()) ? "" : DicTools.getCnValue(DictConstants.Gender.getDictId(), apartmentContractVo.getGender()));
                }
            }

            //数据权限
            resultObjectMsg = new ResultObjectMsg<Apartment>(apartment);

           
            resultObjectMsg.setPar("canwebuser", "Y");
            
            //收房人
            SysUser signUser = userService.getSysUserByUserId(apartment.getSign_uid()).getObj();
            if (StringUtil.notNullOrEmpty(signUser.getUser_id())) {
            	apartment.setSignUserName(signUser.getUser_name());
            	apartment.setSignDeptName(signUser.getDep_name());
            }
            
            /* 查询详情不应该随机分配官网维护人   
             * update by ligaochao
             * update time 2016-10-21 17:30 
             * 
             * SysUser webUser = this.selectRodomApartmentWebUser(apartmentId).getObj();
             */
            //官网维护人
            SysUser webUser = userService.getSysUserByUserId(apartment.getWeb_manager_uid()).getObj();
            if (webUser != null && StringUtil.notNullOrEmpty(webUser.getUser_id())) {
                apartment.setWeb_manager_did(webUser.getDep_id());
                apartment.setWeb_manager_uid(webUser.getUser_id());
                resultObjectMsg.setPar("canwebuser", "N");
            }
			
            //服务管家
            ResultObjectMsg<SysUser> service = userService.getSysUserByUserId(apartment.getService_uid());
            SysUser serviceUser = service.getObj();
            if (serviceUser != null && StringUtil.notNullOrEmpty(serviceUser.getUser_id())) {
            	apartment.setServiceusername(serviceUser.getUser_name());
            	apartment.setServiceName(serviceUser.getDep_name());
            }

            resultObjectMsg.setPar("DataSavePublic", sessionVo.isEnabled("ApartmentSharePublic", String.valueOf(apartment.getSign_did()), String.valueOf(apartment.getSign_uid())) == true ? "" : "disabled");
            resultObjectMsg.setPar("DataSaveHouse", sessionVo.isEnabled("ApartmentShareHouse", String.valueOf(apartment.getSign_did()), String.valueOf(apartment.getSign_uid())) == true ? "" : "disabled");
            resultObjectMsg.setPar("DataDeletePicture", sessionVo.isEnabled("ApartmentShareDeletePicture", String.valueOf(apartment.getSign_did()), String.valueOf(apartment.getSign_uid())) == true ? "" : "disabled");
            resultObjectMsg.setPar("makePricing", sessionVo.isEnabled("makePricing", String.valueOf(apartment.getSign_did()), String.valueOf(apartment.getSign_uid())) == true ? "" : "disabled");
            resultObjectMsg.setPar("DataShowCost", sessionVo.isEnabled("ApartmentShareShowCost", String.valueOf(apartment.getSign_did()), String.valueOf(apartment.getSign_uid())) == true ? "" : "disabled");

            //数据权限修改公共部分--图片删除部分 没有上下级关联--权限为个人的时候
            String publicFucDataPermType = sessionVo.getUserFuncDataPermType("ApartmentSharePublic");
            if (DictConstants.PermType.PERSON.equals(publicFucDataPermType)) {
                resultObjectMsg.setPar("DataSavePublic", sessionVo.getSysUser().getUser_id().equals(apartment.getSign_uid()) ? "" : "disabled");
            }
            String dpicFucDataPermType = sessionVo.getUserFuncDataPermType("ApartmentShareDeletePicture");
            if (DictConstants.PermType.PERSON.equals(dpicFucDataPermType)) {
                resultObjectMsg.setPar("DataDeletePicture", sessionVo.getSysUser().getUser_id().equals(apartment.getSign_uid()) ? "" : "disabled");
            }

            Apartment apartmentUpdated = apartmentMapper.selectByPrimaryKey(apartment.getApartment_id());
            if(null != apartmentUpdated && !StringUtil.isNullOrEmpty(apartmentUpdated.getUpdate_time())) {
                apartment.setUpdate_time(apartmentUpdated.getUpdate_time());
            }
        }

        return resultObjectMsg;
    }

    /**
     * 整租房源信息-保存
     *
     * @param apartment
     * @param sessionVo
     */
    @Transactional
    public ResultMsg saveEntireHouse(Apartment apartment, SessionVo sessionVo) throws Exception {
        try {
            SysUser sysUser = sessionVo.getSysUser();
            // 保存房源信息：面积、户型(室、厅、厨、卫、阳台)、物业类型、物业用途、朝向、配套设施、图片
            if (null == apartment || null == apartment.getApartment_id()) {
                return ResultMsg.createErrorMsg("缺少整租公寓ID.");
            }
            if (null == sysUser || null == sysUser.getUser_id()) {
                return ResultMsg.createErrorMsg("缺少用户ID,请登录.");
            }
            // 验证
            String validateResult = validate(apartment);
            if (StringUtils.isNotBlank(validateResult)) {
                return ResultMsg.createErrorMsg(validateResult);
            }

            //非必填字段看房备注，备注，不填时写无
            if (apartment.getLook_remark() == null || apartment.getLook_remark() == "") {
                apartment.setLook_remark("无");
            }
            if (apartment.getRemark() == null || apartment.getRemark() == "") {
                apartment.setRemark("无");
            }

            // 整租房屋信息发生变化时生成一条系统跟进
            Apartment apartmentOld = apartmentMapper.selectEntireHouseByApartmentId(apartment.getApartment_id());
            if (null == apartmentOld) {
                return ResultMsg.createErrorMsg("当前公寓不存在.");
            }
            // 出租状态有其他=>已出租时，提示
            if (!StringUtil.isNullOrEmpty(apartment.getRent_status()) && !apartment.getRent_status().equals(apartmentOld.getRent_status())) {
                if (!DictConstants.RentStatus.RENTED.value().equals(apartmentOld.getRent_status()) && DictConstants.RentStatus.RENTED.value().equals(apartment.getRent_status())) {
                    return ResultMsg.createErrorMsg("出租状态无法手动修修改为已出租.");
                }
            }

            if (StringUtil.isNullOrEmpty(apartment.getUpdate_time())) {
                return ResultMsg.createErrorMsg("缺少更新时间.");
            }

            if (!apartment.getUpdate_time().equals(apartmentOld.getUpdate_time())) {
                return ResultMsg.createErrorMsg("用户数据已经被其他用户更新，请返回重新编辑.");
            }
            //数据权限，存在权限修改，不存在保持以前的数据
            //公共信息,没有就取原来的公共信息放到传入的apartment中
            if (!sessionVo.isEnabled("apartmentEntireSavePublic", String.valueOf(apartmentOld.getSign_did()), String.valueOf(apartmentOld.getSign_uid()))) {
                apartment.setRent_status(apartmentOld.getRent_status());
                apartment.setActivated_type(apartmentOld.getActivated_type());
                apartment.setLook_type(apartmentOld.getLook_type());
                apartment.setLook_date(apartmentOld.getLook_date());
                apartment.setCheck_in_date(apartmentOld.getCheck_in_date());
                apartment.setLook_remark(apartmentOld.getLook_remark());
                apartment.setRemark(apartmentOld.getRemark());
            }
            //修改房源信息--未授权时：归属人及其上级岗位可修改
            if (!sessionVo.isEnabled("apartmentEntireSaveHouse", String.valueOf(apartmentOld.getSign_did()), String.valueOf(apartmentOld.getSign_uid()))) {
                apartment.setProperty_use(apartmentOld.getProperty_use());
                apartment.setProperty_type(apartmentOld.getProperty_type());
                apartment.setRooms(apartmentOld.getRooms());
                apartment.setKitchens(apartmentOld.getKitchens());
                apartment.setBalconys(apartmentOld.getBalconys());
                apartment.setBathrooms(apartmentOld.getBathrooms());
                apartment.setBuild_area(apartmentOld.getBuild_area());
                apartment.setOrientation(apartmentOld.getOrientation());
                apartment.setFitment_type(apartmentOld.getFitment_type());
                apartment.setRent_price(apartmentOld.getRent_price());
                apartment.setFitment_cost(apartmentOld.getFitment_cost());
                apartment.setEntrust_cost(apartmentOld.getEntrust_cost());
                apartment.setCapital_cost(apartmentOld.getCapital_cost());
                apartment.setFire_status(apartmentOld.getFire_status());


            }

            // 保存楼盘房屋信息
            House house = new House();
            house.setHouse_id(apartmentOld.getHouse_id());

            house.setBuild_area(apartment.getBuild_area());
            house.setRooms(apartment.getRooms());
            house.setLivings(apartment.getLivings());
            house.setKitchens(apartment.getKitchens());
            house.setBathrooms(apartment.getBathrooms());
            house.setBalconys(apartment.getBalconys());
            house.setProperty_type(apartment.getProperty_type());
            house.setProperty_use(apartment.getProperty_use());
            house.setOrientation(apartment.getOrientation());
            // 装修情况
            house.setFitment_type(apartment.getFitment_type());
            house.setUpdate_uid(sysUser.getUser_id());
            house.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
            houseMapper.updateByPrimaryKeySelective(house);

            HouseRent houseRent = new HouseRent();
            houseRent.setUpdate_uid(sysUser.getUser_id());
            houseRent.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
            houseRentMapper.updateByPrimaryKeySelective(houseRent);
            // 出租房源跟进
            House houseOld = houseMapper.selectByPrimaryKey(house.getHouse_id());
            houseServiceBiz.saveFollow(house, houseServiceBiz.followContentByEditHouse(house, houseOld, null));

            // 保存公寓信息:状态、激活类型、激活日期、激活人、可看房日期、看房方式
            apartment.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
            apartment.setUpdate_uid(sysUser.getUser_id());
            /**
             * 下面注释代码作废
             */
//            if (apartment.getDealtype() == null) {
//                apartment.setDealtype(" ");
//            }
//            if (apartment.getCategory() == null) {
//                apartment.setCategory(" ");
//            }
            apartmentMapper.updateByPrimaryKeySelective(apartment);
            this.houseStatusMapper.updateApartmentCategoryById(apartment.getApartment_id(), sysUser.getUser_id(), apartment.getCategory());
            this.houseStatusMapper.updateApartmentDealtypeById(apartment.getApartment_id(), sysUser.getUser_id(), apartment.getDealtype());

            saveFollow(apartment, followContentByEditApartment(apartment, apartmentOld));

            return ResultMsg.createOkMsg();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 整租房源图片保存
     *
     * @param apartment
     * @param sessionVo
     */
    @Transactional
    public ResultMsg saveHouseImage(Apartment apartment, SessionVo sessionVo) throws Exception {
    	try {
    		SysUser sysUser = sessionVo.getSysUser();
    		// 保存房源信息：面积、户型(室、厅、厨、卫、阳台)、物业类型、物业用途、朝向、配套设施、图片
    		if (null == apartment || null == apartment.getApartment_id()) {
    			return ResultMsg.createErrorMsg("缺少整租公寓ID.");
    		}
    		if (null == sysUser || null == sysUser.getUser_id()) {
    			return ResultMsg.createErrorMsg("缺少用户ID,请登录.");
    		}

    		Apartment apartmentOld = apartmentMapper.selectEntireHouseByApartmentId(apartment.getApartment_id());
    		if (null == apartmentOld) {
    			return ResultMsg.createErrorMsg("当前公寓不存在.");
    		}
    		
    		if (StringUtil.isNullOrEmpty(apartment.getUpdate_time())) {
    			return ResultMsg.createErrorMsg("缺少更新时间.");
    		}
    		
    		if (!apartment.getUpdate_time().equals(apartmentOld.getUpdate_time())) {
    			return ResultMsg.createErrorMsg("用户数据已经被其他用户更新，请返回重新编辑.");
    		}
    		
    		//数据权限，存在权限修改，不存在保持以前的数据
    		//公共信息,没有就取原来的公共信息放到传入的apartment中
    		if (!sessionVo.isEnabled("apartmentEntireSavePublic", String.valueOf(apartmentOld.getSign_did()), String.valueOf(apartmentOld.getSign_uid()))) {
    			apartment.setRent_status(apartmentOld.getRent_status());
    			apartment.setActivated_type(apartmentOld.getActivated_type());
    			apartment.setLook_type(apartmentOld.getLook_type());
    			apartment.setLook_date(apartmentOld.getLook_date());
    			apartment.setCheck_in_date(apartmentOld.getCheck_in_date());
    			apartment.setLook_remark(apartmentOld.getLook_remark());
    			apartment.setRemark(apartmentOld.getRemark());
    		}
    		//修改房源信息--未授权时：归属人及其上级岗位可修改
    		if (!sessionVo.isEnabled("apartmentEntireSaveHouse", String.valueOf(apartmentOld.getSign_did()), String.valueOf(apartmentOld.getSign_uid()))) {
    			apartment.setProperty_use(apartmentOld.getProperty_use());
    			apartment.setProperty_type(apartmentOld.getProperty_type());
    			apartment.setRooms(apartmentOld.getRooms());
    			apartment.setKitchens(apartmentOld.getKitchens());
    			apartment.setBalconys(apartmentOld.getBalconys());
    			apartment.setBathrooms(apartmentOld.getBathrooms());
    			apartment.setBuild_area(apartmentOld.getBuild_area());
    			apartment.setOrientation(apartmentOld.getOrientation());
    			apartment.setFitment_type(apartmentOld.getFitment_type());
    			apartment.setRent_price(apartmentOld.getRent_price());
    			apartment.setFitment_cost(apartmentOld.getFitment_cost());
    			apartment.setEntrust_cost(apartmentOld.getEntrust_cost());
    			apartment.setCapital_cost(apartmentOld.getCapital_cost());
    			apartment.setFire_status(apartmentOld.getFire_status());
    		}
    		
    		// 保存楼盘房屋信息
    		House house = new House();
    		house.setHouse_id(apartmentOld.getHouse_id());
    		
    		house.setBuild_area(apartment.getBuild_area());
    		house.setRooms(apartment.getRooms());
    		house.setLivings(apartment.getLivings());
    		house.setKitchens(apartment.getKitchens());
    		house.setBathrooms(apartment.getBathrooms());
    		house.setBalconys(apartment.getBalconys());
    		house.setProperty_type(apartment.getProperty_type());
    		house.setProperty_use(apartment.getProperty_use());
    		house.setOrientation(apartment.getOrientation());
    		// 装修情况
    		house.setFitment_type(apartment.getFitment_type());
    		house.setUpdate_uid(sysUser.getUser_id());
    		house.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
    		
    		HouseRent houseRent = new HouseRent();
    		houseRent.setUpdate_uid(sysUser.getUser_id());
    		houseRent.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
    		// 出租房源跟进
    		House houseOld = houseMapper.selectByPrimaryKey(house.getHouse_id());

            // 保存配套设施，先删后增--托管公寓  图片，先删后增--托管公寓
            if (DictConstants.ApartmentType.MANAGE.value().equals(apartmentOld.getApartment_type())) {
                // 楼盘栋座
                house.setResidential_id(houseOld.getResidential_id());
                house.setBuilding_id(houseOld.getBuilding_id());
                // 图片不统一保存[20160704]
//                house.setHouseImgList(apartment.getHouseImgList());
//                houseImgMapper.deleteByHouseId(house.getHouse_id());
//                saveHouseImg(house);

                //更新托管公寓图片序号
                try {
                    updateHouseImgSort(apartment.getHouseImgList());
                } catch (Exception e) {
                	return ResultMsg.createErrorMsg("图片保存失败.");
                }
            }


            // --品牌公寓[房东配置和室内图]
            if (DictConstants.ApartmentType.BRAND.value().equals(apartmentOld.getApartment_type())) {
                // [整租放到公共区域里面]公共区域图片－先删后增[不统一保存20160704]
//                Map<String, Object> roomImpParamsMap = new HashMap<String, Object>();
//                roomImpParamsMap.put("house_id", house.getHouse_id());
//                roomImpParamsMap.put("room_id", housePublicRoom.getRoom_id());
//                roomImpParamsMap.put("img_type", DictConstants.ImgType.INDOOR_IMGS.value());
//                houseRoomImgMapper.deleteByHouseIdAndRoomIdAndImgType(roomImpParamsMap);
//                List<HouseRoomImg> houseRoomImgList = apartment.getHouseRoomImgList();
//                if (null != houseRoomImgList && houseRoomImgList.size() > 0) {
//                    for (HouseRoomImg houseRoomImg : houseRoomImgList) {
//                        if (null == houseRoomImg.getImg_id()) {
//                            throw new RuntimeException("装修房屋户型图缺少图片ID.");
//                        }
//                        houseRoomImg.setRoom_img_id(UuidUtil.getUUID());
//                        houseRoomImg.setResidential_id(housePublicRoom.getResidential_id());
//                        houseRoomImg.setBuilding_id(housePublicRoom.getBuilding_id());
//                        houseRoomImg.setHouse_id(housePublicRoom.getHouse_id());
//                        houseRoomImg.setRoom_id(housePublicRoom.getRoom_id());
//                        houseRoomImg.setDeleted(0);
//                        houseRoomImg.setCreate_time(DateUtil.getCurrentDateTimeAsString());
//                        houseRoomImg.setCreate_uid(sysUser.getUser_id());
//                    }
//                    houseRoomImgMapper.saveHouseRoomImg(houseRoomImgList);
//                }

                //更新托管公寓图片序号
                try {
                    updateHouseRoomImgSort(apartment.getHouseRoomImgList());
                } catch (Exception e) {
                	return ResultMsg.createErrorMsg("图片保存失败.");
                }
            }
    		return ResultMsg.createOkMsg();
    	} catch (Exception e) {
    		throw new RuntimeException(e);
    	}
    }

    @Transactional
    private void insertHouseRoom(SysUser sysUser, Apartment apartmentOld, HouseRoom houseRoom, FitmentHouse fitmentHouse) throws Exception {
        houseRoom.setRoom_id(UuidUtil.getUUID());
        houseRoom.setHouse_contract_id(apartmentOld.getHouse_contract_id());
        houseRoom.setHouse_id(apartmentOld.getHouse_id());
        houseRoom.setResidential_id(apartmentOld.getResidential_id());
        houseRoom.setBuilding_id(apartmentOld.getBuilding_id());
        houseRoom.setCity_code(apartmentOld.getCity_code());
        houseRoom.setArea_code(apartmentOld.getArea_code());
        // 生成房间编号
        SysDistrict city = districtService.getByCode(apartmentOld.getCity_code());
        if (null == city || StringUtil.isNullOrEmpty(city.getAbridge())) {
            throw new RuntimeException((null != city ? (city.getName() + "缺少汉语拼音.") : "市区不存在"));
        }
        SysDistrict area = districtService.getByCode(apartmentOld.getArea_code());
        if (null == area || StringUtil.isNullOrEmpty(area.getAbridge())) {
            throw new RuntimeException((null != area ? (area.getName() + "缺少汉语拼音.") : "城区不存在"));
        }
        String room_code = redisService.getCode(CodeTypeConstants.HOUSE_ROOM_CODE);
        if (StringUtil.isNullOrEmpty(room_code)) {
            throw new RuntimeException("redisService生成房间编号失败.");
        }
        houseRoom.setRoom_code(BusinessCodeUtil.generateCode(CodeTypeConstants.HOUSE_ROOM_CODE + city.getAbridge(), area.getAbridge(), room_code));
        houseRoom.setIs_active(DictConstants.YesNo.Y.value());
        houseRoom.setDeleted(0);
        houseRoom.setCreate_time(DateUtil.getCurrentDateTimeAsString());
        houseRoom.setCreate_uid(sysUser.getUser_id());
        houseRoom.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
        houseRoom.setUpdate_uid(sysUser.getUser_id());
        houseRoomMapper.insertHouseRoom(houseRoom);
        FitmentRoom fitmentRoom = new FitmentRoom();
        fitmentRoom.setFitment_room_id(UuidUtil.getUUID());
        if (null != fitmentHouse) {
            fitmentRoom.setFitment_id(fitmentHouse.getFitment_id());
        }
        fitmentRoom.setRoom_id(houseRoom.getRoom_id());
        fitmentRoom.setCreate_time(DateUtil.getCurrentDateTimeAsString());
        fitmentRoom.setCreate_uid(sysUser.getUser_id());
        fitmentRoom.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
        fitmentRoom.setUpdate_uid(sysUser.getUser_id());
        fitmentRoomMapper.insert(fitmentRoom);
    }

    /**
     * 验证整租房源的详情数据
     *
     * @param apartment
     * @return String
     */

    private String validate(Apartment apartment) throws Exception {
        if (StringUtil.isNullOrEmpty(apartment.getProperty_use())) {
            return "请选择物业用途.";
        }
        if (StringUtil.isNullOrEmpty(apartment.getProperty_type())) {
            return "请选择物业类型.";
        }
        if (null == apartment.getRooms() || null == apartment.getLivings() || null == apartment.getKitchens() || null == apartment.getBathrooms() || null == apartment.getBalconys()) {
            return "请完善户型.";
        }
        if (null == apartment.getBuild_area() || apartment.getBuild_area() <= 0.0 || String.valueOf(apartment.getBuild_area()).length() > 8) {
            return "面积:请输入8位以内数字.";
        }
        if (StringUtil.isNullOrEmpty(apartment.getOrientation())) {
            return "请选择朝向.";
        }
        if (null == apartment.getRent_price() || apartment.getRent_price() <= 0.0 || String.valueOf(apartment.getRent_price()).length() > 8) {
            return "月租金:请输入8位以内数字.";
        }
//        if (null == apartment.getFitment_cost() || apartment.getFitment_cost() < 0.0 || String.valueOf(apartment.getFitment_cost()).length() > 8) {
//            return "装修成本:请输入8位以内数字.";
//        }
//        if (null == apartment.getCapital_cost() || apartment.getCapital_cost() < 0.0 || String.valueOf(apartment.getCapital_cost()).length() > 8) {
//            return "资金成本:请输入8位以内数字.";
//        }
//        if (null == apartment.getEntrust_cost() || apartment.getEntrust_cost() <= 0.0 || String.valueOf(apartment.getEntrust_cost()).length() > 8) {
//            return "租金成本:请输入8位以内数字.";
//        }
//        if (null == apartment.getApartment_cost() || apartment.getApartment_cost() <= 0.0 || String.valueOf(apartment.getApartment_cost()).length() > 8) {
//            return "总成本:请输入8位以内数字.";
//        }
        if (StringUtil.isNullOrEmpty(apartment.getFitment_type())) {
            return "请选择装修情况.";
        }
        /*if (null == apartment.getService_did()) {
            return "请选择服务部门.";
        }
        if (null == apartment.getService_uid()) {
            return "请选择服务管家.";
        }*/
        if (null == apartment.getRent_status()) {
            return "请选择出租状态.";
        }
        /*if (null == apartment.getActivated_type()) {
            return "请选择激活类型.";
        }*/
        if (null == apartment.getFire_status()) {
            return "请选择着火状态.";
        }
        if (null == apartment.getLook_type()) {
            return "请选择看房方式.";
        }
        return null;
    }

    // 系统跟进的内组装
    public String followContentByEditApartment(Apartment apartment, Apartment apartmentOld) throws Exception {
        StringBuffer follow_content = new StringBuffer();

        if (apartmentOld.getRent_type().equals("ENTIRE")) {
            //房屋朝向
            followContentAppend(apartment.getProperty_use(), apartmentOld.getProperty_use(), "物业用途", follow_content, DictConstants.HousePropertyUse.getDictId());
            followContentAppend(apartment.getProperty_type(), apartmentOld.getProperty_type(), "物业类型", follow_content, DictConstants.HouseRentPropertyType.getDictId());
            followContentAppend(apartment.getOrientation(), apartmentOld.getOrientation(), "朝向", follow_content, DictConstants.Orientation.getDictId());
            followContentAppend(apartment.getFitment_type(), apartmentOld.getFitment_type(), "装修情况", follow_content, DictConstants.FitmentType.getDictId());

            //房屋面积
            followContentAppend(apartment.getBuild_area(), apartmentOld.getBuild_area(), "面积", follow_content);
            followContentAppend(apartment.getRooms(), apartmentOld.getRooms(), "户型（室）", follow_content);
            followContentAppend(apartment.getLivings(), apartmentOld.getLivings(), "户型（厅）", follow_content);
            followContentAppend(apartment.getKitchens(), apartmentOld.getKitchens(), "户型（厨）", follow_content);
            followContentAppend(apartment.getBathrooms(), apartmentOld.getBathrooms(), "户型（卫）", follow_content);
            followContentAppend(apartment.getBalconys(), apartmentOld.getBalconys(), "户型（阳台）", follow_content);

        }

        if (apartmentOld.getRent_type().equals("SHARE")) {
            //房间朝向
            followContentAppend(apartment.getRoom_orientation(), apartmentOld.getRoom_orientation(), "朝向", follow_content, DictConstants.Orientation.getDictId());
            //房间面积
            followContentAppend(apartment.getRoom_area(), apartmentOld.getRoom_area(), "面积", follow_content);

        }

        followContentAppend(apartment.getIs_active(), apartmentOld.getIs_active(), "启用状态", follow_content, DictConstants.IsActive.getDictId());
        followContentAppend(apartment.getActivated_type(), apartmentOld.getActivated_type(), "激活类型", follow_content, DictConstants.ActivatedType.getDictId());
        followContentAppend(apartment.getRent_status(), apartmentOld.getRent_status(), "出租状态", follow_content, DictConstants.RentStatus.getDictId());
        followContentAppend(apartment.getFire_status(), apartmentOld.getFire_status(), "着火状态", follow_content, DictConstants.FireStatus.getDictId());
        followContentAppend(apartment.getLook_type(), apartmentOld.getLook_type(), "看房方式", follow_content, DictConstants.LookType.getDictId());

        followContentAppend(apartment.getRent_price(), apartmentOld.getRent_price(), "月租金", follow_content);
        followContentAppend(apartment.getFitment_cost(), apartmentOld.getFitment_cost(), "装修成本", follow_content);
        followContentAppend(apartment.getCapital_cost(), apartmentOld.getCapital_cost(), "资金成本", follow_content);
        followContentAppend(apartment.getEntrust_cost(), apartmentOld.getEntrust_cost(), "租金成本", follow_content);
        followContentAppend(apartment.getApartment_cost(), apartmentOld.getApartment_cost(), "总成本", follow_content);

        if (null != apartment.getService_did() && null != apartmentOld.getService_did() && !apartment.getService_did().equals(apartmentOld.getService_did())) {
            follow_content.append("【服务部门:" + departService.getDepartNameById(apartmentOld.getService_did()) + "=>" + departService.getDepartNameById(apartment.getService_did()) + "】");
        }

        if (null != apartment.getService_uid() && null != apartmentOld.getService_uid() && !apartment.getService_uid().equals(apartmentOld.getService_uid())) {
            follow_content.append("【服务管家:" + userService.getUserNameById(apartmentOld.getService_uid()) + "=>" + userService.getUserNameById(apartment.getService_uid()) + "】");
        }

        if (!StringUtil.isNullOrEmpty(apartment.getLook_remark()) && !apartment.getLook_remark().equals(apartmentOld.getLook_remark())) {
            follow_content.append("【看房备注:" + getOutOfunllValue(apartmentOld.getLook_remark()) + "=>" + apartment.getLook_remark() + "】");
        } else if (!StringUtil.isNullOrEmpty(apartmentOld.getLook_remark()) && !apartmentOld.getLook_remark().equals(apartment.getLook_remark())) {
            follow_content.append("【看房备注:" + apartmentOld.getLook_remark() + "=>" + getOutOfunllValue(apartment.getLook_remark()) + "】");
        }

        if (!StringUtil.isNullOrEmpty(apartment.getRemark()) && !apartment.getRemark().equals(apartmentOld.getRemark())) {
            follow_content.append("【房源备注:" + getOutOfunllValue(apartmentOld.getRemark()) + "=>" + apartment.getRemark() + "】");
        } else if (!StringUtil.isNullOrEmpty(apartmentOld.getRemark()) && !apartmentOld.getRemark().equals(apartment.getRemark())) {
            follow_content.append("【房源备注:" + apartmentOld.getRemark() + "=>" + getOutOfunllValue(apartment.getRemark()) + "】");
        }

        if (!StringUtil.isNullOrEmpty(apartment.getLook_date()) && !apartment.getLook_date().equals(apartmentOld.getLook_date())) {
            follow_content.append("【可看房日期:" + getOutOfunllValue(apartmentOld.getLook_date()) + "=>" + apartment.getLook_date() + "】");
        } else if (!StringUtil.isNullOrEmpty(apartmentOld.getLook_date()) && !apartmentOld.getLook_date().equals(apartment.getLook_date())) {
            follow_content.append("【可看房日期:" + apartmentOld.getLook_date() + "=>" + getOutOfunllValue(apartment.getLook_date()) + "】");
        }

        if (!StringUtil.isNullOrEmpty(apartment.getCheck_in_date()) && !apartment.getCheck_in_date().equals(apartmentOld.getCheck_in_date())) {
            follow_content.append("【可入住日期:" + getOutOfunllValue(apartmentOld.getCheck_in_date()) + "=>" + apartment.getCheck_in_date() + "】");
        } else if (!StringUtil.isNullOrEmpty(apartmentOld.getCheck_in_date()) && !apartmentOld.getCheck_in_date().equals(apartment.getCheck_in_date())) {
            follow_content.append("【可入住日期:" + apartmentOld.getCheck_in_date() + "=>" + getOutOfunllValue(apartment.getCheck_in_date()) + "】");
        }

        return follow_content.toString();
    }

    private String getOutOfunllValue(String value) {
        return value == null || value == "" ? "无" : value;
    }

    private Double getOutofunllValue(Double value) {

        return value == null ? 0 : value;
    }

    private Integer getOutofunllValue(Integer value) {

        return value == null ? 0 : value;
    }

    private StringBuffer followContentAppend(Double des, Double src, String name, StringBuffer follow_content) {
        if (getOutofunllValue(des).doubleValue() != getOutofunllValue(src).doubleValue()) {
            follow_content.append("【" + name + ":" + getOutofunllValue(src).doubleValue() + "=>" + getOutofunllValue(des).doubleValue() + " 】");
        }
        return follow_content;
    }

    private StringBuffer followContentAppend(Integer des, Integer src, String name, StringBuffer follow_content) {
        if (getOutofunllValue(des).intValue() != getOutofunllValue(src).intValue()) {
            follow_content.append("【" + name + ":" + getOutofunllValue(src).intValue() + "=>" + getOutofunllValue(des).intValue() + "】 ");
        }
        return follow_content;
    }

    private StringBuffer followContentAppend(String des, String src, String name, StringBuffer follow_content, String dicId) throws Exception {
        if (!StringUtil.isNullOrEmpty(des) && !des.equals(src)) {
            follow_content.append("【" + name + ":" + getCnValue(dicId, src) + "=>" + getCnValue(dicId, des) + " 】");
        } else if (!StringUtil.isNullOrEmpty(src) && !src.equals(des)) {
            follow_content.append("【" + name + ":" + getCnValue(dicId, src) + "=>" + getCnValue(dicId, des) + "】 ");
        }
        return follow_content;
    }

    private String getCnValue(String dicType, String Key) throws Exception {
        if (StringUtil.isNullOrEmpty(dicType) || StringUtil.isNullOrEmpty(Key)) {
            return "无";
        }
        return DicTools.getCnValue(dicType, Key);
    }

    /**
     * 添加一条系统跟进
     *
     * @param apartment
     * @param follow_content
     */
    @Transactional
    public void saveFollow(Apartment apartment, String follow_content) throws Exception {
        try {
            if (!StringUtil.isNullOrEmpty(follow_content)) {
                Follow follow = new Follow();
                // 主键
                follow.setFollow_id(UuidUtil.getUUID());
                follow.setObject_type(DictConstants.FollowObjectType.APARTMENT.value());
                follow.setObject_id(apartment.getApartment_id());
                follow.setFollow_type(DictConstants.HouseFollowType.SYSTEMEDIT.value());
                follow.setFollow_content(follow_content);
                follow.setFollow_open(DictConstants.YesNo.Y.value());
                follow.setFollow_date(DateUtil.getCurrentDateTimeAsString());
                follow.setDeleted(0);
                follow.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                follow.setCreate_uid(apartment.getUpdate_uid());
                follow.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                follow.setUpdate_uid(apartment.getUpdate_uid());
                followMapper.insert(follow);
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 保存房屋配套设备信息
     *
     * @param house
     */
    @Transactional
    private void saveHouseConfiguration(House house) throws Exception {
        List<HouseConfiguration> houseConfigurationList = house.getHouseConfigurationList();
        if (null != houseConfigurationList && houseConfigurationList.size() > 0) {
            List<HouseConfiguration> listSave = new ArrayList<HouseConfiguration>();
            for (HouseConfiguration houseConfiguration : houseConfigurationList) {
                HouseConfiguration configuration = new HouseConfiguration();
                configuration.setConfiguration_id(UuidUtil.getUUID());
                // residential_id
                configuration.setResidential_id(house.getResidential_id());
                // building_id
                configuration.setBuilding_id(house.getBuilding_id());
                // house_id
                configuration.setHouse_id(house.getHouse_id());
                configuration.setConfiguration_code(houseConfiguration.getConfiguration_code());
                // create_id
                configuration.setCreate_uid(house.getUpdate_uid());
                listSave.add(configuration);
            }
            houseConfigurationMapper.saveHouseConfiguration(listSave);
        }
    }

    /**
     * 保存房屋图片
     *
     * @param house
     * @return
     * @throws Exception
     */
    @Transactional
    private ResultMsg saveHouseImg(House house) throws Exception {
        houseImgMapper.deleteByHouseId(house.getHouse_id());
        List<HouseImg> houseImgList = house.getHouseImgList();
        if (null != houseImgList && houseImgList.size() > 0) {
            List<HouseImg> listSave = new ArrayList<HouseImg>();
            for (HouseImg houseImg : houseImgList) {
                HouseImg img = new HouseImg();
                img.setHouse_img_id(UuidUtil.getUUID());
                // residential_id
                img.setResidential_id(house.getResidential_id());
                // building_id
                img.setBuilding_id(house.getBuilding_id());
                // house_id
                img.setHouse_id(house.getHouse_id());
                img.setImg_id(houseImg.getImg_id());
                img.setImg_name(houseImg.getImg_name());
                img.setImg_type(houseImg.getImg_type());
                img.setAudit_status(DictConstants.AuditStatus.NO_AUDIT.value());
                img.setAudit_time(houseImg.getAudit_time());
                img.setAudit_uid(houseImg.getAudit_uid());
                img.setDeleted(0);
                // create_uid
                img.setCreate_uid(house.getUpdate_uid());
                img.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                listSave.add(img);
            }
            houseImgMapper.saveHouseImg(listSave);
        }
        return ResultMsg.createOkMsg();
    }

    /**
     * 查询房源的配套设施
     *
     * @param house_id
     * @return
     */
    public ResultObjectMsg<List<HouseConfiguration>> selectConfigurationByHouse(String house_id) throws Exception {
        List<HouseConfiguration> houseConfigurations = houseConfigurationMapper.selectByHouseId(house_id);
        return new ResultObjectMsg<List<HouseConfiguration>>(houseConfigurations);
    }

    /**
     * 删除自营公寓 有委托合同、出租合同、财务费用不能删除
     *
     * @param sysUser
     * @param pageData
     * @return ResultMsg
     */
    @Transactional
    public ResultMsg deleteApartment(SysUser sysUser, Map<String, Object> pageData) throws Exception {
        try {
            if (null == sysUser || null == sysUser.getUser_id()) {
                return ResultMsg.createErrorMsg("缺少用户ID，请登录.");
            }
            if (StringUtil.isNullOrEmpty((String) pageData.get("rent_type"))) {
                return ResultMsg.createErrorMsg("缺少出租类型.");
            }
            if (null == pageData.get("house_id")) {
                return ResultMsg.createErrorMsg("缺少出租房源ID.");
            }
            if (null == pageData.get("apartment_id")) {
                return ResultMsg.createErrorMsg("缺少公寓ID.");
            }
            if (DictConstants.RentType.SHARE.value().equals((String) pageData.get("rent_type")) && null == pageData.get("apartment_id")) {
                return ResultMsg.createErrorMsg("缺少出租房间ID.");
            }

            String apartment_id = (String) pageData.get("apartment_id");
            Integer countNum = apartmentMapper.countApartmentContract(apartment_id);
            if (countNum > 0) {
                return ResultMsg.createErrorMsg("房源下有出租合同，不能删除.");
            }

            // 财务费用
            Integer isHasReceipts = apartmentMapper.searchApartmentContractReceipts(apartment_id);
            Integer isHasReceivable = apartmentMapper.searchApartmentContractReceivable(apartment_id);
            if (isHasReceipts != null || isHasReceivable != null) {
                return ResultMsg.createErrorMsg("房源下有财务费用数据，不能删除.");
            }

            pageData.put("update_time", DateUtil.getCurrentDateTimeAsString());
            pageData.put("update_uid", sysUser.getUser_id());

            // 删除house_room、house_room_img
            String house_id = (String) pageData.get("house_id");
            // 整租
            if (DictConstants.RentType.ENTIRE.value().equals((String) pageData.get("rent_type"))) {
                Apartment apartmentOld = apartmentMapper.selectByPrimaryKey(apartment_id);
                Map<String, Object> houseRoomImgParamsMap = new HashMap<String, Object>();
                houseRoomImgParamsMap.put("house_id", house_id);
                houseRoomImgParamsMap.put("contract_id", apartmentOld.getHouse_contract_id());
                houseRoomImgMapper.deleteByHouseIdContractId(houseRoomImgParamsMap);
                pageData.put("contract_id", apartmentOld.getHouse_contract_id());
                houseRoomMapper.deleteByHouseIdContractId(pageData);
            }
            // 合租
            if (DictConstants.RentType.SHARE.value().equals((String) pageData.get("rent_type"))) {
                houseRoomImgMapper.deleteByHouseIdAndRoomId(pageData);
                houseRoomMapper.deleteByHouseIdAndRoomId(pageData);
            }

            Apartment apartment = new Apartment();
            apartment.setApartment_id(apartment_id);
            apartment.setDeleted(1);
            apartment.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
            apartment.setUpdate_uid(sysUser.getUser_id());
            apartmentMapper.updateByPrimaryKeySelective(apartment);
            return ResultMsg.createOkMsg();
        } catch (NumberFormatException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 保存合租公寓-只有编辑无新增
     *
     * @param apartment
     * @param sessionVo
     * @return ResultMsg
     */
    @Transactional
    public ResultMsg saveShareHouse(Apartment apartment, SessionVo sessionVo) throws Exception {
        SysUser sysUser = sessionVo.getSysUser();
        try {
            // 判断必填项
            if (null == apartment || null == apartment.getApartment_id()) {
                return ResultMsg.createErrorMsg("缺少合租公寓ID.");
            }
            if (null == sysUser || null == sysUser.getUser_id()) {
                return ResultMsg.createErrorMsg("缺少用户ID,请登录.");
            }
            if (null == apartment.getRoom_area() || apartment.getRoom_area() <= 0.0 || String.valueOf(apartment.getRoom_area()).length() > 8) {
                return ResultMsg.createErrorMsg("面积:请输入8位以内数字.");
            }
            if (StringUtil.isNullOrEmpty(apartment.getRoom_orientation())) {
                return ResultMsg.createErrorMsg("请选择朝向.");
            }
            if (null == apartment.getRent_price() || apartment.getRent_price() <= 0.0 || String.valueOf(apartment.getRent_price()).length() > 8) {
                return ResultMsg.createErrorMsg("月租金:请输入8位以内数字.");
            }
//            if (null == apartment.getFitment_cost() || apartment.getFitment_cost() < 0.0 || String.valueOf(apartment.getFitment_cost()).length() > 8) {
//                return ResultMsg.createErrorMsg("装修成本:请输入8位以内数字.");
//            }
//            if (null == apartment.getCapital_cost() || apartment.getCapital_cost() < 0.0 || String.valueOf(apartment.getCapital_cost()).length() > 8) {
//                return ResultMsg.createErrorMsg("资金成本:请输入8位以内数字.");
//            }
//            if (null == apartment.getEntrust_cost() || apartment.getEntrust_cost() < 0.0 || String.valueOf(apartment.getEntrust_cost()).length() > 8) {
//                return ResultMsg.createErrorMsg("租金成本:请输入8位以内数字.");
//            }
//            if (null == apartment.getApartment_cost() || apartment.getApartment_cost() <= 0.0 || String.valueOf(apartment.getApartment_cost()).length() > 8) {
//                return ResultMsg.createErrorMsg("总成本:请输入8位以内数字.");
//            }
            /*if (null == apartment.getService_did()) {
                return ResultMsg.createErrorMsg("请选择服务部门.");
            }
            if (null == apartment.getService_uid()) {
                return ResultMsg.createErrorMsg("请选择服务管家.");
            }*/
            if (StringUtil.isNullOrEmpty(apartment.getRent_status())) {
                return ResultMsg.createErrorMsg("请选择出租状态.");
            }
            /*if (StringUtil.isNullOrEmpty(apartment.getActivated_type())) {
                return ResultMsg.createErrorMsg("请选择激活类型.");
            }*/
            if (StringUtil.isNullOrEmpty(apartment.getFire_status())) {
                return ResultMsg.createErrorMsg("请选择着火状态.");
            }
            if (StringUtil.isNullOrEmpty(apartment.getLook_type())) {
                return ResultMsg.createErrorMsg("请选择看房方式.");
            }
            if (null != apartment.getApartment_id()) {
                // 保存
                Apartment apartmentOld = apartmentMapper.selectShareHouseByApartmentId(apartment.getApartment_id());
                if (null == apartmentOld) {
                    return ResultMsg.createErrorMsg("当前公寓不存在.");
                }
                if (StringUtil.isNullOrEmpty(apartment.getUpdate_time())) {
                    return ResultMsg.createErrorMsg("缺少更新时间.");
                }
                if (!apartment.getUpdate_time().equals(apartmentOld.getUpdate_time())) {
                    return ResultMsg.createErrorMsg("用户数据已经被其他用户更新，请返回重新编辑.");
                }
                if (null == apartmentOld.getRoom_id()) {
                    return ResultMsg.createErrorMsg("当前公寓的出租房间不存在.");
                }

                //非必填字段看房备注，备注，不填时写无
                if (apartment.getLook_remark() == null || apartment.getLook_remark() == "") {
                    apartment.setLook_remark("无");
                }
                if (apartment.getRemark() == null || apartment.getRemark() == "") {
                    apartment.setRemark("无");
                }

                //数据权限，存在权限修改，不存在保持以前的数据
                //公共信息,没有就取原来的公共信息放到传入的apartment中
                if (!sessionVo.isEnabled("ApartmentSharePublic", String.valueOf(apartmentOld.getSign_did()), String.valueOf(apartmentOld.getSign_uid()))) {
                    apartment.setRent_status(apartmentOld.getRent_status());
                    apartment.setActivated_type(apartmentOld.getActivated_type());
                    apartment.setLook_type(apartmentOld.getLook_type());
                    apartment.setLook_date(apartmentOld.getLook_date());
                    apartment.setCheck_in_date(apartmentOld.getCheck_in_date());
                    apartment.setLook_remark(apartmentOld.getLook_remark());
                    apartment.setRemark(apartmentOld.getRemark());
                }
                //修改房源信息
                if (!sessionVo.isEnabled("ApartmentShareHouse", String.valueOf(apartmentOld.getSign_did()), String.valueOf(apartmentOld.getSign_uid()))) {
                    apartment.setRent_price(apartmentOld.getRent_price());
                    apartment.setFitment_cost(apartmentOld.getFitment_cost());
                    apartment.setEntrust_cost(apartmentOld.getEntrust_cost());
                    apartment.setCapital_cost(apartmentOld.getCapital_cost());
                    apartment.setFire_status(apartmentOld.getFire_status());

                }

                // 先更新房间的面积和朝向
                HouseRoom houseRoom = new HouseRoom();
                houseRoom.setRoom_id(apartmentOld.getRoom_id());
                houseRoom.setRoom_area(apartment.getRoom_area());
                houseRoom.setRoom_orientation(apartment.getRoom_orientation());
                houseRoom.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                houseRoom.setUpdate_uid(sysUser.getUser_id());
                houseRoomMapper.updateByPrimaryKeySelective(houseRoom);
                // 更新房间图片
                if (null != apartment.getHouseRoomImgList()) {
                    for (HouseRoomImg houseRoomImg : apartment.getHouseRoomImgList()) {
                        houseRoomImgMapper.updateByPrimaryKeySelective(houseRoomImg);
                    }
                }
                // 更新公寓
                apartment.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                apartment.setUpdate_uid(sysUser.getUser_id());
//                if (apartment.getCategory() == null) {
//                    apartment.setCategory(" ");
//                }
                apartmentMapper.updateByPrimaryKeySelective(apartment);
                this.houseStatusMapper.updateApartmentCategoryById(apartment.getApartment_id(), sysUser.getUser_id(), apartment.getCategory());
                this.houseStatusMapper.updateApartmentDealtypeById(apartment.getApartment_id(), sysUser.getUser_id(), apartment.getDealtype());
                // 新增公寓跟进
                saveFollow(apartment, followContentByEditApartment(apartment, apartmentOld));
                // 记录公寓状态日志
                if (!apartmentOld.getRent_status().equals(apartment.getRent_status())) {
                    ApartmentStatusAction apartmentStatusAction = new ApartmentStatusAction();
                    apartmentStatusAction.setAction_id(UuidUtil.getUUID());
                    apartmentStatusAction.setApartment_id(apartment.getApartment_id());
                    apartmentStatusAction.setStatus_type(DictConstants.ApartmentStatusType.RENT.value());
                    apartmentStatusAction.setStatus_value(apartment.getRent_status());
                    apartmentStatusAction.setOperat_uid(sysUser.getUser_id());
                    apartmentStatusAction.setOperat_time(DateUtil.getCurrentDateTimeAsString());
                    apartmentStatusActionMapper.insertApartmentStatusAction(apartmentStatusAction);
                }
            }
            return ResultMsg.createOkMsg();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
    
    /**
     * 保存合租公寓图片-只有编辑无新增
     *
     * @param apartment
     * @param sessionVo
     * @return ResultMsg
     */
    @Transactional
    public ResultMsg saveShareHouseImages(Apartment apartment, SessionVo sessionVo) throws Exception {
    	SysUser sysUser = sessionVo.getSysUser();
    	try {
    		// 判断必填项
    		if (null == apartment || null == apartment.getApartment_id()) {
    			return ResultMsg.createErrorMsg("缺少合租公寓ID.");
    		}
    		if (null == sysUser || null == sysUser.getUser_id()) {
    			return ResultMsg.createErrorMsg("缺少用户ID,请登录.");
    		}
    		if (null != apartment.getApartment_id()) {
    			// 保存
    			Apartment apartmentOld = apartmentMapper.selectShareHouseByApartmentId(apartment.getApartment_id());
    			if (null == apartmentOld) {
    				return ResultMsg.createErrorMsg("当前公寓不存在.");
    			}
    			if (StringUtil.isNullOrEmpty(apartment.getUpdate_time())) {
    				return ResultMsg.createErrorMsg("缺少更新时间.");
    			}
    			if (!apartment.getUpdate_time().equals(apartmentOld.getUpdate_time())) {
    				return ResultMsg.createErrorMsg("用户数据已经被其他用户更新，请返回重新编辑.");
    			}
    			if (null == apartmentOld.getRoom_id()) {
    				return ResultMsg.createErrorMsg("当前公寓的出租房间不存在.");
    			}
    			// 先更新房间的面积和朝向
    			HouseRoom houseRoom = new HouseRoom();
    			houseRoom.setRoom_id(apartmentOld.getRoom_id());
    			houseRoom.setRoom_area(apartment.getRoom_area());
    			houseRoom.setRoom_orientation(apartment.getRoom_orientation());
    			houseRoom.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
    			houseRoom.setUpdate_uid(sysUser.getUser_id());
    			houseRoomMapper.updateByPrimaryKeySelective(houseRoom);
    			// 更新房间图片
    			if (null != apartment.getHouseRoomImgList()) {
    				for (HouseRoomImg houseRoomImg : apartment.getHouseRoomImgList()) {
    					houseRoomImgMapper.updateByPrimaryKeySelective(houseRoomImg);
    				}
    			}
    		}
    		return ResultMsg.createOkMsg();
    	} catch (Exception e) {
    		throw new RuntimeException(e);
    	}
    }


    /**
     * 合租房源详情
     *
     * @param pageData
     * @return ResultObjectMsg<List<ShareHouseRoomVo>>
     * @throws Exception
     */
    public ResultObjectMsg<List<ShareHouseRoomVo>> selectShareHouseRoomList(Map<String, Object> pageData) throws Exception {
        if (null == pageData) {
            return new ResultObjectMsg<List<ShareHouseRoomVo>>("缺少参数.");
        }
        if (null == pageData.get("house_id")) {
            return new ResultObjectMsg<List<ShareHouseRoomVo>>("缺少房源ID.");
        }
        if (null == pageData.get("apartment_id")) {
            return new ResultObjectMsg<List<ShareHouseRoomVo>>("缺少公寓ID.");
        }
        Apartment apartmentCurrent = apartmentMapper.selectByPrimaryKey(ParameterUtil.getString(pageData, "apartment_id", null));
        if (null == apartmentCurrent) {
            return new ResultObjectMsg<List<ShareHouseRoomVo>>("当前公寓不存在.");
        }
        Map<String, Object> houseRoomParamsMap = new HashMap<String, Object>();
        houseRoomParamsMap.put("house_id", ParameterUtil.getString(pageData, "house_id", null));
        houseRoomParamsMap.put("contract_id", apartmentCurrent.getHouse_contract_id());
        List<HouseRoom> houseRoomList = houseRoomMapper.selectListByHouseIdContractId(houseRoomParamsMap);
        if (null != houseRoomList) {
            Map<String, Object> paramsMap = new HashMap<String, Object>();
            paramsMap.put("house_id", ParameterUtil.getString(pageData, "house_id", null));
            paramsMap.put("public_flag", DictConstants.YesNo.Y.value());
            HouseRoom houseRoomPublic = houseRoomMapper.selectByShareHouseIdAndPublicFlag(paramsMap);
            houseRoomList.add(houseRoomPublic);
        }
        List<ShareHouseRoomVo> shareHouseRoomVoList = new ArrayList<ShareHouseRoomVo>();
        if (null != houseRoomList && houseRoomList.size() > 0) {
            for (HouseRoom houseRoom : houseRoomList) {
                if (null != houseRoom) {
                    Map<String, Object> apartmentParamsMap = new HashMap<String, Object>();
                    apartmentParamsMap.put("contract_id", apartmentCurrent.getHouse_contract_id());
                    apartmentParamsMap.put("room_id", houseRoom.getRoom_id());
                    Apartment apartment = apartmentMapper.selectByRoomIdContractId(apartmentParamsMap);
                    ShareHouseRoomVo shareHouseRoomVo = new ShareHouseRoomVo();
                    shareHouseRoomVo.setApartment_id((null != apartment) ? apartment.getApartment_id() : "");
                    shareHouseRoomVo.setRent_status((null != apartment) ? apartment.getRent_status() : "");
                    shareHouseRoomVo.setHouse_id(houseRoom.getHouse_id());
                    shareHouseRoomVo.setRoom_id(houseRoom.getRoom_id());
                    shareHouseRoomVo.setSeq(getSeq(houseRoom.getRoom_no()));
                    shareHouseRoomVo.setRoom_no(StringUtil.isNullOrEmpty(houseRoom.getRoom_no()) ? "公共区域" : DicTools.getCnValue(DictConstants.RoomNo.getDictId(), houseRoom.getRoom_no()));
                    if (null != apartment && null != apartment.getApartment_id() && apartment.getApartment_id().equals((String) pageData.get("apartment_id"))) {
                        shareHouseRoomVo.setIsCurrent(DictConstants.YesNo.Y.value());
                    }
                    shareHouseRoomVoList.add(shareHouseRoomVo);
                }
            }
            Collections.sort(shareHouseRoomVoList);
        }
        return new ResultObjectMsg<List<ShareHouseRoomVo>>(shareHouseRoomVoList);
    }

    private int getSeq(String room_no) {
        int seq = 0;
        if (StringUtil.isNullOrEmpty(room_no)) {
            return seq;
        }

        switch (room_no) {
            case "METH":
                seq = 1;
                break;
            case "ETH":
                seq = 2;
                break;
            case "PROP":
                seq = 3;
                break;
            case "BUT":
                seq = 4;
                break;
            case "PENT":
                seq = 5;
                break;
            case "HEX":
                seq = 6;
                break;
            case "HEPT":
                seq = 7;
                break;
            case "OCT":
                seq = 8;
                break;
            default:
                seq = 0;
                break;
        }
        return seq;
    }

    /**
     * 查询合租房源公共区域详情
     *
     * @param pageData
     * @return ResultObjectMsg<HouseRoom>
     */
    public ResultObjectMsg<HouseRoom> selectHouseRoomDetail(Map<String, Object> pageData) throws Exception {
        if (null == pageData || null == pageData.get("room_id")) {
            return new ResultObjectMsg<HouseRoom>("缺少房间ID.");
        }
        HouseRoom houseRoom = houseRoomMapper.selectByPrimaryKey(ParameterUtil.getString(pageData, "room_id", null));
        if (null != houseRoom) {
            houseRoom.setHouseRoomConfigurationList(houseRoomConfigurationMapper.selectByRoomId(houseRoom.getRoom_id()));
            houseRoom.setHouseRoomImgList(houseRoomImgMapper.selectByRoomId(houseRoom.getRoom_id()));
            houseRoom.setHouseRoomFuncList(houseRoomFuncMapper.selectByRoomId(houseRoom.getRoom_id()));
        }
        return new ResultObjectMsg<HouseRoom>(houseRoom);
    }

    /**
     * 保存房间图片
     *
     * @param houseRoomImg
     * @param sysUser
     * @return ResultObjectMsg<HouseRoomImg>
     */
    @Transactional
    public ResultObjectMsg<HouseRoomImg> saveHouseRoomImg(HouseRoomImg houseRoomImg, SysUser sysUser) throws Exception {
        try {
            if (null == houseRoomImg) {
                return new ResultObjectMsg<HouseRoomImg>("缺少房间图片参数.");
            }
            if (null == sysUser || null == sysUser.getUser_id()) {
                return new ResultObjectMsg<HouseRoomImg>("缺少用户ID，请登录.");
            }
            if (null == houseRoomImg.getRoom_id()) {
                return new ResultObjectMsg<HouseRoomImg>("缺少房间ID.");
            }
            if (null == houseRoomImg.getImg_id()) {
                return new ResultObjectMsg<HouseRoomImg>("缺少图片ID.");
            }
            if (StringUtil.isNullOrEmpty(houseRoomImg.getImg_type())) {
                return new ResultObjectMsg<HouseRoomImg>("缺少图片类型.");
            }
            HouseRoom houseRoom = houseRoomMapper.selectByPrimaryKey(houseRoomImg.getRoom_id());
            if (null == houseRoom) {
                return new ResultObjectMsg<HouseRoomImg>("房间不存在.");
            }
            // 主键
            houseRoomImg.setRoom_img_id(UuidUtil.getUUID());
            houseRoomImg.setRoom_id(houseRoom.getRoom_id());
            houseRoomImg.setHouse_id(houseRoom.getHouse_id());
            houseRoomImg.setResidential_id(houseRoom.getResidential_id());
            houseRoomImg.setBuilding_id(houseRoom.getBuilding_id());
            houseRoomImg.setDeleted(0);
            houseRoomImg.setCreate_time(DateUtil.getCurrentDateTimeAsString());
            houseRoomImg.setCreate_uid(sysUser.getUser_id());
            houseRoomImg.setFitment_room_id(houseRoom.getFitment_room_id());
            houseRoomImgMapper.insertHouseRoomImg(houseRoomImg);
            return new ResultObjectMsg<HouseRoomImg>(houseRoomImg);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 删除房间图片
     *
     * @param pageData
     * @return ResultMsg
     */
    @Transactional
    public ResultMsg deleteHouseRoomImg(Map<String, Object> pageData) throws Exception {
        try {
            if (null == pageData || null == pageData.get("room_img_id")) {
                return ResultMsg.createErrorMsg("缺少房间图片ID.");
            }
            HouseRoomImg houseRoomImg = houseRoomImgMapper.selectByPrimaryKey(ParameterUtil.getString(pageData, "room_img_id", ""));
            if (null != houseRoomImg) {
                houseRoomImg.setDeleted(1);
                houseRoomImgMapper.updateByPrimaryKeySelective(houseRoomImg);
            }
            return ResultMsg.createOkMsg();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
    
    /**
     * 保存配套设施
     *
     * @param pageData
     * @return ResultMsg
     */
    @Transactional
    public ResultMsg saveHouseConfiguration(Apartment apartment, SessionVo sessionVo) throws Exception {
    	SysUser sysUser = sessionVo.getSysUser();
    	Apartment apartmentOld = apartmentMapper.selectEntireHouseByApartmentId(apartment.getApartment_id());
    	// 保存楼盘房屋信息
        House house = new House();
        house.setHouse_id(apartmentOld.getHouse_id());

        house.setBuild_area(apartment.getBuild_area());
        house.setRooms(apartment.getRooms());
        house.setLivings(apartment.getLivings());
        house.setKitchens(apartment.getKitchens());
        house.setBathrooms(apartment.getBathrooms());
        house.setBalconys(apartment.getBalconys());
        house.setProperty_type(apartment.getProperty_type());
        house.setProperty_use(apartment.getProperty_use());
        house.setOrientation(apartment.getOrientation());
        // 装修情况
        house.setFitment_type(apartment.getFitment_type());
        house.setUpdate_uid(sysUser.getUser_id());
        house.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
        
        House houseOld = houseMapper.selectByPrimaryKey(house.getHouse_id());
        
        // 保存配套设施，先删后增--托管公寓  图片，先删后增--托管公寓
        if (DictConstants.ApartmentType.MANAGE.value().equals(apartmentOld.getApartment_type())) {
            // 楼盘栋座
            house.setResidential_id(houseOld.getResidential_id());
            house.setBuilding_id(houseOld.getBuilding_id());
            // 数据权限，配套设施
            if (sessionVo.isEnabled("apartmentEntireSaveConfigeration", String.valueOf(apartmentOld.getSign_did()), String.valueOf(apartmentOld.getSign_uid()))) {
                houseConfigurationMapper.deleteByHouseId(house.getHouse_id());
                house.setHouseConfigurationList(apartment.getHouseConfigurationList());
                saveHouseConfiguration(house);
            }
            // 图片不统一保存[20160704]
//            house.setHouseImgList(apartment.getHouseImgList());
//            houseImgMapper.deleteByHouseId(house.getHouse_id());
//            saveHouseImg(house);


            //更新托管公寓图片序号，异常时不向上抛出，不影响其他逻辑
            try {
                updateHouseImgSort(apartment.getHouseImgList());
            } catch (Exception e) {
                IszLogger.error("ApartmentServiceBiz->saveHouseConfiguration->updateHouseImgSort error：", e);
            }
        }


        // --品牌公寓[房东配置和室内图]
        if (DictConstants.ApartmentType.BRAND.value().equals(apartmentOld.getApartment_type())) {
            // 判断fitment_house是否存在,如果不存在则新增
            FitmentHouse fitmentHouse = fitmentHouseMapper.selectByContractId(apartmentOld.getHouse_contract_id());
            if (null == fitmentHouse) {
                fitmentHouse = new FitmentHouse();
                fitmentHouse.setFitment_id(UuidUtil.getUUID());
                fitmentHouse.setContract_id(apartmentOld.getHouse_contract_id());
                fitmentHouse.setHouse_id(apartmentOld.getHouse_id());
                fitmentHouse.setReform_way(DictConstants.ReformWay.RESTYLED.value());
                fitmentHouse.setApartment_kind(DictConstants.ApartmentKind.DWELLING.value());
                fitmentHouse.setRemark("老数据品牌整租装修数据.");
                fitmentHouse.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                fitmentHouse.setCreate_uid(sysUser.getUser_id());
                fitmentHouse.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                fitmentHouse.setUpdate_uid(sysUser.getUser_id());
                fitmentHouse.setRooms(houseOld.getRooms());
                fitmentHouse.setLivings(houseOld.getLivings());
                fitmentHouse.setKitchens(houseOld.getKitchens());
                fitmentHouse.setBathrooms(houseOld.getBathrooms());
                fitmentHouse.setBalconys(houseOld.getBalconys());
                fitmentHouseMapper.insertFitmentHouse(fitmentHouse);
            }
            // 取得公共区域和卧室的room_id
            Map<String, Object> roomParamsMap = new HashMap<String, Object>();
            roomParamsMap.put("house_id", house.getHouse_id());
            roomParamsMap.put("public_flag", DictConstants.YesNo.N.value());
            roomParamsMap.put("contract_id", apartmentOld.getHouse_contract_id());
            HouseRoom houseRoom = houseRoomMapper.selectByEntireHouseIdAndPublicFlag(roomParamsMap);
            if (null == houseRoom || null == houseRoom.getRoom_id()) {
                houseRoom = new HouseRoom();
                houseRoom.setPublic_flag(DictConstants.YesNo.N.value());
                insertHouseRoom(sysUser, apartmentOld, houseRoom, fitmentHouse);
                // throw new RuntimeException("卧室房间不存在.");
            }
            roomParamsMap.put("public_flag", DictConstants.YesNo.Y.value());
            HouseRoom housePublicRoom = houseRoomMapper.selectByEntireHouseIdAndPublicFlag(roomParamsMap);
            if (null == housePublicRoom || null == housePublicRoom.getRoom_id()) {
                housePublicRoom = new HouseRoom();
                housePublicRoom.setPublic_flag(DictConstants.YesNo.Y.value());
                insertHouseRoom(sysUser, apartmentOld, housePublicRoom, fitmentHouse);
//                throw new RuntimeException("公共区域不存在.");
            }
            // 数据权限，配套设施
            if (sessionVo.isEnabled("apartmentEntireSaveConfigeration", String.valueOf(apartmentOld.getSign_did()), String.valueOf(apartmentOld.getSign_uid()))) {
                // 只修改房东部分--先删除后新增
                // 卧室
                List<HouseRoomConfiguration> houseRoomConfigurationList = apartment.getHouseRoomConfigurationList();
                if (null != houseRoomConfigurationList && houseRoomConfigurationList.size() > 0) {
                    Map<String, Object> paramsMap = new HashMap<String, Object>();
                    paramsMap.put("house_id", apartmentOld.getHouse_id());
                    paramsMap.put("room_id", houseRoom.getRoom_id());
                    paramsMap.put("owner_type", DictConstants.OwnerType.LANDLORD.value());
                    houseRoomConfigurationMapper.deleteByHouseIdAndRoomId(paramsMap);
                    for (HouseRoomConfiguration houseRoomConfiguration : houseRoomConfigurationList) {
                        if (StringUtil.isNullOrEmpty(houseRoomConfiguration.getOwner_type()) || !DictConstants.OwnerType.LANDLORD.equals(houseRoomConfiguration.getOwner_type())) {
                            throw new RuntimeException("卧室房间配置缺少所属主体房东字段.");
                        }
                        // 主键
                        houseRoomConfiguration.setConfiguration_id(UuidUtil.getUUID());
                        houseRoomConfiguration.setRoom_id(houseRoom.getRoom_id());
                        houseRoomConfiguration.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                        houseRoomConfiguration.setCreate_uid(sysUser.getUser_id());
                        houseRoomConfiguration.setFitment_room_id(houseRoom.getFitment_room_id());
                    }
                    houseRoomConfigurationMapper.saveHouseRoomConfiguration(houseRoomConfigurationList);
                }
                // 公共区域
                List<HouseRoomConfiguration> houseRoomPublicConfigurationList = apartment.getHouseRoomPublicConfigurationList();
                if (null != houseRoomPublicConfigurationList && houseRoomPublicConfigurationList.size() > 0) {
                    Map<String, Object> paramsMap = new HashMap<String, Object>();
                    paramsMap.put("house_id", apartmentOld.getHouse_id());
                    paramsMap.put("room_id", housePublicRoom.getRoom_id());
                    paramsMap.put("owner_type", DictConstants.OwnerType.LANDLORD.value());
                    houseRoomConfigurationMapper.deleteByHouseIdAndRoomId(paramsMap);
                    for (HouseRoomConfiguration houseRoomConfiguration : houseRoomPublicConfigurationList) {
                        if (StringUtil.isNullOrEmpty(houseRoomConfiguration.getOwner_type()) || !DictConstants.OwnerType.LANDLORD.value().equals(houseRoomConfiguration.getOwner_type())) {
                            throw new RuntimeException("公共区域配置缺少所属主体房东字段.");
                        }
                        // 主键
                        houseRoomConfiguration.setConfiguration_id(UuidUtil.getUUID());
                        houseRoomConfiguration.setRoom_id(housePublicRoom.getRoom_id());
                        houseRoomConfiguration.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                        houseRoomConfiguration.setCreate_uid(sysUser.getUser_id());
                        houseRoomConfiguration.setFitment_room_id(housePublicRoom.getFitment_room_id());
                    }
                    houseRoomConfigurationMapper.saveHouseRoomConfiguration(houseRoomPublicConfigurationList);
                }
            }
            // [整租放到公共区域里面]公共区域图片－先删后增[不统一保存20160704]
//            Map<String, Object> roomImpParamsMap = new HashMap<String, Object>();
//            roomImpParamsMap.put("house_id", house.getHouse_id());
//            roomImpParamsMap.put("room_id", housePublicRoom.getRoom_id());
//            roomImpParamsMap.put("img_type", DictConstants.ImgType.INDOOR_IMGS.value());
//            houseRoomImgMapper.deleteByHouseIdAndRoomIdAndImgType(roomImpParamsMap);
//            List<HouseRoomImg> houseRoomImgList = apartment.getHouseRoomImgList();
//            if (null != houseRoomImgList && houseRoomImgList.size() > 0) {
//                for (HouseRoomImg houseRoomImg : houseRoomImgList) {
//                    if (null == houseRoomImg.getImg_id()) {
//                        throw new RuntimeException("装修房屋户型图缺少图片ID.");
//                    }
//                    houseRoomImg.setRoom_img_id(UuidUtil.getUUID());
//                    houseRoomImg.setResidential_id(housePublicRoom.getResidential_id());
//                    houseRoomImg.setBuilding_id(housePublicRoom.getBuilding_id());
//                    houseRoomImg.setHouse_id(housePublicRoom.getHouse_id());
//                    houseRoomImg.setRoom_id(housePublicRoom.getRoom_id());
//                    houseRoomImg.setDeleted(0);
//                    houseRoomImg.setCreate_time(DateUtil.getCurrentDateTimeAsString());
//                    houseRoomImg.setCreate_uid(sysUser.getUser_id());
//                }
//                houseRoomImgMapper.saveHouseRoomImg(houseRoomImgList);
//            }

            //更新托管公寓图片序号，异常时不向上抛出，不影响其他逻辑
            try {
                updateHouseRoomImgSort(apartment.getHouseRoomImgList());
            } catch (Exception e) {
                IszLogger.error("ApartmentServiceBiz->saveHouseConfiguration->updateHouseRoomImgSort error：", e);
            }
        }
        return ResultMsg.createOkMsg();
    }

    /**
     * 新增或更新-托管公寓
     *
     * @param sysUser
     * @param apartment
     * @return ResultMsg
     */
    @Transactional
    public ResultMsg saveApartment(SysUser sysUser, Apartment apartment) throws Exception {
        try {
            if (null == sysUser || null == sysUser.getUser_id()) {
                return ResultMsg.createErrorMsg("缺少用户ID，请登录.");
            }
            if (null == apartment) {
                return ResultMsg.createErrorMsg("缺少公寓数据.");
            }
            // 公寓中要保存委托合同ID
            if (null == apartment.getHouse_contract_id()) {
                return ResultMsg.createErrorMsg("缺少委托合同ID.");
            }
            // 房源方部门、房源方
            if (null == apartment.getDid()) {
                return ResultMsg.createErrorMsg("缺少房源方部门.");
            }
            if (null == apartment.getUid()) {
                return ResultMsg.createErrorMsg("缺少房源方.");
            }
            // 整租的装修情况
            House house = houseMapper.selectByHouseId(apartment.getHouse_id());
            if (null == house) {
                return ResultMsg.createErrorMsg("出租房源不存在.");
            }
            apartment.setFitment_type(house.getFitment_type());
            // 新增
            if (null == apartment.getApartment_id()) {
                // 根据委托合同和房源编号[deleted=0]查询公寓 判断是否已经存在,如果存在返回公寓已经存在,请更新
                Integer apartmentNum = apartmentMapper.selectApartmentByContractIdAndHouseCode(apartment.getHouse_contract_id(), house.getHouse_code());
                if (apartmentNum > 0) {
                    return ResultMsg.createErrorMsg("公寓已经存在,请更新.");
                }
                // 激活类型
                if (StringUtil.isNullOrEmpty(apartment.getActivated_type())) {
                    return ResultMsg.createErrorMsg("缺少激活类型.");
                }
                // 此处会获得apartment的apartment_id
                // 主键
                apartment.setApartment_id(UuidUtil.getUUID());
                apartment.setActivated_time(DateUtil.getCurrentDateTimeAsString());
                apartment.setActivated_uid(sysUser.getUser_id());
                if (DictConstants.ApartmentType.MANAGE.value().equals(apartment.getApartment_type())) {
                    // 默认不改造和管家房
                    apartment.setReform_way(DictConstants.ReformWay.UNRRESTYLE.value());
                    apartment.setApartment_kind(DictConstants.ApartmentKind.MANAGE.value());
                    // 托管整租 装修成本为0 资金成本为0*8.5%/12

                }
                apartment.setDeleted(0);
                apartment.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                apartment.setCreate_uid(sysUser.getUser_id());
                apartment.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                apartment.setUpdate_uid(sysUser.getUser_id());

                // 托管房续签或新签 判断新旧委托合同的类型和出租类型是否一致
                HouseContractVo houseContractVo = houseContractVoMapper.selectByContractId(apartment.getHouse_contract_id());

                // 空置日期 2016-07-29 委托起算日
                apartment.setVacancy_date(houseContractVo.getEntrust_start_date());

                // 房源属性 默认空置 2016-08-02
                apartment.setProperty(DictConstants.ApartmentProperty.VACANCY.value());

                if (null != houseContractVo && DictConstants.ApartmentType.MANAGE.value().equals(houseContractVo.getApartment_type())) {
                    // 新签-上一份委托合同 续签-父委托合同
                    HouseContractVo houseContractVoPre = null;
                    // 新签
                    if (DictConstants.HouseContractType.NEWSIGN.value().equals(houseContractVo.getContract_type())) {
                        Map<String, Object> paramsMap = new HashMap<String, Object>();
                        paramsMap.put("house_id", houseContractVo.getHouse_id());
                        paramsMap.put("contract_id", houseContractVo.getContract_id());
                        houseContractVoPre = houseContractVoMapper.selectPreByHouseIdAndContractId(paramsMap);
                    }
                    // 续签
                    if (DictConstants.HouseContractType.RENEWSIGN.value().equals(houseContractVo.getContract_type())) {
                        if (!StringUtil.isNullOrEmpty(houseContractVo.getParent_id())) {
                            houseContractVoPre = houseContractVoMapper.selectByContractId(houseContractVo.getParent_id());
                        }
                    }
                    if (null != houseContractVoPre && DictConstants.ApartmentType.MANAGE.value().equals(houseContractVoPre.getApartment_type())) {
                        List<Apartment> apartmentPreList = apartmentMapper.selectByHouseContractId(houseContractVoPre.getContract_id());
                        if (null != apartmentPreList && apartmentPreList.size() > 0) {
                            Apartment apartmentPre = apartmentPreList.get(0);
                            if (null != apartmentPre) {
                                apartment.setFitment_cost(apartmentPre.getFitment_cost());
                                apartment.setCapital_cost(apartmentPre.getCapital_cost());
                                apartment.setApartment_cost(apartmentPre.getApartment_cost());
                                apartment.setLook_type(apartmentPre.getLook_type());
                                apartment.setLook_date(apartmentPre.getLook_date());
                                apartment.setCheck_in_date(apartmentPre.getCheck_in_date());
                                apartment.setLook_remark(apartmentPre.getLook_remark());
                                apartment.setRemark(apartmentPre.getRemark());
                            }
                        }
                    }
                }
                Integer count = apartmentMapper.selectApartmentByContractIdAndHouseCode(apartment.getHouse_contract_id(), apartment.getApartment_code());
                if (null != count && count > 0) {
                    IszLogger.error("新增或更新-托管公寓【接口】时,公寓已经存在.");
                } else {
                    apartmentMapper.insertApartment(apartment);
                    // 记录公寓状态日志
                    saveApartmentStatus(sysUser, apartment);
                    // 系统跟进
                    saveFollow(apartment, "委托合同生成公寓");
                    // this.houseStatusService.entrustAffectApartmentStatus(sysUser, apartment.getHouse_id());
                    // this.houseStatusService.entrustAffectApartmentStatus(sysUser, apartment.getHouse_id());
                    handleApartmentStatusService.handleApartmentContractStatusByHouse(apartment.getHouse_id(), sysUser, RentAffectApartment_ActionType.OTHER);
                }

                // 更新
            } else {
                Apartment apartmentOld = apartmentMapper.selectByPrimaryKey(apartment.getApartment_id());
                if (StringUtil.isNullOrEmpty(apartment.getUpdate_time())) {
                    return ResultMsg.createErrorMsg("缺少更新时间.");
                }
                String a1 = apartment.getUpdate_time();
                String a2 = apartmentOld.getUpdate_time();
//                System.out.println("a1:"+a1);
//                System.out.println("a2:"+a2);
                if (!a1.equals(a2)) {
                    return ResultMsg.createErrorMsg("用户数据已经被其他用户更新，请返回重新编辑.");
                }
                // 委托合同对Apartment的影响 服务部门 服务管家 房源方部门 房源方
                Apartment apartmentUpdate = new Apartment();
                apartmentUpdate.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                apartmentUpdate.setUpdate_uid(sysUser.getUser_id());
                apartmentUpdate.setApartment_id(apartment.getApartment_id());
                if (!StringUtil.isNullOrEmpty(apartment.getService_did())) {
                    apartmentUpdate.setService_did(apartment.getService_did());
                }
                if (!StringUtil.isNullOrEmpty(apartment.getService_uid())) {
                    apartmentUpdate.setService_uid(apartment.getService_uid());
                }
                if (!StringUtil.isNullOrEmpty(apartment.getDid())) {
                    apartmentUpdate.setDid(apartment.getDid());
                }
                if (!StringUtil.isNullOrEmpty(apartment.getUid())) {
                    apartmentUpdate.setUid(apartment.getUid());
                }
                if (!StringUtil.isNullOrEmpty(apartment.getRent_status())) {
                    apartmentUpdate.setRent_status(apartment.getRent_status());
                }
                if (!StringUtil.isNullOrEmpty(apartment.getIs_active())) {
                    apartmentUpdate.setIs_active(apartment.getIs_active());
                }
                apartmentMapper.updateByPrimaryKeySelective(apartmentUpdate);

                //saveFollow(apartmentUpdate, followContentByEditApartment(apartmentUpdate, apartmentOld));
                //this.houseStatusService.entrustAffectApartmentStatus(sysUser, apartment.getHouse_id());

            }
            return ResultMsg.createOkMsg();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 保存公寓状态
     *
     * @param sysUser
     * @param apartment
     */
    @Transactional
    public void saveApartmentStatus(SysUser sysUser, Apartment apartment) throws Exception {
        try {
            // 待出租
            ApartmentStatusAction apartmentStatusAction = new ApartmentStatusAction();
            // 主键
            apartmentStatusAction.setAction_id(UuidUtil.getUUID());
            apartmentStatusAction.setApartment_id(apartment.getApartment_id());
            apartmentStatusAction.setStatus_type(DictConstants.ApartmentStatusType.RENT.value());
            apartmentStatusAction.setStatus_value(DictConstants.RentStatus.WAITING_RENT.value());
            apartmentStatusAction.setOperat_uid(sysUser.getUser_id());
            apartmentStatusAction.setOperat_time(DateUtil.getCurrentDateTimeAsString());
            apartmentStatusActionMapper.insertApartmentStatusAction(apartmentStatusAction);
            // 装修中
            ApartmentStatusAction apartmentStatusAction2 = new ApartmentStatusAction();
            apartmentStatusAction2.setAction_id(UuidUtil.getUUID());
            apartmentStatusAction2.setApartment_id(apartment.getApartment_id());
            apartmentStatusAction2.setStatus_type(DictConstants.ApartmentStatusType.FITMENT.value());
            apartmentStatusAction2.setStatus_value(DictConstants.FitmentStatus.FITMENTING.value());
            apartmentStatusAction2.setOperat_uid(sysUser.getUser_id());
            apartmentStatusAction2.setOperat_time(DateUtil.getCurrentDateTimeAsString());
            apartmentStatusActionMapper.insertApartmentStatusAction(apartmentStatusAction2);
            // 启用状态
            ApartmentStatusAction apartmentStatusAction3 = new ApartmentStatusAction();
            apartmentStatusAction3.setAction_id(UuidUtil.getUUID());
            apartmentStatusAction3.setApartment_id(apartment.getApartment_id());
            apartmentStatusAction3.setStatus_type(DictConstants.ApartmentStatusType.ACTIVE.value());
            apartmentStatusAction3.setStatus_value(DictConstants.YesNo.Y.value());
            apartmentStatusAction3.setOperat_uid(sysUser.getUser_id());
            apartmentStatusAction3.setOperat_time(DateUtil.getCurrentDateTimeAsString());
            apartmentStatusActionMapper.insertApartmentStatusAction(apartmentStatusAction3);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Transactional
    public ResultMsg syncApartmentIsActive(SysUser sysUser, String house_contract_id, String house_id) throws Exception {
        try {
            // 当前委托合同下的公寓的is_active设为Y;当前委托合同所在的house的其他公寓的is_active设为N;公寓系统跟进
            if (null == sysUser || null == sysUser.getUser_id()) {
                return ResultMsg.createErrorMsg("用户不存在，请登录.");
            }
            if (!StringUtil.isNullOrEmpty(house_contract_id) && StringUtil.isNullOrEmpty(house_id)) {
                // 当前委托合同所在出租房源的所有公寓
                List<Apartment> apartmentList = apartmentMapper.selectAllByHouseId(house_contract_id);
                if (null != apartmentList && apartmentList.size() > 0) {
                    for (Apartment apartmentOld : apartmentList) {
                        if (null != apartmentOld) {
                            Apartment apartment = new Apartment();
                            apartment.setUpdate_uid(sysUser.getUser_id());
                            apartment.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                            // 主键
                            apartment.setApartment_id(apartmentOld.getApartment_id());
                            if (house_contract_id.equals(apartmentOld.getHouse_contract_id())) {
                                // 设为Y
                                apartment.setIs_active(DictConstants.YesNo.Y.value());
                                apartmentMapper.updateByPrimaryKeySelective(apartment);
                                //saveFollow(apartment, followContentByEditApartment(apartment, apartmentOld));
                            } else {
                                // 设为N
                                apartment.setIs_active(DictConstants.YesNo.N.value());
                                apartmentMapper.updateByPrimaryKeySelective(apartment);
                                //saveFollow(apartment, followContentByEditApartment(apartment, apartmentOld));
                            }
                            // 激活house_room[2016-07-21]
                            Map<String, Object> paramsMap = new HashMap<>();
                            paramsMap.put("contract_id", house_contract_id);
                            if (DictConstants.RentType.SHARE.value().equals(apartmentOld.getRent_type())) {
                                paramsMap.put("room_id", apartmentOld.getRoom_id());
                            }
                            designServiceBiz.activateHouseRoom(sysUser, paramsMap);
                        }
                    }
                }
            }
            if (!StringUtil.isNullOrEmpty(house_id) && StringUtil.isNullOrEmpty(house_contract_id)) {
                // house_id下的所有委托合同全部置为N
                List<Apartment> apartmentList = apartmentMapper.selectAllByHouseId(house_id);
                if (null != apartmentList && apartmentList.size() > 0) {
                    for (Apartment apartmentOld : apartmentList) {
                        Apartment apartment2 = new Apartment();
                        apartment2.setUpdate_uid(sysUser.getUser_id());
                        apartment2.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                        // 主键
                        apartment2.setApartment_id(apartmentOld.getApartment_id());
                        // 设为N
                        apartment2.setIs_active(DictConstants.YesNo.N.value());
                        apartmentMapper.updateByPrimaryKeySelective(apartment2);
                        saveFollow(apartment2, followContentByEditApartment(apartment2, apartmentOld));
                    }
                }
                // house_id下的所有fitment_house全部置为N

                // house_id下的所有fitment_room house_room全部置为N
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return ResultMsg.createOkMsg();
    }

    public List<Apartment> getApartmentByHouseContractId(String contractId) {
        return apartmentMapper.selectByHouseContractId(contractId);
    }

    public void batchApartmentExpire(List<String> ids) {
        apartmentMapper.batchApartmentExpire(ids);
    }

    public ResultObjectMsg<SysUser> selectRodomApartmentWebUser(String apartmentId) {
        //查询当前有效的委托合同的签约人
        SysUser webUser = new SysUser();
        String user_id = apartmentOfficailPersonImpl.configOfficailPerson(apartmentId);
        if (StringUtil.isNullOrEmpty(user_id)) {
            return new ResultObjectMsg<SysUser>(webUser);
        }
        return userService.getSysUserByUserId(user_id);
    }

    /**
     * 预订房源-整租合租
     *
     * @param pageData
     * @return ResultObjectMsg<PagingHelper<Map<String,Object>>>
     */
    public ResultObjectMsg<PagingHelper<Map<String, Object>>> searchBookAvailabilityApartmentList(Map<String, Object> pageData) throws Exception {
        if (null == pageData) {
            return new ResultObjectMsg<PagingHelper<Map<String, Object>>>("缺少参数.");
        }
        if (StringUtil.isNullOrEmpty((String) pageData.get("rent_type_search"))) {
            return new ResultObjectMsg<PagingHelper<Map<String, Object>>>("缺少出租类型[整租 合租].");
        }

        int page_num = ParameterUtil.getInt(pageData, "pageNumber", 1);
        int page_size = ParameterUtil.getInt(pageData, "pageSize", 10);

        PagingHelper<Map<String, Object>> ph = new PagingHelper<Map<String, Object>>();
        ph.setPerPageSize(page_size);
        ph.setCurrentPage(page_num);

        pageData.put("begin_num", ph.getBeginRowNumber());
        pageData.put("end_num", ph.getEndRowNumber());

        List<Map<String, Object>> list = apartmentMapper.searchBookAvailabilityApartmentList(pageData);
        Integer count = apartmentMapper.countSearchBookAvailabilityApartment(pageData);

        ph.setTotal(count); // 设置总的记录数
        ph.setRows(list); // 设置返回的记录
        return new ResultObjectMsg<PagingHelper<Map<String, Object>>>(ph);

    }

    /**
     * 公寓变更状态
     *
     * @param sysUser
     * @param apartment_id
     * @param rent_status
     * @param category
     * @return ResultMsg
     * @throws Exception
     */
    @Transactional
    public ResultMsg updateStatus(SysUser sysUser, String apartment_id, String rent_status, String category) throws Exception {
        try {
            if (null == sysUser) {
                return ResultMsg.createErrorMsg("用户不存在,请登录.");
            }
            if (StringUtil.isNullOrEmpty(apartment_id)) {
                return ResultMsg.createErrorMsg("公寓ID不存在.");
            }
            if (StringUtil.isNullOrEmpty(rent_status) && null == category) {
                return ResultMsg.createErrorMsg("状态或类别不存在.");
            }
            Apartment apartmentOld = apartmentMapper.selectByPrimaryKey(apartment_id);
            if (null == apartmentOld) {
                return ResultMsg.createErrorMsg("公寓不存在.");
            }
            Apartment apartment = new Apartment();
            apartment.setApartment_id(apartment_id);
            if (!StringUtil.isNullOrEmpty(rent_status)) {
                apartment.setRent_status(rent_status);
            }
            if (null != category) {
                apartment.setCategory(category);
            }
            apartment.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
            apartment.setUpdate_uid(sysUser.getUser_id());
            apartmentMapper.updateApartmentStatusCategory(apartment);
            StringBuffer follow_content = new StringBuffer();
            if ((null != apartmentOld.getRent_status() && !apartmentOld.getRent_status().equals(apartment.getRent_status())) || (null != apartment.getRent_status() && !apartment.getRent_status().equals(apartmentOld.getRent_status()))) {
                follow_content = followContentAppend(apartment.getRent_status(), apartmentOld.getRent_status(), "出租状态", follow_content, DictConstants.RentStatus.getDictId());
            }
            if ((null != apartmentOld.getCategory() && !apartmentOld.getCategory().equals(apartment.getCategory())) || (null != apartment.getCategory() && !apartment.getCategory().equals(apartmentOld.getCategory()))) {
                follow_content = followContentAppend(apartment.getCategory(), apartmentOld.getCategory(), "房源类别", follow_content, DictConstants.ApartmentCategory.getDictId());
            }
            apartmentOld.setUpdate_uid(sysUser.getUser_id());
            saveFollow(apartmentOld, follow_content.toString());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return ResultMsg.createOkMsg();
    }

    /**
     * 待定价公寓列表
     *
     * @param apartment_id
     * @return ResultObjectMsg<List<Map<String, Object>>>
     * @throws Exception
     */
    public ResultObjectMsg<List<Map<String, Object>>> searchPricingApartment(String apartment_id) throws Exception {
        if (StringUtil.isNullOrEmpty(apartment_id)) {
            return new ResultObjectMsg<List<Map<String, Object>>>("缺少公寓ID.");
        }
        return new ResultObjectMsg<List<Map<String, Object>>>(apartmentMapper.searchPricingApartment(apartment_id));
    }

    /**
     * 房源定价
     *
     * @param sessionVo
     * @param pageListData
     * @return ResultObjectMsg<Map<String, Object>>
     * @throws Exception
     */
    @Transactional
    public ResultObjectMsg<Map<String, Object>> confirmPricing(SessionVo sessionVo, List<Map<String, Object>> pageListData) throws Exception {
        try {
            SysUser sysUser = sessionVo.getSysUser();
            if (null == sysUser) {
                return new ResultObjectMsg<Map<String, Object>>("缺少用户ID,请登录.");
            }
            if (null == pageListData || pageListData.size() <= 0) {
                return new ResultObjectMsg<Map<String, Object>>("缺少参数.");
            }
            Map<String, Object> resultMap = new HashMap<String, Object>();
            Double totalPrice = 0.00;
            for (Map<String, Object> pageData : pageListData) {
                if (null != pageData && pageData.containsKey("apartment_id") && pageData.containsKey("rent_price")) {
                    totalPrice += Double.valueOf((String) pageData.get("rent_price"));
                }
            }
            for (Map<String, Object> pageData : pageListData) {
                if (null != pageData && pageData.containsKey("apartment_id") && pageData.containsKey("rent_price")) {
                    Double rentPrice = Double.valueOf((String) pageData.get("rent_price"));
                    BigDecimal bd = new BigDecimal(rentPrice).divide(new BigDecimal(totalPrice), 5, BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal(100));
                    Double cost_account_saved = (bd.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue());
                    pageData.put("cost_account", cost_account_saved);
                    Apartment apartmentOld = apartmentMapper.selectByPrimaryKey((String) pageData.get("apartment_id"));
                    Apartment apartment = new Apartment();
                    apartment.setApartment_id((String) pageData.get("apartment_id"));
                    apartment.setCost_account(cost_account_saved);
                    apartment.setRent_price(rentPrice);
                    apartment.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                    apartment.setUpdate_uid(sysUser.getUser_id());
                    // 根据装修总成本和成本占比计算装修成本和资金成本
                    FitmentHouse fitmentHouse = fitmentHouseMapper.selectByContractId(apartmentOld.getHouse_contract_id());
                    if (null != fitmentHouse) {
                        if (null == fitmentHouse.getTotal_cost()) {
                            fitmentHouse.setTotal_cost(0.0);
                        }
                        // 装修成本 装修总成本/委托年限*成本占比  委托起算日 委托到期日
                        HouseContractVo houseContractVo = houseContractVoMapper.selectByContractId(fitmentHouse.getContract_id());
                        if (null == houseContractVo || StringUtil.isNullOrEmpty(houseContractVo.getEntrust_start_date()) || StringUtil.isNullOrEmpty(houseContractVo.getEntrust_end_date())) {
                            return new ResultObjectMsg<Map<String, Object>>("缺少委托合同或委托起算日、委托到期日.");
                        }
                        // 委托年限
                        Double entrustMonth = DateUtil.diffMonth(DateUtil.parse(houseContractVo.getEntrust_start_date()), DateUtil.parse(houseContractVo.getEntrust_end_date()));

                        if (entrustMonth >= 60.0) {
                            entrustMonth = 60.0;
                        }

                        BigDecimal bigTotalCost = new BigDecimal(fitmentHouse.getTotal_cost());
                        BigDecimal big001 = new BigDecimal(0.01);
                        BigDecimal bigCostAccount = bd;
                        BigDecimal bigEntrustMonth = new BigDecimal(entrustMonth);

                        BigDecimal fitment_cost = (bigTotalCost.divide(bigEntrustMonth, 5, BigDecimal.ROUND_HALF_UP).multiply(bigCostAccount).multiply(big001)).setScale(5, BigDecimal.ROUND_HALF_UP);
                        Double fitment_cost_saved = (bigTotalCost.divide(bigEntrustMonth, 5, BigDecimal.ROUND_HALF_UP).multiply(bigCostAccount).multiply(big001)).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
                        apartment.setFitment_cost(fitment_cost_saved);
                        // 资金成本 资金成本 装修总成本的8.5%（系数12）/12个月 [取动态系数]
                        Double factorValue = achievementConfigRedisService.getAchievementConfig(apartmentOld.getCity_code(), ConfigParentTypeEnum.OTHER.getValue(), ConfigTypeEnum.FUNDS_PROPORTION.getValue(), ConfigFactorEnum.OTHER_ACCOUNTING_DATE_FIRST.getValue());
//                        Double factorValue = 8.5;
                        if (null == factorValue) {
                            return new ResultObjectMsg<Map<String, Object>>("其他-资金分成比例 系数为空.");
                        }

                        BigDecimal bigFactorValue = new BigDecimal(factorValue);

                        BigDecimal capital_cost = (bigTotalCost).multiply(bigCostAccount).multiply(big001).multiply(bigFactorValue).multiply(big001).divide(new BigDecimal(12), 5, BigDecimal.ROUND_HALF_UP).setScale(5, BigDecimal.ROUND_HALF_UP);
                        Double capital_cost_saved = (bigTotalCost).multiply(bigCostAccount).multiply(big001).multiply(bigFactorValue).multiply(big001).divide(new BigDecimal(12), 5, BigDecimal.ROUND_HALF_UP).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
                        apartment.setCapital_cost(capital_cost_saved);
                        // 租金成本

                        BigDecimal bigRentalPrice = new BigDecimal(houseContractVo.getRental_price());

                        BigDecimal entrust_cost = (bigRentalPrice.multiply(bigCostAccount).multiply(big001)).setScale(5, BigDecimal.ROUND_HALF_UP);
                        Double entrust_cost_saved = (bigRentalPrice.multiply(bigCostAccount).multiply(big001)).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
                        apartment.setEntrust_cost(entrust_cost_saved);

                        pageData.put("fitment_cost", fitment_cost_saved);
                        pageData.put("capital_cost", capital_cost_saved);
                        pageData.put("entrust_cost", entrust_cost_saved);

                        StringBuffer sb = new StringBuffer("");
                        sb.append("【出租价：" + (null == apartmentOld.getRent_price() ? 0 : apartmentOld.getRent_price()) + "=>" + rentPrice + "】【成本占比" + apartmentOld.getCost_account() + "=>" + (bd.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue()));
                        if (apartmentOld.getFitment_cost() != apartment.getFitment_cost()) {
                            sb.append("】【装修成本" + (null == apartmentOld.getFitment_cost() ? 0 : apartmentOld.getFitment_cost()) + "=>" + apartment.getFitment_cost());
                        }
                        if (apartmentOld.getCapital_cost() != apartment.getCapital_cost()) {
                            sb.append("】【资金成本" + (null == apartmentOld.getCapital_cost() ? 0 : apartmentOld.getCapital_cost()) + "=>" + apartment.getCapital_cost());
                        }
                        if (apartmentOld.getEntrust_cost() != apartment.getEntrust_cost()) {
                            sb.append("】【租金成本" + (null == apartmentOld.getEntrust_cost() ? 0 : apartmentOld.getEntrust_cost()) + "=>" + apartment.getEntrust_cost() + "】");
                        }
                        saveFollow(apartmentOld, sb.toString());

                        if (null != apartment.getFitment_cost() && null != apartment.getCapital_cost() && null != apartment.getEntrust_cost()) {
                            apartment.setApartment_cost(fitment_cost.add(capital_cost).add(entrust_cost).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue());
                        }
                    }

                    apartmentMapper.updateByPrimaryKeySelective(apartment);

                    if (DictConstants.YesNo.Y.value().equals((String) pageData.get("current_apartment"))) {
                        pageData.put("apartment_cost", apartment.getApartment_cost());
                        resultMap = pageData;
                    }
                }
            }
            return new ResultObjectMsg<Map<String, Object>>(resultMap);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 获取公共区域图
     * ResultObjectMsg<List<HouseRoomImg>>
     *
     * @param house_id
     * @param house_contract_id
     * @return
     * @author longzq
     */
    public ResultObjectMsg<List<HouseRoomImg>> selectPublicByHouseIdContractId(String house_id, String house_contract_id) {
        Map<String, Object> publicHouseRoomImgsMap = new HashMap<String, Object>();
        publicHouseRoomImgsMap.put("house_id", house_id);
        publicHouseRoomImgsMap.put("house_contract_id", house_contract_id);
        List<HouseRoomImg> hrList = houseRoomImgMapper.selectPublicByHouseIdContractId(publicHouseRoomImgsMap);
        return new ResultObjectMsg<List<HouseRoomImg>>(hrList);
    }

    /**
     * 获取室内图
     * ResultObjectMsg<List<HouseRoomImg>>
     *
     * @param room_id
     * @return
     * @author longzq
     */
    public ResultObjectMsg<List<HouseRoomImg>> selectHouseRoomImg(String room_id) {
        return new ResultObjectMsg<List<HouseRoomImg>>(houseRoomImgMapper.selectByRoomId(room_id));
    }

    /**
     * 计算着火状态
     *
     * @定义：着火状态分为：未知、超时交房、未着火、预警、着火、烧焦
     * @前提：只有在房源状态是自营待租时，才需要计算着火状态，和着火时长
     * @交互：非自营待租时，着火状态不显示，着火状态为空；自营待租时，详情页显示着火状态，该字段不可修改
     * @火状态计算规则： 着火时长<15，未着火
     * 着火时长>=15，且<30，预警
     * 着火时长>=30，且<60，着火
     * 着火时长>=60，烧焦
     * @着火时长怎么算：
     * @NOW-着火起算日
     * @1.委托合同新增且是新收时，托管公寓：着火起算日日期=委托起算日；品牌公寓：着火起算日=交房日期，当交房日期为空时，着火状态为“未知”，当NOW=委托起算日+1天时，着火状态为超时交房
     * @如果新合同是续签性质，且与上份合同（托管到期日）无时间差，则着火起算日=上份委托合同的着火起算日。
     * @2.当前生效的出租合同终止时，着火起算日=终止日期第二天
     * @3.当前生效合同到期，着火起算日=承租到期日第二天 情况3或者2在一个合同中，只有一种情况。
     * @4.删除当前生效的出租合同，判断房源状态时是否变为自营待租，如果是重新计算着火时长（着火起算日取原先的着火起算日）
     * @7.进入一个新的委托合同周期，如果新合同是续签性质，且与上份合同到期日无时间差，则着火起算日=上份委托合同的着火起算日，如果不是按照第一条重新计算。
     */
    public ResultMsg executeCalculateFireStatusJob() throws Exception {
        try {
            // 查询自营待租的apartment列表
            List<ApartmentVo> apartmentVoList = apartmentMapper.selectWaitingRentList();
            if (null != apartmentVoList && apartmentVoList.size() > 0) {
                for (ApartmentVo apartmentVo : apartmentVoList) {
                    Apartment apartment = new Apartment();
                    // 循环计算每一个apartment的着火时长
                    Map<String, Object> fireDaysMap = calculateFireDays(apartmentVo);
                    Integer fireDays = (Integer) fireDaysMap.get("fireDays");
                    // 根据着火时长确定着火状态并更新
                    if ("EXCEPTION".equals(fireDaysMap.get("type"))) {
                        continue;
                    } else if ("TIMEOUT".equals(fireDaysMap.get("type"))) {
                        // 超时交房
                        apartment.setFire_status(DictConstants.FireStatus.TIMEOUT.value());
                    } else if ("UNKNOWN".equals(fireDaysMap.get("type"))) {
                        // 未知
                        apartment.setFire_status(DictConstants.FireStatus.UNKNOWN.value());
                    } else if (null != fireDays) {
                        if (fireDays.intValue() < 15) {
                            // 未着火
                            apartment.setFire_status(DictConstants.FireStatus.NOFIRE.value());
                        } else if (fireDays.intValue() < 30) {
                            // 预警
                            apartment.setFire_status(DictConstants.FireStatus.WARNING.value());
                        } else if (fireDays.intValue() < 60) {
                            // 着火
                            apartment.setFire_status(DictConstants.FireStatus.FIRED.value());
                        } else {
                            // 烧焦
                            apartment.setFire_status(DictConstants.FireStatus.BURNING.value());
                        }
                    }
                    apartment.setFire_days(fireDays);
                    apartment.setApartment_id(apartmentVo.getApartment_id());
                    apartment.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                    // 系统管理员
                    apartment.setUpdate_uid("00000000000000000000000000000000");
                    apartmentMapper.updateByPrimaryKeySelective(apartment);
                    // 批量定时任务不记录跟进
                }
            }
            // 把自营在租和自营预定更新为未着火
            Map<String, Object> fireStatusMap = new HashMap<String, Object>();
            fireStatusMap.put("fire_status", DictConstants.FireStatus.NOFIRE.value());
            fireStatusMap.put("update_time", DateUtil.getCurrentDateTimeAsString());
            fireStatusMap.put("update_uid", "00000000000000000000000000000000");
            apartmentMapper.updateFireStatus(fireStatusMap);
        } catch (Exception e) {
            IszLogger.error(e);
            throw new RuntimeException(e);
        }
        return ResultMsg.createOkMsg();
    }

    /**
     * 着火时长
     *
     * @param apartmentVo
     * @return int
     */
    private Map<String, Object> calculateFireDays(ApartmentVo apartmentVo) {
        Map<String, Object> res = new HashMap<String, Object>();
        // 着火起算日日期
        String fireDate = "";
        // 委托合同新签
        if (DictConstants.HouseContractType.NEWSIGN.value().equals(apartmentVo.getContract_type())) {
            // 托管公寓
            if (DictConstants.ApartmentType.MANAGE.value().equals(apartmentVo.getApartment_type())) {
                if (StringUtil.isNullOrEmpty(apartmentVo.getEntrust_start_date())) {
                    IszLogger.error("apartment_id:" + apartmentVo.getApartment_id() + "->委托合同起算日:" + apartmentVo.getParent_entrust_start_date());
                    res.put("type", "EXCEPTION");
                    return res;
                } else {
                    apartmentVo.setEntrust_start_date(apartmentVo.getEntrust_start_date().replace(".0", ""));
                }
                fireDate = apartmentVo.getEntrust_start_date();
                // 品牌公寓
            } else if (DictConstants.ApartmentType.BRAND.value().equals(apartmentVo.getApartment_type())) {
                // 交房日期为空
                fireDate = apartmentVo.getSet_delivery_date();
                if (StringUtil.isNullOrEmpty(fireDate)) {
                    String nowDate = DateUtil.getCurrentDateAsString();
                    // 委托起算日加1天
                    if (StringUtil.isNullOrEmpty(apartmentVo.getEntrust_start_date()) || apartmentVo.getEntrust_start_date().length() < 10) {
                        IszLogger.error("apartment_id:" + apartmentVo.getApartment_id() + "->委托合同起算日:" + apartmentVo.getParent_entrust_start_date());
                        res.put("type", "EXCEPTION");
                        return res;
                    } else {
                        apartmentVo.setEntrust_start_date(apartmentVo.getEntrust_start_date().substring(0, 10));
                    }
                    Date date = DateUtil.addDays(DateUtil.parse(apartmentVo.getEntrust_start_date(), DateUtil.DATE_FORMAT_PATTERN), 1);
                    String plusOneDay = DateUtil.format(date, DateUtil.DATE_FORMAT_PATTERN);
                    if (nowDate.equals(plusOneDay)) {
                        res.put("type", "TIMEOUT");
                        return res;
                    } else {
                        res.put("type", "UNKNOWN");
                        return res;
                    }
                }
            }
        } else if (DictConstants.HouseContractType.RENEWSIGN.value().equals(apartmentVo.getContract_type())) {
            if (apartmentVo.getApartment_type().equals(apartmentVo.getParent_apartment_type()) && apartmentVo.getEntrust_type().equals(apartmentVo.getParent_entrust_type())) {
                // 委托合同续签
                if (StringUtil.isNullOrEmpty(apartmentVo.getParent_entrust_end_date()) || apartmentVo.getParent_entrust_end_date().length() < 10) {
                    IszLogger.error("apartment_id:" + apartmentVo.getApartment_id() + "->上一份委托合同终止日:" + apartmentVo.getParent_entrust_start_date());
                    res.put("type", "EXCEPTION");
                    return res;
                } else {
                    apartmentVo.setParent_entrust_end_date(apartmentVo.getParent_entrust_end_date().substring(0, 10));
                }
                Date parentEndDate = DateUtil.addDays(DateUtil.parse(apartmentVo.getParent_entrust_end_date(), DateUtil.DATE_FORMAT_PATTERN), 1);
                String plusOneDay = DateUtil.format(parentEndDate, DateUtil.DATE_FORMAT_PATTERN);
                if (apartmentVo.getEntrust_start_date().equals(plusOneDay)) {
                    // 上份委托合同的着火起算日
                    if (DictConstants.ApartmentType.MANAGE.value().equals(apartmentVo.getParent_apartment_type())) {
                        fireDate = apartmentVo.getParent_entrust_start_date();
                        // 品牌公寓
                    } else if (DictConstants.ApartmentType.BRAND.value().equals(apartmentVo.getParent_apartment_type())) {
                        // 交房日期为空
                        fireDate = apartmentVo.getParent_set_delivery_date();
                        if (StringUtil.isNullOrEmpty(fireDate)) {
                            String nowDate = DateUtil.getCurrentDateAsString();
                            // 委托起算日加1天
                            if (StringUtil.isNullOrEmpty(apartmentVo.getParent_entrust_start_date()) || apartmentVo.getParent_entrust_start_date().length() < 10) {
                                IszLogger.error("apartment_id:" + apartmentVo.getApartment_id() + "->委托合同起算日:" + apartmentVo.getParent_entrust_start_date());
                                res.put("type", "EXCEPTION");
                                return res;
                            } else {
                                apartmentVo.setParent_entrust_start_date(apartmentVo.getParent_entrust_start_date().substring(0, 10));
                            }
                            Date date = DateUtil.addDays(DateUtil.parse(apartmentVo.getParent_entrust_start_date(), DateUtil.DATE_FORMAT_PATTERN), 1);
                            plusOneDay = DateUtil.format(date, DateUtil.DATE_FORMAT_PATTERN);
                            if (nowDate.equals(plusOneDay)) {
                                res.put("type", "TIMEOUT");
                                return res;
                            } else {
                                res.put("type", "UNKNOWN");
                                return res;
                            }
                        }
                    }
                } else {
                    // 【当做新签处理】
                    // 托管公寓
                    if (DictConstants.ApartmentType.MANAGE.value().equals(apartmentVo.getApartment_type())) {
                        fireDate = apartmentVo.getEntrust_start_date();
                        // 品牌公寓
                    } else if (DictConstants.ApartmentType.BRAND.value().equals(apartmentVo.getApartment_type())) {
                        // 交房日期为空
                        fireDate = apartmentVo.getSet_delivery_date();
                        if (StringUtil.isNullOrEmpty(fireDate)) {
                            String nowDate = DateUtil.getCurrentDateAsString();
                            // 委托起算日加1天
                            Date date = DateUtil.addDays(DateUtil.parse(apartmentVo.getEntrust_start_date(), DateUtil.DATE_FORMAT_PATTERN), 1);
                            plusOneDay = DateUtil.format(date, DateUtil.DATE_FORMAT_PATTERN);
                            if (nowDate.equals(plusOneDay)) {
                                res.put("type", "TIMEOUT");
                                return res;
                            } else {
                                res.put("type", "UNKNOWN");
                                return res;
                            }
                        }
                    }
                }
            } else {
                // 【当做新签处理】
                // 托管公寓
                if (DictConstants.ApartmentType.MANAGE.value().equals(apartmentVo.getApartment_type())) {
                    fireDate = apartmentVo.getEntrust_start_date();
                    // 品牌公寓
                } else if (DictConstants.ApartmentType.BRAND.value().equals(apartmentVo.getApartment_type())) {
                    // 交房日期为空
                    fireDate = apartmentVo.getSet_delivery_date();
                    if (StringUtil.isNullOrEmpty(fireDate)) {
                        String nowDate = DateUtil.getCurrentDateAsString();
                        // 委托起算日加1天
                        if (StringUtil.isNullOrEmpty(apartmentVo.getEntrust_start_date()) || apartmentVo.getEntrust_start_date().length() < 10) {
                            IszLogger.error("apartment_id:" + apartmentVo.getApartment_id() + "->委托合同起算日:" + apartmentVo.getParent_entrust_start_date());
                            res.put("type", "EXCEPTION");
                            return res;
                        } else {
                            apartmentVo.setEntrust_start_date(apartmentVo.getEntrust_start_date().substring(0, 10));
                        }
                        Date date = DateUtil.addDays(DateUtil.parse(apartmentVo.getEntrust_start_date(), DateUtil.DATE_FORMAT_PATTERN), 1);
                        String plusOneDay = DateUtil.format(date, DateUtil.DATE_FORMAT_PATTERN);
                        if (nowDate.equals(plusOneDay)) {
                            res.put("type", "TIMEOUT");
                            return res;
                        } else {
                            res.put("type", "UNKNOWN");
                            return res;
                        }
                    }
                }
            }
        }
        String endFireDate = getFireDateFromApartmentContract(apartmentVo);
        if (StringUtil.isNullOrEmpty(fireDate)) {
        	fireDate = endFireDate;
        }
        	
        if (!StringUtil.isNullOrEmpty(endFireDate)) {
            // 比较委托合同得到的日期和出租合同的日期,取最大的日期
            fireDate = (DateUtil.daysBetween(fireDate, endFireDate) > 0 ? endFireDate : fireDate);
        }
        // 计算着火时长
        if (StringUtil.isNullOrEmpty(fireDate) || fireDate.length() < 9) {
            res.put("type", "UNKNOWN");
            return res;
        }
        fireDate = fireDate.substring(0, 10);
        res.put("fireDays", DateUtil.daysBetween(fireDate, DateUtil.getCurrentDateAsString()));
        return res;
    }

    public static void main(String[] args) {
        System.out.println("2016-08-20 00:00:00".substring(0, 10));
    }

    /**
     * 根据出租合同计算着火起算日
     *
     * @param apartmentVo
     * @return String
     */
    private String getFireDateFromApartmentContract(ApartmentVo apartmentVo) {
        // 当前公寓最近的一份实际到期日小于今天的出租合同,根据这份出租合同的状态计算着火起算日
        String apartment_id = apartmentVo.getApartment_id();
//        if (DictConstants.HouseContractType.RENEWSIGN.value().equals(apartmentVo.getContract_type())) {
//            apartment_id = apartmentVo.getParent_apartment_id();
//        }
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("house_id", apartmentVo.getHouse_id());
        map.put("room_id", apartmentVo.getRoom_id());
        ApartmentContractVo apartmentContractVo = apartmentContractVoMapper.selectRecentByApartment(map);
        if (null != apartmentContractVo) {
            String contract_status = apartmentContractVo.getContract_status();
            // 终止[正退 转租 退租 转贷]
            if (DictConstants.ApartmentContractStatus.RETREATING.value().equals(contract_status)
                    || DictConstants.ApartmentContractStatus.CORPORATE_DEFAULT.value().equals(contract_status)
                    || DictConstants.ApartmentContractStatus.OWNER_DEFAULT.value().equals(contract_status)
                    || DictConstants.ApartmentContractStatus.LENDING.value().equals(contract_status)
                    || DictConstants.ApartmentContractStatus.FORRENT.value().equals(contract_status)) {
                // 终止日期第二天
                if (!StringUtil.isNullOrEmpty(apartmentContractVo.getEnd_date()) && apartmentContractVo.getEnd_date().length() > 9) {
                    apartmentContractVo.setEnd_date(apartmentContractVo.getEnd_date().substring(0, 10));
                    Date date = DateUtil.addDays(DateUtil.parse(apartmentContractVo.getEnd_date(), DateUtil.DATE_FORMAT_PATTERN), 1);
                    return DateUtil.format(date, DateUtil.DATE_FORMAT_PATTERN);
                } else {
                    IszLogger.error("apartment_id:" + apartmentVo.getApartment_id() + "->出租合同终止日期:" + apartmentContractVo.getEnd_date());
                }
            } else if (DictConstants.ApartmentContractStatus.EXPIRE.value().equals(contract_status)) {
                // 到期
                // 承租到期日第二天
                if (!StringUtil.isNullOrEmpty(apartmentContractVo.getRent_end_date()) && apartmentContractVo.getRent_end_date().length() > 9) {
                    apartmentContractVo.setRent_end_date(apartmentContractVo.getRent_end_date().substring(0, 10));
                    Date date = DateUtil.addDays(DateUtil.parse(apartmentContractVo.getRent_end_date(), DateUtil.DATE_FORMAT_PATTERN), 1);
                    return DateUtil.format(date, DateUtil.DATE_FORMAT_PATTERN);
                } else {
                    IszLogger.error("apartment_id:" + apartmentVo.getApartment_id() + "->出租合同承租到期日:" + apartmentContractVo.getEnd_date());
                }
            }
        }
        return "";
    }

    /**
     * 查出所有的有效公寓
     *
     * @param params
     * @return
     */
    public List<Apartment> searchApartmentListBySolr(Map<String, Object> params) {
        return apartmentMapper.searchApartmentListBySolr(params);
    }

    /**
     * 查出所有的有效公寓的总数
     *
     * @return
     */
    public Integer searchApartmentListCountBySolr() {
        return apartmentMapper.searchApartmentListCountBySolr();
    }

    /**
     * 查出最近删除的公寓
     *
     * @param params
     * @return
     */
    public List<Apartment> searchApartmentDeleteListBySolr() {
        return apartmentMapper.searchApartmentDeleteListBySolr();

    }

    /**
     * 查出所有删除的公寓总数
     *
     * @param params
     * @return
     */
    public Integer searchApartmentDeleteListALLCountBySolr() {
        return apartmentMapper.searchApartmentDeleteListALLCountBySolr();
    }

    /**
     * 查出所有删除的公寓
     *
     * @param params
     * @return
     */
    public List<String> searchApartmentDeleteListALLBySolr(Map<String, Object> params) {
        return apartmentMapper.searchApartmentDeleteListALLBySolr(params);
    }

    /**
     * 最近更新公寓的总数量
     *
     * @return Integer
     */
    public Integer searchApartmentUpdateListCountBySolr() {
        return apartmentMapper.searchApartmentUpdateListCountBySolr();
    }

    /**
     * 查出最近更新公寓
     *
     * @param params
     * @return
     */
    public List<Apartment> searchApartmentUpdateListBySolr() {
        return apartmentMapper.searchApartmentUpdateListBySolr();

    }

    /**
     * 更新托管公寓图片序号
     *
     * @param houseImgList
     * @throws Exception 2016年8月4日
     *                   ligaochao
     */
    private void updateHouseImgSort(List<HouseImg> houseImgList) throws Exception {
        for (HouseImg houseImg : houseImgList) {
            if (null != houseImg.getSort()) {
                houseImgMapper.updateByPrimaryKeySelective(houseImg);
            }
        }
    }

    /**
     * 更新品牌公寓图片序号
     *
     * @param houseRoomImgList
     * @throws Exception 2016年8月4日
     *                   ligaochao
     */
    private void updateHouseRoomImgSort(List<HouseRoomImg> houseRoomImgList) throws Exception {
        for (HouseRoomImg houseRoomImg : houseRoomImgList) {
            if (null != houseRoomImg.getSort()) {
                houseRoomImgMapper.updateByPrimaryKeySelective(houseRoomImg);
            }
        }
    }

    /**
     * 更新合租公寓公共区域图片序号
     *
     * @param houseRoomImgList
     * @return 2016年8月5日
     * ligaochao
     * @throws Exception
     */
    public ResultMsg updateShareHousePublicImgSort(List<HouseRoomImg> houseRoomImgList) throws Exception {
        updateHouseRoomImgSort(houseRoomImgList);
        return ResultMsg.createOkMsg();
    }

    public Apartment searchApartmentByAartmentId(String apartment_id) {
        return apartmentMapper.selectByPrimaryKey(apartment_id);

    }

    /**
     * 获取房源图片
     * ResultObjectMsg<List<HouseRoomImg>>
     *
     * @param pageData
     * @return
     * @author wangjq
     */
    public ResultObjectMsg<List<HouseRoomImg>> selectApartmentImgList(String apartment_id) {
    	Apartment apartment=apartmentMapper.selectByPrimaryKey(apartment_id);
    	List<HouseRoomImg> list=new ArrayList<HouseRoomImg>();
    	if(apartment!=null){
    		if("ENTIRE".equals(apartment.getRent_type())){//整租
				//公寓类型：MANAGE：托管公寓、BRAND：品牌公寓
				if("MANAGE".equals(apartment.getApartment_type())){
					Map<String,Object> paramMap= new HashMap<String,Object>();
					paramMap.put("house_id", apartment.getHouse_id());
					List<HouseImg> hlist=houseImgMapper.searchHouseImgList(paramMap);
					if(hlist!=null){
						for(HouseImg houseImg:hlist){
							HouseRoomImg roomImg=new HouseRoomImg();
							roomImg.setAudit_status(houseImg.getAudit_status());
							roomImg.setAudit_uid(houseImg.getAudit_uid());
							roomImg.setBuilding_id(houseImg.getBuilding_id());
							roomImg.setCreate_dep(houseImg.getCreate_dep());
							roomImg.setCreate_time(houseImg.getCreate_time());
							roomImg.setCreate_uid(houseImg.getCreate_uid());
							roomImg.setCreate_user(houseImg.getCreate_user());
							roomImg.setDeleted(houseImg.getDeleted());
							//roomImg.setFitment_room_id();
							roomImg.setHouse_id(houseImg.getHouse_id());
							roomImg.setImg_id(houseImg.getCreate_user());
							roomImg.setImg_name(houseImg.getImg_name());
							roomImg.setImg_type(houseImg.getImg_type());
							roomImg.setResidential_id(houseImg.getResidential_id());
							//roomImg.setRoom_id();
							//roomImg.setRoom_img_id();
							roomImg.setSort(houseImg.getSort());
							roomImg.setSrc(houseImg.getSrc());
							list.add(roomImg);
						}
					}
				}else if("BRAND".equals(apartment.getApartment_type())){
					list = houseRoomImgMapper.selectByHouseId(apartment.getHouse_id());
				}
			}else if("SHARE".equals(apartment.getRent_type())){//合租
				list=houseRoomImgMapper.selectByRoomId(apartment.getRoom_id());
				list = list==null?new ArrayList<HouseRoomImg>():list;
				List<HouseRoomImg> pubImgs=houseRoomImgMapper.selectPublicByHouseId(apartment.getHouse_id());
				pubImgs = pubImgs==null?new ArrayList<HouseRoomImg>():pubImgs;
				list.addAll(pubImgs);
			}
    	}
    	
        return new ResultObjectMsg<List<HouseRoomImg>>(list);
    }
    

    /**
     * 出租合同列表
     * @param sessionVo
     * @param apartmentId
     * @return
     */
	public ResultObjectMsg<PagingHelper<ApartmentContractVo>> selectApartmentContractList(SessionVo sessionVo, Map<String, Object> pageData) {
		String apartmentId = (String) pageData.get("apartment_id");
		Apartment apartment = apartmentMapper.selectEntireHouseByApartmentId(apartmentId);
        if (null == apartment) {
        	return new ResultObjectMsg<PagingHelper<ApartmentContractVo>>("无法查找到房源");
        }
        
        int page_num = ParameterUtil.getInt(pageData, "pageNumber", 1);
		int page_size = ParameterUtil.getInt(pageData, "pageSize", 10);

		PagingHelper<ApartmentContractVo> ph = new PagingHelper<ApartmentContractVo>();
		ph.setPerPageSize(page_size);
		ph.setCurrentPage(page_num);

		pageData.put("begin_num", ph.getBeginRowNumber());
		pageData.put("end_num", ph.getEndRowNumber());
		pageData.put("apartment_id", apartmentId);
		List<ApartmentContractVo> list = apartmentContractVoMapper.selectApartmentContractList(pageData);
		Integer count = apartmentContractVoMapper.countApartmentContract(pageData);
		ph.setTotal(count); // 设置总的记录数
		ph.setRows(list); // 设置返回的记录
		return new ResultObjectMsg<PagingHelper<ApartmentContractVo>>(ph).setMenu_name("合同列表").setTypeSelect().setDes("");
	}
	
	/**
	 * 委托合同列表
	 * @param sessionVo
	 * @param apartmentId
	 * @return
	 */
	public ResultObjectMsg<PagingHelper<ApartmentHouseContractVo>> selectApartmentHouseContractList(SessionVo sessionVo, Map<String, Object> pageData) {
        String apartmentId = (String) pageData.get("apartment_id");
		Apartment apartment = apartmentMapper.selectEntireHouseByApartmentId(apartmentId);
        if (null == apartment) {
        	return new ResultObjectMsg<PagingHelper<ApartmentHouseContractVo>>("无法查找到房源");
        }
        
        int page_num = ParameterUtil.getInt(pageData, "pageNumber", 1);
		int page_size = ParameterUtil.getInt(pageData, "pageSize", 10);

		PagingHelper<ApartmentHouseContractVo> ph = new PagingHelper<ApartmentHouseContractVo>();
		ph.setPerPageSize(page_size);
		ph.setCurrentPage(page_num);

		pageData.put("begin_num", ph.getBeginRowNumber());
		pageData.put("end_num", ph.getEndRowNumber());

		List<ApartmentHouseContractVo> list = houseContractVoMapper.selectApartmentHouseContractList(apartment.getHouse_id());
		Integer count = houseContractVoMapper.countApartmentHouseContract(apartment.getHouse_id());
		ph.setTotal(count); // 设置总的记录数
		ph.setRows(list); // 设置返回的记录
		return new ResultObjectMsg<PagingHelper<ApartmentHouseContractVo>>(ph).setMenu_name("合同列表").setTypeSelect().setDes("");
	}

	public Apartment searchValidApartmentByApartmentId(String apartment_id) {
		
		 return apartmentMapper.searchValidApartmentByApartmentId(apartment_id);
	}
}
