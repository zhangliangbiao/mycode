package com.isz.erp.house.util;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.jsoup.helper.StringUtil;

import com.isz.erp.common.util.DateUtil;
import com.isz.erp.common.util.DicTools;
import com.isz.erp.common.util.DictConstants;
import com.isz.erp.common.util.UuidUtil;
import com.isz.erp.facade.house.entity.Residential;
import com.isz.erp.facade.house.entity.ResidentialBuilding;
import com.isz.erp.facade.house.entity.ResidentialBuildingFloor;
import com.isz.erp.facade.house.entity.ResidentialBuildingHouseNo;
import com.isz.erp.facade.house.entity.ResidentialBuildingUnit;
import com.isz.erp.facade.user.entity.SysDistrict;
import com.isz.erp.facade.user.entity.SysUser;

public class ResidentialImportUtil {
	public static void main(String args[]) {
		// List<ResidentialBuilding> list = new
		// ArrayList<ResidentialBuilding>();
		// ResidentialBuilding a = new ResidentialBuilding();
		// a.setAddress("六合路海创园a");
		// a.setBuilding_id("1234567890a");
		// a.setBuilding_name("爱上租a");
		// ResidentialBuilding b = new ResidentialBuilding();
		// b.setAddress("六合路海创园b");
		// b.setBuilding_id("1234567890b");
		// b.setBuilding_name("爱上租b");
		// list.add(a);
		// list.add(b);
		// ResidentialImportUtil t = new ResidentialImportUtil();
		// ResidentialBuilding pp = (ResidentialBuilding) t.getObject(list,
		// "building_name", "爱上租b");
		// System.out.println(pp.getBuilding_id());
		//System.out.println(StringUtil.isNumeric(null));
		if (!StringUtil.isBlank("1.2")) {
			String checkResult = new ResidentialImportUtil().isNumericCheck("1.2", "parking_amount", new HashMap<String,String>(),2);
			System.out.println("checkResult---"+checkResult);
		}
		System.out.println("---"+new ResidentialImportUtil().isNumericCheck("1.5","",new HashMap<String,String>(),0));
	}

	/**
	 * 找出list内fieldName值等于fieldValue的对象
	 *
	 * @param list
	 * @param fieldName
	 *            属性名
	 * @param fieldValue
	 *            属性值
	 * @return
	 */
	public Object getObject(List list, String fieldName, String fieldValue) {
		try {
			Iterator iter = list.iterator();
			Object t = null;
			while (iter.hasNext()) {
				t = iter.next();
				Field field = t.getClass().getDeclaredField(fieldName);
				if (field != null) {
					field.setAccessible(true);
					// System.out.println("fieldValue"+fieldValue+",value="+field.get(t));
					if (fieldValue.equals(field.get(t))) {
						return t;
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public Residential createResidential(Map<String, String> map, SysDistrict area, SysUser sysUser) {
		Residential residential = new Residential();
		residential.setResidential_id(UuidUtil.getUUID());
		residential.setCity_code(area.getParent_code());
		residential.setArea_code(area.getCode());
		residential.setResidential_name(map.get("residential_name"));
		residential.setByname(map.get("byname"));
		residential.setAddress(map.get("address"));
		String property_type = DicTools.getEnValue(DictConstants.PropertyType.class, map.get("property_type"));
		residential.setProperty_type(property_type);
		residential.setProperty_use(map.get("property_use"));
		residential.setProperty_company(map.get("property_company"));
		residential.setProperty_fee(map.get("property_fee"));
		residential.setBuild_date(map.get("build_date"));
		residential.setTotle_buildings(StringUtil.isBlank(map.get("totle_buildings"))?null:Integer.valueOf(map.get("totle_buildings")));
		residential.setBuild_area(StringUtil.isBlank(map.get("build_area"))?null:Double.valueOf(map.get("build_area")));
		residential.setMetro_stations(map.get("metro_stations"));
		residential.setBus_stations(map.get("bus_stations"));
		residential.setLng(map.get("lng"));
		residential.setLat(map.get("lat"));
		residential.setPlot_ratio(StringUtil.isBlank(map.get("plot_ratio"))?null:Double.valueOf(map.get("plot_ratio")));
		residential.setGreen_rate(StringUtil.isBlank(map.get("green_rate"))?null:Double.valueOf(map.get("green_rate")));
		
		residential.setParking_amount(StringUtil.isBlank(map.get("parking_amount"))?null:Integer.valueOf(map.get("parking_amount")));
		
		residential.setOther_info(map.get("other_info"));
		residential.setTotal_unit_count(StringUtil.isBlank(map.get("total_unit_count"))?null:Integer.valueOf(map.get("total_unit_count")));
		residential.setTotal_house_count(StringUtil.isBlank(map.get("total_house_count"))?null:Integer.valueOf(map.get("total_house_count")));
		residential.setRemark(map.get("remark"));
		residential.setDeleted(0);
		residential.setCreate_time(DateUtil.getCurrentDateTimeAsString());
		residential.setCreate_uid(sysUser.getUser_id());
		residential.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
		residential.setUpdate_uid(sysUser.getUser_id());
		return residential;
	}

	// {"栋座名称","单元名称","物业用途","有无电梯","地面层数","地下层数","梯数","户数","层数名","房号"}
	// {"building_name","unit_name","housing_type","have_elevator","ground_floors","underground_floors","stairs","households","floor","house_no"};
	public ResidentialBuilding createResidentialBuilding(Map<String, String> map, Residential residential,
			SysUser sysUser) {
		ResidentialBuilding residentialBuilding = new ResidentialBuilding();
		residentialBuilding.setBuilding_id(UuidUtil.getUUID());
		residentialBuilding.setResidential_id(residential.getResidential_id());
		residentialBuilding.setBuilding_name(map.get("building_name"));
		residentialBuilding.setSuffix(null);
		residentialBuilding.setGround_floors(StringUtil.isBlank(map.get("ground_floors"))?null:Integer.valueOf(map.get("ground_floors")));
		residentialBuilding.setUnderground_floors(StringUtil.isBlank(map.get("underground_floors"))?null:Integer.valueOf(map.get("underground_floors")));
		residentialBuilding.setLadder_count(StringUtil.isBlank(map.get("ladder_count"))?null:Integer.valueOf(map.get("ladder_count")));
		String housing_type = DicTools.getEnValue(DictConstants.PropertyType.class, map.get("housing_type"));
		residentialBuilding.setHousing_type(housing_type == null ? "" : housing_type);
		residentialBuilding.setHave_elevator("有".equals(map.get("have_elevator")) ? "Y" : "N");
		residentialBuilding.setDeleted(0);
		residentialBuilding.setHouse_role("");
		residentialBuilding.setCreate_time(DateUtil.getCurrentDateTimeAsString());
		residentialBuilding.setCreate_uid(sysUser.getUser_id());
		residentialBuilding.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
		residentialBuilding.setUpdate_uid(sysUser.getUser_id());
		residentialBuilding.setHouse_count(StringUtil.isBlank(map.get("house_count"))?null:Integer.valueOf(map.get("house_count")));
		return residentialBuilding;
	}

	public ResidentialBuildingUnit createResidentialBuildingUnit(Map<String, String> map, ResidentialBuilding building,
			SysUser sysUser) {
		ResidentialBuildingUnit residentialBuildingUnit = new ResidentialBuildingUnit();
		residentialBuildingUnit.setUnit_id(UuidUtil.getUUID());
		residentialBuildingUnit.setBuilding_id(building.getBuilding_id());
		residentialBuildingUnit.setUnit_name(map.get("unit_name"));
		residentialBuildingUnit.setSort(0);
		residentialBuildingUnit.setCreate_time(DateUtil.getCurrentDateTimeAsString());
		residentialBuildingUnit.setCreate_uid(sysUser.getUser_id());
		residentialBuildingUnit.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
		residentialBuildingUnit.setUpdate_uid(sysUser.getUser_id());
		return residentialBuildingUnit;
	}

	public ResidentialBuildingFloor createResidentialBuildingFloor(Map<String, String> map,
			ResidentialBuildingUnit unit, SysUser sysUser) {
		ResidentialBuildingFloor residentialBuildingFloor = new ResidentialBuildingFloor();
		residentialBuildingFloor.setFloor_id(UuidUtil.getUUID());
		residentialBuildingFloor.setBuilding_id(unit.getBuilding_id());
		residentialBuildingFloor.setUnit_id(unit.getUnit_id());
		residentialBuildingFloor.setFloor_name(map.get("floor_name"));
		residentialBuildingFloor.setSort(0);
		residentialBuildingFloor.setCreate_time(DateUtil.getCurrentDateTimeAsString());
		residentialBuildingFloor.setCreate_uid(sysUser.getUser_id());
		residentialBuildingFloor.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
		residentialBuildingFloor.setUpdate_uid(sysUser.getUser_id());
		return residentialBuildingFloor;
	}

	public ResidentialBuildingHouseNo createResidentialBuildingHouseNo(Map<String, String> map,
			ResidentialBuildingFloor floor, SysUser sysUser) {
		ResidentialBuildingHouseNo residentialBuildingHouseNo = new ResidentialBuildingHouseNo();
		residentialBuildingHouseNo.setHouse_no_id(UuidUtil.getUUID());
		residentialBuildingHouseNo.setBuilding_id(floor.getBuilding_id());
		residentialBuildingHouseNo.setUnit_id(floor.getUnit_id());
		residentialBuildingHouseNo.setFloor_id(floor.getFloor_id());
		residentialBuildingHouseNo.setHouse_no(map.get("house_no"));
		residentialBuildingHouseNo.setSort("0");
		residentialBuildingHouseNo.setCreate_time(DateUtil.getCurrentDateTimeAsString());
		residentialBuildingHouseNo.setCreate_uid(sysUser.getUser_id());
		residentialBuildingHouseNo.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
		residentialBuildingHouseNo.setUpdate_uid(sysUser.getUser_id());
		return residentialBuildingHouseNo;
	}

	public void checkResidential(List<Map<String, String>> dataList, List<Map<String, String>> succList,
			List<Map<String, String>> errList, Map<String, String> keyMap) {
		int rowNum = 0;
		for (Map<String, String> map : dataList) {
			rowNum++;
			String checkResult = "";
			checkResult += isBlandCheck(map.get("residential_name"), "residential_name", keyMap);

			// String byname = map.get("byname");

			checkResult += isBlandCheck(map.get("city_name"), "city_name", keyMap);

			checkResult += isBlandCheck(map.get("area_name"), "area_name", keyMap);

			checkResult += isBlandCheck(map.get("business_circle_name"), "business_circle_name", keyMap);

			checkResult += isBlandCheck(map.get("address"), "address", keyMap);

			checkResult += isBlandCheck(map.get("lng"), "lng", keyMap);
			if (!StringUtil.isBlank(map.get("lng"))) {
				checkResult += isNumericCheck(map.get("lng"), "lng", keyMap,10);
			}
			checkResult += isBlandCheck(map.get("lat"), "lat", keyMap);
			if (!StringUtil.isBlank(map.get("lat"))) {
				checkResult += isNumericCheck(map.get("lat"), "lat", keyMap,10);
			}

			checkResult += isBlandCheck(map.get("property_type"), "property_type", keyMap);
			if (!StringUtil.isBlank(map.get("property_type"))) {
				String property_type = DicTools.getEnValue(DictConstants.PropertyType.class, map.get("property_type"));
				checkResult += StringUtil.isBlank(property_type) ? " 系统中物业类型不存在" : "";
			}
			if (!StringUtil.isBlank(map.get("totle_buildings"))) {
				checkResult += isNumericCheck(map.get("totle_buildings"), "totle_buildings", keyMap,0);
			}
			if (!StringUtil.isBlank(map.get("total_unit_count"))) {
				checkResult += isNumericCheck(map.get("total_unit_count"), "total_unit_count", keyMap,0);
			}
			if (!StringUtil.isBlank(map.get("total_house_count"))) {
				checkResult += isNumericCheck(map.get("total_house_count"), "total_house_count", keyMap,0);
			}
			if (!StringUtil.isBlank(map.get("build_date"))) {
				checkResult += isNumericCheck(map.get("build_date"), "build_date", keyMap,0);
			}
			if (!StringUtil.isBlank(map.get("build_area"))) {
				checkResult += isNumericCheck(map.get("build_area"), "build_area", keyMap,2);
			}
			// checkResult += isBlandCheck( map.get("property_company"),
			// "property_company", keyMap);

			// checkResult += isNumericCheck(map.get("property_fee"),
			// "property_fee", keyMap);
			if (!StringUtil.isBlank(map.get("plot_ratio"))) {
				checkResult += isNumericCheck(map.get("plot_ratio"), "plot_ratio", keyMap,2);
			}
			if (!StringUtil.isBlank(map.get("green_rate"))) {
				checkResult += isNumericCheck(map.get("green_rate"), "green_rate", keyMap,2);
			}
			if (!StringUtil.isBlank(map.get("parking_amount"))) {
				checkResult += isNumericCheck(map.get("parking_amount"), "parking_amount", keyMap,0);
			}
			// checkResult += isBlandCheck(map.get("other_info"), "other_info",
			// keyMap);

			// checkResult += isBlandCheck(map.get("metro_stations"),
			// "metro_stations", keyMap);

			// checkResult += isBlandCheck( map.get("bus_stations"),
			// "bus_stations", keyMap);

			 checkResult += isBlandCheck(map.get("dep_name"), "dep_name",keyMap);

			map.put("excel_rowNum", "第" + rowNum + "行");
			map.put("excel_checkResult", checkResult);

			if (null != checkResult && checkResult.trim().length()>0) {// 为空或者为数字
				errList.add(map);
			} else {
				succList.add(map);
			}
		}
	}

	// "", "unit_name", "housing_type", "have_elevator", "ground_floors",
	// "underground_floors", "ladder_count", "house_count", "floor_name",
	// "house_no"
	public void checkResidentialHouse(List<Map<String, String>> dataList, List<Map<String, String>> succList,
			List<Map<String, String>> errList, Map<String, String> keyMap) {
		int rowNum = 0;
		for (Map<String, String> map : dataList) {
			rowNum++;
			String checkResult = "";
			checkResult += isBlandCheck(map.get("building_name"), "building_name", keyMap);// 1、栋座名称：非空判断；

			checkResult += isBlandCheck(map.get("unit_name"), "unit_name", keyMap);// 2、单元名称：非空判断；

			checkResult += isBlandCheck(map.get("housing_type"), "housing_type", keyMap);// 3、物业用途：非空判断；
			if (!StringUtil.isBlank(map.get("housing_type"))) {
				String property_type = DicTools.getEnValue(DictConstants.PropertyType.class, map.get("housing_type"));
				checkResult += StringUtil.isBlank(property_type) ? " 系统中物业用途不存在" : "";
			}
			// ///residential_building
			// --》housing_type
			// 住宅类型:普通住宅,商铺公寓

			checkResult += isBlandCheck(map.get("have_elevator"), "have_elevator", keyMap); // 4、有无电梯：非空判断，要么填有，要么填无；
			checkResult += isValuesCheck(map.get("have_elevator"), "have_elevator", keyMap, "有,无");

			if (!StringUtil.isBlank(map.get("ground_floors")))
				checkResult += isNumericCheck(map.get("ground_floors"), "ground_floors", keyMap,0);// 5、地面层数：整数判断，允许为空；

			if (!StringUtil.isBlank(map.get("underground_floors")))
				checkResult += isNumericCheck(map.get("underground_floors"), "underground_floors", keyMap,0);// 6、地下层数：整数判断，允许为空；

			if (!StringUtil.isBlank(map.get("ladder_count")))
				checkResult += isNumericCheck(map.get("ladder_count"), "ladder_count", keyMap,0);// 7、梯数：整数判断，允许为空；

			if (!StringUtil.isBlank(map.get("house_count")))
				checkResult += isNumericCheck(map.get("house_count"), "house_count", keyMap,0);// 8、户数：整数判断，允许为空；

			checkResult += isBlandCheck(map.get("floor_name"), "floor_name", keyMap);// 9、楼层名称：非空判断；
			if (map.get("floor_name") != null && map.get("floor_name").startsWith("0")) {
				checkResult += " 层名不允许以0开头";
			}
			checkResult += isBlandCheck(map.get("house_no"), "house_no", keyMap);// 10、房号名称：非空判断；
			if (map.get("house_no") != null && map.get("house_no").startsWith("0")) {
				checkResult += " 房号不允许以0开头";
			}
			///// 数据库数据 判断
			map.put("excel_rowNum", "第" + rowNum + "行");
			map.put("excel_checkResult", checkResult);
			if (!StringUtil.isBlank(checkResult)) {// 不为空,有错误
				errList.add(map);
			} else {
				succList.add(map);
			}
		}
	}

	private String isBlandCheck(String value, String key, Map<String, String> keyMap) {
		return StringUtil.isBlank(value) ? " " + keyMap.get(key) + "不能为空" : "";
	}

	/**
	 * 
	 * @param value
	 * @param key
	 * @param keyMap
	 * @param poit
	 *            小数点最多位数
	 * @return
	 */
	private String isNumericCheck(String value, String key, Map<String, String> keyMap, int poit) {
		if (null != value) {
			if (!StringUtil.isNumeric(value.replace(".", ""))) {
				return poit==0?" " + keyMap.get(key) + "为非整数":" " + keyMap.get(key) + "为非数字";
			}
			String[] strs = value.split("\\.");
			if (strs.length > 2) {
				return poit==0?" " + keyMap.get(key) + "为非整数":" " + keyMap.get(key) + "为非数字";
			} else if (strs.length == 2) {
				if (poit == 0) {
					return " " + keyMap.get(key) + "为非整数";
				}
				if (strs[1].length() > poit) {
					return " " + keyMap.get(key) + "小数点最多为" + poit + "位";
				}
				return "";
			} else {
				// 整数
				return "";
			}
		} else {
			return poit==0?" " + keyMap.get(key) + "为非整数":" " + keyMap.get(key) + "为非数字";
		}
	}

	
	/**
	 * 
	 * @param value
	 * @param key
	 * @param keyMap
	 * @param values
	 *            "value1,value2,value3"
	 * @return
	 */
	private String isValuesCheck(String value, String key, Map<String, String> keyMap, String values) {
		return (values + ",").indexOf(value + ",") >= 0 ? "" : " " + keyMap.get(key) + "值必须为\"" + values + "\"中之一";
	}

}