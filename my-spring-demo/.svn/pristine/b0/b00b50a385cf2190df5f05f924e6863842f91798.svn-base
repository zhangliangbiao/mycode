package com.isz.erp.house.biz;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.beanutils.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.isz.erp.common.page.PagingHelper;
import com.isz.erp.common.util.BusinessCodeUtil;
import com.isz.erp.common.util.CodeTypeConstants;
import com.isz.erp.common.util.DateUtil;
import com.isz.erp.common.util.DicTools;
import com.isz.erp.common.util.DictConstants;
import com.isz.erp.common.util.ParameterUtil;
import com.isz.erp.common.util.PhoneValidateUtil;
import com.isz.erp.common.util.ResultMsg;
import com.isz.erp.common.util.ResultObjectMsg;
import com.isz.erp.common.util.StringUtil;
import com.isz.erp.common.util.UuidUtil;
import com.isz.erp.facade.house.entity.Follow;
import com.isz.erp.facade.house.entity.House;
import com.isz.erp.facade.house.entity.HouseAuditStatusChange;
import com.isz.erp.facade.house.entity.HouseConfiguration;
import com.isz.erp.facade.house.entity.HouseDevelop;
import com.isz.erp.facade.house.entity.HouseDevelopConfiguration;
import com.isz.erp.facade.house.entity.HouseDevelopImg;
import com.isz.erp.facade.house.entity.HouseDevelopRelation;
import com.isz.erp.facade.house.entity.HouseImg;
import com.isz.erp.facade.house.entity.HouseLinkman;
import com.isz.erp.facade.house.entity.HouseLinkmanViewed;
import com.isz.erp.facade.house.entity.HouseRent;
import com.isz.erp.facade.house.entity.HouseRentStatusAction;
import com.isz.erp.facade.house.entity.HouseRolesChangeHistory;
import com.isz.erp.facade.house.entity.HouseWash;
import com.isz.erp.facade.house.entity.Residential;
import com.isz.erp.facade.house.entity.ResidentialBuilding;
import com.isz.erp.facade.house.enums.HouseWashObjectTypeEnum;
import com.isz.erp.facade.house.service.FollowService;
import com.isz.erp.facade.house.vo.ApartmentHouseContractVo;
import com.isz.erp.facade.user.entity.SysDepart;
import com.isz.erp.facade.user.entity.SysDistrict;
import com.isz.erp.facade.user.entity.SysUser;
import com.isz.erp.facade.user.service.DepartService;
import com.isz.erp.facade.user.service.DistrictService;
import com.isz.erp.facade.user.service.RedisService;
import com.isz.erp.facade.user.service.UserService;
import com.isz.erp.facade.user.vo.SessionVo;
import com.isz.erp.house.mapper.ApartmentMapper;
import com.isz.erp.house.mapper.FollowMapper;
import com.isz.erp.house.mapper.HouseAuditStatusChangeMapper;
import com.isz.erp.house.mapper.HouseConfigurationMapper;
import com.isz.erp.house.mapper.HouseContractVoMapper;
import com.isz.erp.house.mapper.HouseDevelopConfigurationMapper;
import com.isz.erp.house.mapper.HouseDevelopImgMapper;
import com.isz.erp.house.mapper.HouseDevelopMapper;
import com.isz.erp.house.mapper.HouseDevelopRelationMapper;
import com.isz.erp.house.mapper.HouseGeneralContractVoMapper;
import com.isz.erp.house.mapper.HouseImgMapper;
import com.isz.erp.house.mapper.HouseLinkmanMapper;
import com.isz.erp.house.mapper.HouseLinkmanViewedMapper;
import com.isz.erp.house.mapper.HouseMapper;
import com.isz.erp.house.mapper.HouseRentMapper;
import com.isz.erp.house.mapper.HouseRentStatusActionMapper;
import com.isz.erp.house.mapper.HouseRolesChangeHistoryMapper;
import com.isz.erp.house.mapper.HouseWashMapper;
import com.isz.erp.house.mapper.ImageMapper;
import com.isz.erp.house.mapper.ResidentialBuildingFloorMapper;
import com.isz.erp.house.mapper.ResidentialBuildingMapper;
import com.isz.erp.house.mapper.ResidentialMapper;
import com.isz.erp.house.util.HttpClientUtil;
import com.isz.erp.service.comm.house.mapper.NewHouseStatusMapper;
import com.isz.erp.service.comm.house.service.officail.impl.HouseRentOfficailPersonImpl;

/**
 * @author WangShuo *
 * @version 1.0 *
 * @date 创建时间：2016年1月13日 下午2:55:58 *
 * @instruction 说明：
 */
@Service("houseServiceBiz")
public class HouseServiceBiz {

    @Autowired
    private HouseMapper houseMapper;

    @Autowired
    private HouseDevelopMapper houseDevelopMapper;

    @Autowired
    private HouseDevelopImgMapper houseDevelopImgMapper;

    @Autowired
    private HouseConfigurationMapper houseConfigurationMapper;

    @Autowired
    private HouseImgMapper houseImgMapper;

    @Autowired
    private HouseLinkmanMapper houseLinkmanMapper;

    @Autowired
    private HouseDevelopConfigurationMapper houseDevelopConfigurationMapper;

    @Autowired
    private HouseRentMapper houseRentMapper;
    
 
    @Autowired
    private NewHouseStatusMapper houseStatusMapper;

    @Autowired
    private HouseDevelopRelationMapper houseDevelopRelationMapper;

    @Autowired
    private HouseRentStatusActionMapper houseRentStatusActionMapper;

    @Autowired
    private FollowMapper followMapper;

    @Autowired
    private UserService userService;

    @Autowired
    private DepartService departService;

    @Autowired
    private HouseContractVoMapper houseContractVoMapper;

    @Autowired
    private HouseGeneralContractVoMapper houseGeneralContractVoMapper;

    @Autowired
    private ApartmentMapper apartmentMapper;

    @Autowired
    private HouseLinkmanViewedMapper houseLinkmanViewedMapper;

    @Autowired
    private FollowService followService;

    @Autowired
    private ResidentialMapper residentialMapper;

    @Autowired
    private ImageMapper imageMapper;

    @Autowired
    private ResidentialBuildingFloorMapper residentialBuildingFloorMapper;

    @Autowired
    private HouseRentOfficailPersonImpl houseRentOfficailPersonImpl;

    @Autowired
    private ResidentialBuildingMapper residentialBuildingMapper;

    @Autowired
    private HouseWashMapper houseWashMapper;
    
    @Autowired
    private HouseAuditStatusChangeMapper houseAuditStatusChangeMapper;
    
    @Autowired
    private HouseRolesChangeHistoryMapper houseRolesChangeHistoryMapper;
    
    @Autowired
    private HouseRolesBiz houseRolesBiz;
    @Autowired
    private HouseAuditStatusChangeBiz houseAuditStatusChangeBiz;
    /**
     * 新增普单时修改改房源信息
     *
     * @param map
     * @return
     */
    @SuppressWarnings("rawtypes")
    @Transactional
    public ResultMsg updateHouseFromGeneralContract(Map map) throws Exception {
        String houseId = (String) map.get("house_id");
        Double buildArea = (Double) map.get("build_area");
        String ringNum = (String) map.get("right_no");
        String updateUid = (String) map.get("update_uid");
        House houseOld = houseMapper.selectByPrimaryKey(houseId);
        SysUser sysUser = (SysUser) map.get("user");
        String followContent = "";
        if (houseOld.getBuild_area().doubleValue() != buildArea.doubleValue()) {
            followContent = "【新增普单时房屋面积修改：" + houseOld.getBuild_area().doubleValue() + "=>" + buildArea.doubleValue() + "】";
        }
        if (!ringNum.equals(houseOld.getRight_num())) {
            followContent = followContent + "【新增普单时产权证号修改：" + (StringUtil.isNullOrEmpty(houseOld.getRight_num()) ? "无" : houseOld.getRight_num()) + "=>" + ringNum + "】";
        }
        if (!updateUid.equals(houseOld.getUpdate_uid())) {
            followContent = followContent + "【新增普单时更新人uid修改：" + houseOld.getUpdate_uid() + "=>" + updateUid + "】";
        }

        if (followContent != "") {
            //跟进
            saveFollowbyMap(followContent, sysUser, houseId);
        }

        this.houseMapper.updateHouseFromGeneralContract(map);
        return ResultMsg.createOkMsg();
    }

    public void saveFollowbyMap(String followContent, SysUser sysUser, String houseId) {
        Follow follow = new Follow();
        follow.setObject_type(DictConstants.FollowObjectType.HOUSE.value());
        follow.setFollow_type(DictConstants.HouseFollowType.SYSTEMEDIT.value());
        follow.setFollow_content(followContent);
        follow.setFollow_open(DictConstants.YesNo.Y.value());
        followService.saveFollow(follow, sysUser);
        follow.setObject_id(houseId);

    }

    @Autowired
    private DistrictService districtService;

    @Autowired
    private RedisService redisService;

    /**
     * 根据楼盘id判断出租房源是否用了楼盘字典
     *
     * @param map
     * @return
     */
    public ResultObjectMsg<Integer> checkIsUseRedidential(@SuppressWarnings("rawtypes") Map map) throws Exception {
        return new ResultObjectMsg<Integer>(houseMapper.checkIsUseRedidential(map));
    }

    /**
     * 返回当前开发房源的配套实施列表
     *
     * @param house_develop_id
     * @return ResultObjectMsg<List<HouseDevelopConfiguration>>
     */
    public ResultObjectMsg<List<HouseDevelopConfiguration>> selectHouseDevelopConfigurationList(String house_develop_id) throws Exception {
        if (null == house_develop_id) {
            return new ResultObjectMsg<List<HouseDevelopConfiguration>>("缺少开发房源ID.");
        }
        return new ResultObjectMsg<List<HouseDevelopConfiguration>>(houseDevelopConfigurationMapper.selectListByHouseDevelopId(house_develop_id));
    }

    /**
     * 开发房源-保存
     *
     * @param houseDevelop TODO
     */
    @Transactional
    public ResultMsg saveHouseDevelop(SysUser sysUser, HouseDevelop houseDevelop) throws Exception {
        try {
        	if (StringUtil.isNullOrEmpty(houseDevelop.getContact_tel())) {
    		    return ResultMsg.createErrorMsg("请输入联系方式.");
    		}
    		if (houseDevelop.getContact_tel().length() < 8 || houseDevelop.getContact_tel().length() > 12) {
    		    return ResultMsg.createErrorMsg("请输入8~12位的联系方式.");
    		}
    		if (StringUtil.isNullOrEmpty(houseDevelop.getContact())) {
    		    return ResultMsg.createErrorMsg("请输入联系人姓名.");
    		}
    		if (StringUtil.isNullOrEmpty(houseDevelop.getCity_code())) {
    		    return ResultMsg.createErrorMsg("缺少市区.");
    		}
    		if (StringUtil.isNullOrEmpty(houseDevelop.getArea_code())) {
    		    return ResultMsg.createErrorMsg("缺少城区.");
    		}
    		if (StringUtil.isNullOrEmpty(houseDevelop.getResidential_name())) {
    		    return ResultMsg.createErrorMsg("缺少楼盘名称.");
    		}
    		if (StringUtil.isNullOrEmpty(houseDevelop.getBusiness_circle_id())) {
    		    return ResultMsg.createErrorMsg("缺少商圈.");
    		}
    		if (StringUtil.isNullOrEmpty(houseDevelop.getBuilding_name())) {
    		    return ResultMsg.createErrorMsg("缺少栋座名称【含后缀】.");
    		}
    		if (StringUtil.isNullOrEmpty(houseDevelop.getUnit())) {
    		    return ResultMsg.createErrorMsg("缺少单元.");
    		}
    		if (StringUtil.isNullOrEmpty(houseDevelop.getFloor())) {
    		    return ResultMsg.createErrorMsg("缺少楼层.");
    		}
    		if (houseDevelop.getFloor().startsWith("0")) {
    		    return ResultMsg.createErrorMsg("楼层不能以0开头.");
    		}
    		if (StringUtil.isNullOrEmpty(houseDevelop.getHouse_no())) {
    		    return ResultMsg.createErrorMsg("缺少具体房号.");
    		}
    		if (houseDevelop.getHouse_no().startsWith("0")) {
    		    return ResultMsg.createErrorMsg("房号不能以0开头.");
    		}
    		if (null == houseDevelop.getDid()) {
    		    return ResultMsg.createErrorMsg("请选择归属部门.");
    		}
    		if (null == houseDevelop.getUid()) {
    		    return ResultMsg.createErrorMsg("请选择归属人.");
    		}
            /*if (StringUtil.isNullOrEmpty(houseDevelop.getSource())) {
                return ResultMsg.createErrorMsg("请选择房屋来源.");
            }*/
            /*if (null == houseDevelop.getRooms() || null == houseDevelop.getLivings() || null == houseDevelop.getKitchens() || null == houseDevelop.getBathrooms() || null == houseDevelop.getBalconys()) {
                return ResultMsg.createErrorMsg("请完善户型.");
            }*/
            /*if (null == houseDevelop.getBuild_area()) {
                return ResultMsg.createErrorMsg("请输入面积.");
            }*/
            // 根据联系方式、市区、城区、楼盘名称、商圈名称、栋座、单元、层、号查询开发房源
//            HouseDevelop houseDevelopExits = houseDevelopMapper.getByHouseDevelop(houseDevelop);
            // 新建
            if (null == houseDevelop.getHouse_develop_id()) {
                // 根据楼盘ID、栋座ID、城、区、单元、层、房号查询house中是否已经存在
                // 判断开发房源中是否存在 2016-08-20
                if (!StringUtil.isNullOrEmpty(houseDevelop.getResidential_id()) && !StringUtil.isNullOrEmpty(houseDevelop.getBuilding_id())) {
                    House house = new House();
                    house.setResidential_id(houseDevelop.getResidential_id());
                    house.setBuilding_id(houseDevelop.getBuilding_id());
                    house.setCity_code(houseDevelop.getCity_code());
                    house.setUnit(houseDevelop.getUnit());
                    house.setHouse_no(houseDevelop.getHouse_no());
                    House houseRes = houseMapper.selectByHouse(house);
                    if (null != houseRes && !"".equals(houseRes.getHouse_id())) {
                        return ResultMsg.createErrorMsg("出租房源已经存在,房源编号:" + houseRes.getHouse_code() + " 房源状态:" + DicTools.getCnValue(DictConstants.HouseStatus.getDictId(), houseRes.getHouse_status()));
                    }
                }

                // 生成房源编号
                SysDistrict city = districtService.getByCode(houseDevelop.getCity_code());
                if (null == city || StringUtil.isNullOrEmpty(city.getAbridge())) {
                    return ResultMsg.createErrorMsg((null != city ? (city.getName() + "缺少汉语拼音.") : "市区不存在"));
                }
                SysDistrict area = districtService.getByCode(houseDevelop.getArea_code());
                if (null == area || StringUtil.isNullOrEmpty(area.getAbridge())) {
                    return ResultMsg.createErrorMsg((null != area ? (area.getName() + "缺少汉语拼音.") : "城区不存在"));
                }
                String house_code = redisService.getCode(CodeTypeConstants.HOUSE_DEVELOP_CODE);
                if (StringUtil.isNullOrEmpty(house_code)) {
                    return ResultMsg.createErrorMsg("redisService生成房源编号失败.");
                }
                houseDevelop.setHouse_code(BusinessCodeUtil.generateCode(city.getAbridge(), area.getAbridge(), house_code.trim()));
//                if (null != houseDevelopExits && !"".equals(houseDevelopExits.getHouse_develop_id())) {
//                    return ResultMsg.createErrorMsg("新增的开发房源已经存在.");
//                }
                // 主键
                houseDevelop.setHouse_develop_id(UuidUtil.getUUID());
                houseDevelop.setDeleted(0);
                houseDevelop.setAudit_status(DictConstants.AuditStatus.NO_AUDIT.value());
                houseDevelop.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                houseDevelop.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                houseDevelop.setCreate_uid(sysUser.getUser_id());
                houseDevelop.setUpdate_uid(sysUser.getUser_id());
                houseDevelopMapper.insertHouseDevelop(houseDevelop);

                // 保存关联关系--如果有则新增
                saveHouseDevelopImg(houseDevelop);
                saveHouseDevelopConfiguration(houseDevelop);
            } else {
                if (houseDevelop.getRemark() == null || houseDevelop.getRemark() == "") {
                    houseDevelop.setRemark("无");
                }
                // 编辑
                HouseDevelop houseDevelopOld = houseDevelopMapper.selectByHouseDevelopId(houseDevelop.getHouse_develop_id());
                if (null == houseDevelopOld) {
                    return ResultMsg.createErrorMsg("当前开发房源不存在.");
                }
//                if (null != houseDevelopExits && !"".equals(houseDevelopExits.getHouse_develop_id()) && !houseDevelopExits.getHouse_develop_id().equals(houseDevelop.getHouse_develop_id())) {
//                    return ResultMsg.createErrorMsg("修改后的开发房源已经存在.");
//                }
                if (StringUtil.isNullOrEmpty(houseDevelop.getUpdate_time())) {
                    return ResultMsg.createErrorMsg("缺少更新时间.");
                }
                if (!houseDevelop.getUpdate_time().equals(houseDevelopOld.getUpdate_time())) {
                    return ResultMsg.createErrorMsg("用户数据已经被其他用户更新，请返回重新编辑");
                }
                // 审核人 审核时间 审核状态不变
                houseDevelop.setAudit_uid(houseDevelopOld.getAudit_uid());
                houseDevelop.setAudit_time(houseDevelopOld.getAudit_time());
                houseDevelop.setAudit_status(houseDevelopOld.getAudit_status());

                houseDevelop.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                houseDevelop.setUpdate_uid(sysUser.getUser_id());
                // 非页面更新字段
                houseDevelop.setHouse_code(houseDevelopOld.getHouse_code());
                houseDevelop.setCreate_time(houseDevelopOld.getCreate_time());
                houseDevelop.setCreate_uid(houseDevelopOld.getCreate_uid());
                houseDevelopMapper.updateByPrimaryKeySelective(houseDevelop);
            }
            return ResultMsg.createOkMsg();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 开发房源-保存开发房源图片
     *
     * @param houseDevelop
     * @return ResultMsg
     */
    @Transactional
    public ResultMsg saveHouseDevelopImg(HouseDevelop houseDevelop) throws Exception {
        try {
            houseDevelopImgMapper.deleteByHouseDevelopId(houseDevelop.getHouse_develop_id());
            List<HouseDevelopImg> houseDevelopImgList = houseDevelop.getHouseDevelopImgList();
            if (null != houseDevelopImgList && houseDevelopImgList.size() > 0) {
                List<HouseDevelopImg> listSave = new ArrayList<HouseDevelopImg>();
                for (HouseDevelopImg houseDevelopImg : houseDevelopImgList) {
                    HouseDevelopImg img = new HouseDevelopImg();
                    // house_id
                    // 主键
                    img.setHouse_img_id(UuidUtil.getUUID());
                    img.setHouse_develop_id(houseDevelop.getHouse_develop_id());
                    img.setImg_id(houseDevelopImg.getImg_id());
                    img.setImg_name(houseDevelopImg.getImg_name());
                    img.setImg_type(houseDevelopImg.getImg_type());
                    img.setDeleted(0);
                    img.setSort(houseDevelopImg.getSort());
                    // create_id
                    img.setCreate_uid(houseDevelop.getUpdate_uid());
                    img.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                    listSave.add(img);
                }
                houseDevelopImgMapper.saveHouseDevelopImg(listSave);
            }
            return ResultMsg.createOkMsg();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 开发房源-保存开发房源房屋设备信息
     *
     * @param houseDevelop
     */
    @Transactional
    public ResultMsg saveHouseDevelopConfiguration(HouseDevelop houseDevelop) throws Exception {
        try {
            // 如果新增则受影响的行为0；如果修改则先删除后增加
            houseDevelopConfigurationMapper.deleteByHouseDevelopId(houseDevelop.getHouse_develop_id());
            List<HouseDevelopConfiguration> houseDevelopConfigurationList = houseDevelop.getHouseDevelopConfigurationList();
            if (null != houseDevelopConfigurationList && houseDevelopConfigurationList.size() > 0) {
                List<HouseDevelopConfiguration> listSave = new ArrayList<HouseDevelopConfiguration>();
                for (HouseDevelopConfiguration houseDevelopConfiguration : houseDevelopConfigurationList) {
                    HouseDevelopConfiguration configuration = new HouseDevelopConfiguration();
                    // house_id
                    // 主键
                    configuration.setConfiguration_id(UuidUtil.getUUID());
                    configuration.setHouse_develop_id(houseDevelop.getHouse_develop_id());
                    configuration.setConfiguration_code(houseDevelopConfiguration.getConfiguration_code());
                    // create_id
                    configuration.setCreate_uid(houseDevelop.getUpdate_uid());
                    configuration.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                    listSave.add(configuration);
                }
                houseDevelopConfigurationMapper.saveHouseDevelopConfiguration(listSave);
            }
            return ResultMsg.createOkMsg();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 开发房源-列表
     *
     * @param pageData
     * @return PagingHelper<HouseDevelop>
     */
    public ResultObjectMsg<PagingHelper<HouseDevelop>> searchHouseDevelopList(Map<String, Object> pageData) throws Exception {
        int page_num = ParameterUtil.getInt(pageData, "pageNumber", 1);
        int page_size = ParameterUtil.getInt(pageData, "pageSize", 10);


        //审核人
        if (null != pageData.get("audit_name_search")) {
            String audit_uid_search = houseDevelopMapper.searchuidLikeName((String) pageData.get("audit_name_search"));
            if (StringUtil.notNullOrEmpty(audit_uid_search)) {
                pageData.put("audit_name_search", audit_uid_search);
            }
            List<String> paraList = new ArrayList<>();
            paraList.add("audit_name_search");
            pageData = StringUtil.readAndWritePageData(pageData, paraList);
        }
        SessionVo sessionVo = (SessionVo) pageData.get("sessionVo");
        if (null != sessionVo) {
            SysUser sysUser = sessionVo.getSysUser();
            pageData.put("current_city_code", sysUser.getCurrent_city_code());
        }

        PagingHelper<HouseDevelop> ph = new PagingHelper<HouseDevelop>();
        ph.setPerPageSize(page_size);
        ph.setCurrentPage(page_num);

        pageData.put("begin_num", ph.getBeginRowNumber());
        pageData.put("end_num", ph.getEndRowNumber());

        List<HouseDevelop> list = houseDevelopMapper.searchHouseDevelopList(pageData);
        Integer count = houseDevelopMapper.countSearchHouseDevelop(pageData);

        ph.setTotal(count); // 设置总的记录数
        ph.setRows(list); // 设置返回的记录

        // 功能数据权限

        ResultObjectMsg<PagingHelper<HouseDevelop>> resultObjectMsg = new ResultObjectMsg<PagingHelper<HouseDevelop>>(ph);
        if (null != list && list.size() > 0) {
            for (HouseDevelop houseDevelop : list) {
                // 录入人 录入人所在部门
                if (null != houseDevelop && null != sessionVo) {
                    resultObjectMsg.setPar("HouseDevelopDelete" + houseDevelop.getHouse_develop_id(), sessionVo.isEnabled("HouseDevelopDelete", String.valueOf(houseDevelop.getCreate_dep_id()), String.valueOf(houseDevelop.getCreate_uid())) == true ? "" : "disabled");
                }
            }
        }

        return resultObjectMsg;
    }

    /**
     * 开发房源-详情
     *
     * @param house_develop_id
     * @return HouseDevelop
     */
    public ResultObjectMsg<HouseDevelop> selectHouseDevelopDetail(String house_develop_id) throws Exception {
        if (null == house_develop_id) {
            return new ResultObjectMsg<HouseDevelop>("缺少开发房源ID.");
        }
        HouseDevelop houseDevelop = houseDevelopMapper.selectByHouseDevelopId(house_develop_id);

        List<HouseDevelop> listp = houseDevelopMapper.selectByHouseDevelopAudit(house_develop_id);
        if (null != houseDevelop) {
            Map<String, Object> map = new HashMap<String, Object>();
            if (!StringUtil.isNullOrEmpty(houseDevelop.getResidential_id()) && !StringUtil.isNullOrEmpty(houseDevelop.getBuilding_id()) && !StringUtil.isNullOrEmpty(houseDevelop.getUnit_id())) {
                map.put("building_id", houseDevelop.getBuilding_id());
                map.put("unit_id", houseDevelop.getUnit_id());
                houseDevelop.setResidentialBuildingFloorList(residentialBuildingFloorMapper.selectListByMap(map));
            }
            houseDevelop.setHouseDevelopImgList(houseDevelop.getHouseDevelopImgList());
        }
        ResultObjectMsg<HouseDevelop> obj = new ResultObjectMsg<HouseDevelop>(houseDevelop);
        obj.setPar("listp", listp);
        return obj;
    }

    /**
     * 开发房源-删除
     *
     * @param sessionVo
     * @param house_develop_id
     */
    @Transactional
    public ResultMsg deleteHouseDevelop(SessionVo sessionVo, String house_develop_id) throws Exception {
        try {
            SysUser sysUser = sessionVo.getSysUser();
            if (null == sysUser) {
                return ResultMsg.createErrorMsg("登录用户不存在.");
            }
            if (null == house_develop_id) {
                return ResultMsg.createErrorMsg("缺少开发房源ID.");
            }
            // 判断开发房源与出租房源关系表中是否存在当前开发房源，如果存在，则不能删除
            HouseDevelopRelation houseDevelopRelationParam = new HouseDevelopRelation();
            houseDevelopRelationParam.setHouse_develop_id(house_develop_id);
            HouseDevelopRelation houseDevelopRelation = houseDevelopRelationMapper.selectByHouseDevelopRelation(houseDevelopRelationParam);
            if (null != houseDevelopRelation && null != houseDevelopRelation.getHouse_id()) {
                return ResultMsg.createErrorMsg("开发房源已激活，不能删除.");
            }
            // 更新开发房源删除状态和更新人及更新时间
            HouseDevelop houseDevelop = houseDevelopMapper.selectByHouseDevelopId(house_develop_id);
            // 功能数据权限
            if (null == houseDevelop) {
                return ResultMsg.createErrorMsg("要删除的用户数据不存在，请返回确认.");
            }
            if (!sessionVo.isEnabled("HouseDevelopDelete", String.valueOf(houseDevelop.getCreate_dep_id()), String.valueOf(houseDevelop.getCreate_uid()))) {
                return ResultMsg.createErrorMsg("缺少功能数据权限，请联系系统管理员.");
            }
            if (null != houseDevelop && houseDevelop.getDeleted() == 0) {
                // 删除开发房源配置、图片信息
                houseDevelopConfigurationMapper.deleteByHouseDevelopId(house_develop_id);
                houseDevelopImgMapper.deleteByHouseDevelopId(house_develop_id);
                // 更新开发房源数据
                houseDevelop.setDeleted(1);
                houseDevelop.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                houseDevelop.setUpdate_uid(sysUser.getUser_id());
                houseDevelopMapper.updateByPrimaryKeySelective(houseDevelop);
            }
            return ResultMsg.createOkMsg();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 开发房源-审核
     *
     * @param house
     */
    @Transactional
    public ResultMsg auditHouseDevelop(House house) throws Exception {
        try {
            HouseDevelop houseDevelop = houseDevelopMapper.selectByHouseDevelopId(house.getHouse_develop_id());
            if (null == houseDevelop || null == houseDevelop.getHouse_develop_id()) {
                return ResultMsg.createErrorMsg("开发房源不存在.");
            }
            if (!houseDevelop.getUpdate_time().equals(house.getUpdate_time())) {
                return ResultMsg.createErrorMsg("开发房源数据已被修改，请重新审核.");
            }
            // 开发房源
            if (DictConstants.AuditStatus.PASS.value().equals(houseDevelop.getAudit_status())) {
                return ResultMsg.createErrorMsg("开发房源已审核通过.");
            }
            // 1. 判断审核是通过还是未通过
            if (null != house.getAudit_status() && DictConstants.AuditStatus.PASS.value().equals(house.getAudit_status())) {
                // 2.校验
                // 必填项校验--生成联系人记录
                if (StringUtil.isNullOrEmpty(houseDevelop.getContact_tel())) {
                    return ResultMsg.createErrorMsg("联系方式不存在.");
                }
                if (StringUtil.isNullOrEmpty(houseDevelop.getContact())) {
                    return ResultMsg.createErrorMsg("联系人姓名不存在.");
                }
                // 出租房源信息
                if (StringUtil.isNullOrEmpty(house.getCity_code())) {
                    return ResultMsg.createErrorMsg("缺少市区.");
                }
                if (StringUtil.isNullOrEmpty(house.getArea_code())) {
                    return ResultMsg.createErrorMsg("缺少城区.");
                }
                if (StringUtil.isNullOrEmpty(house.getResidential_name()) || StringUtil.isNullOrEmpty(house.getResidential_id())) {
                    return ResultMsg.createErrorMsg("缺少楼盘.");
                }
                if (StringUtil.isNullOrEmpty(house.getBuilding_name()) || StringUtil.isNullOrEmpty(house.getBuilding_id())) {
                    return ResultMsg.createErrorMsg("缺少栋座.");
                }
                if (StringUtil.isNullOrEmpty(house.getUnit()) || StringUtil.isNullOrEmpty(house.getUnit_id())) {
                    return ResultMsg.createErrorMsg("缺少单元.");
                }
                if (StringUtil.isNullOrEmpty(house.getFloor()) || StringUtil.isNullOrEmpty(house.getFloor())) {
                    return ResultMsg.createErrorMsg("缺少楼层.");
                }
                if (house.getFloor().startsWith("0")) {
                    return ResultMsg.createErrorMsg("楼层不能以0开头.");
                }
                if (StringUtil.isNullOrEmpty(house.getHouse_no())) {
                    return ResultMsg.createErrorMsg("缺少房号.");
                }
                if (house.getHouse_no().startsWith("0")) {
                    return ResultMsg.createErrorMsg("房号不能以0开头.");
                }
                if (null == house.getRooms() || null == house.getLivings() || null == house.getKitchens() || null == house.getBathrooms() || null == house.getBalconys()) {
                    return ResultMsg.createErrorMsg("请完善户型.");
                }
                if (null == house.getBuild_area()) {
                    return ResultMsg.createErrorMsg("请输入面积.");
                }
                // 房源出租信息
                HouseRent houseRent = house.getHouseRent();
                if (null == houseRent) {
                    return ResultMsg.createErrorMsg("请完善房屋出租信息.");
                }
                if (StringUtil.isNullOrEmpty(houseRent.getHouse_status())) {
                    return ResultMsg.createErrorMsg("请选择房源状态.");
                }
                if (StringUtil.isNullOrEmpty(houseRent.getSource())) {
                    //return ResultMsg.createErrorMsg("请选择房屋来源.");
                	houseRent.setSource(DictConstants.HouseSource.OTHER.value());
                }
//                if (null == houseRent.getRental_price() || String.valueOf(houseRent.getRental_price()).length() > 8) {
//                    return ResultMsg.createErrorMsg("请输入小于8位的月租价.");
//                }
                if (null == houseRent.getBelong_did()) {
                   // return ResultMsg.createErrorMsg("请选择归属部门.");
                }
                if (null == houseRent.getBelong_uid()) {
                  //  return ResultMsg.createErrorMsg("请选择归属人.");
                }
                // 根据楼盘ID、栋座ID、城、区、单元、层、房号查询house中是否已经存在
                House houseRes = houseMapper.selectByHouse(house);
                if (null != houseRes && !"".equals(houseRes.getHouse_id())) {
                    return ResultMsg.createErrorMsg("出租房源已经存在,房源编号:" + houseRes.getHouse_code() + " 房源状态:" + DicTools.getCnValue(DictConstants.HouseStatus.getDictId(), houseRes.getHouse_status()));
                }
                // 3.新增house和house_rent
                SysDistrict city = districtService.getByCode(house.getCity_code());
                if (null == city || StringUtil.isNullOrEmpty(city.getAbridge())) {
                    return ResultMsg.createErrorMsg((null != city ? (city.getName() + "缺少汉语拼音.") : "市区不存在"));
                }
                SysDistrict area = districtService.getByCode(house.getArea_code());
                if (null == area || StringUtil.isNullOrEmpty(area.getAbridge())) {
                    return ResultMsg.createErrorMsg((null != area ? (area.getName() + "缺少汉语拼音.") : "城区不存在"));
                }
                String house_code = redisService.getCode(CodeTypeConstants.HOUSE_CODE);
                if (StringUtil.isNullOrEmpty(house_code)) {
                    return ResultMsg.createErrorMsg("redisService生成开发房源审核-出租房源编号失败.");
                }
                if (StringUtil.isNullOrEmpty(houseDevelop.getContact_tel())) {
                    return ResultMsg.createErrorMsg("开发房源缺少联系方式.");
                }
                if (houseDevelop.getContact_tel().length() < 8 || houseDevelop.getContact_tel().length() > 12) {
                    return ResultMsg.createErrorMsg("开发房源的联系方式应为8~12位.");
                }
                house.setHouse_code(BusinessCodeUtil.generateCode(city.getAbridge(), area.getAbridge(), house_code.trim()));
                // 主键
                house.setHouse_id(UuidUtil.getUUID());
                house.setRemark(houseRent.getRemark());
                house.setDeleted(0);
                house.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                house.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                // 物业地址
                Residential residential = residentialMapper.selectByPrimaryKey(house.getResidential_id());
                if (null == residential) {
                    return ResultMsg.createErrorMsg("楼盘不存在.");
                }
                ResidentialBuilding residentialBuilding = residentialBuildingMapper.selectByPrimaryKey(house.getBuilding_id());
                if (null == residentialBuilding) {
                    return ResultMsg.createErrorMsg("栋座不存在.");
                }
                house.setProperty_name(residential.getResidential_name() + residentialBuilding.getBuilding_name() + ("无".equals(house.getUnit()) ? "" : house.getUnit()) + house.getHouse_no() + "室");
                
                houseMapper.insertHouse(house);
                // 新增house_rent
//                if (DictConstants.HouseStatus.NONRENTED.value().equals(houseRent.getHouse_status())) {
//                    // 有效状态，设置激活时间
//                    houseRent.setActivated_time(DateUtil.getCurrentDateTimeAsString());
//                    houseRent.setCategory("HRENT");
//                } else if (DictConstants.HouseStatus.WAITING_RENT.value().equals(houseRent.getHouse_status())) {
//                    houseRent.setActivated_time(DateUtil.getCurrentDateTimeAsString());
//                    houseRent.setCategory("NOLIMIT");
//                }
                
                houseRent.setHouse_id(house.getHouse_id());
                houseRent.setResidential_id(house.getResidential_id());
                houseRent.setBuilding_id(house.getBuilding_id());
                houseRent.setDeleted(0);
                houseRent.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                houseRent.setCreate_uid(house.getUpdate_uid());
                houseRent.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                houseRent.setUpdate_uid(house.getUpdate_uid());
                
                //houseRent.setLease_type(house.getLease_type());
                //houseRent.setHis_rent_date(house.getHis_rent_date());
                
                //TODO
                houseRolesBiz.HouseDevelopAudit(house, houseRent, houseDevelop); 
                houseRentMapper.insertHouseRent(houseRent);
                
                /* 
                // 3.图片、配置、联系人
                // 图片和配套设施
                if (null != houseDevelop.getHouseDevelopImgList() && houseDevelop.getHouseDevelopImgList().size() > 0) {
                    List<HouseImg> houseImgList = new ArrayList<HouseImg>();
                    for (HouseDevelopImg houseDevelopImg : houseDevelop.getHouseDevelopImgList()) {
                        HouseImg houseImg = new HouseImg();
                        // 主键
                        houseImg.setHouse_img_id(UuidUtil.getUUID());
                        houseImg.setResidential_id(house.getResidential_id());
                        houseImg.setBuilding_id(house.getBuilding_id());
                        houseImg.setHouse_id(house.getHouse_id());
                        houseImg.setImg_id(houseDevelopImg.getImg_id());
                        houseImg.setImg_name(houseDevelopImg.getImg_name());
                        houseImg.setImg_type(houseDevelopImg.getImg_type());
                        houseImg.setDeleted(0);
                        houseImg.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                        houseImg.setCreate_uid(house.getCreate_uid());
                        houseImgList.add(houseImg);
                    }
                    houseImgMapper.saveHouseImg(houseImgList);
                }
                if (null != houseDevelop.getHouseDevelopConfigurationList() && houseDevelop.getHouseDevelopConfigurationList().size() > 0) {
                    List<HouseConfiguration> houseConfigurationList = new ArrayList<HouseConfiguration>();
                    for (HouseDevelopConfiguration houseDevelopConfiguration : houseDevelop.getHouseDevelopConfigurationList()) {
                        HouseConfiguration houseConfiguration = new HouseConfiguration();
                        // 主键
                        houseConfiguration.setConfiguration_id(UuidUtil.getUUID());
                        houseConfiguration.setResidential_id(house.getResidential_id());
                        houseConfiguration.setBuilding_id(house.getBuilding_id());
                        houseConfiguration.setHouse_id(house.getHouse_id());
                        houseConfiguration.setConfiguration_code(houseDevelopConfiguration.getConfiguration_code());
                        houseConfiguration.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                        houseConfiguration.setCreate_uid(house.getCreate_uid());
                        houseConfigurationList.add(houseConfiguration);
                    }
                    houseConfigurationMapper.saveHouseConfiguration(houseConfigurationList);
                }
                */
                // 联系人
                HouseLinkman houseLinkman = new HouseLinkman();

                houseLinkman.setMobile_phone_number(houseDevelop.getContact_tel());
                houseLinkman.setName(houseDevelop.getContact());
                saveHouseLinkman(house, houseLinkman);

                // 4.开发房源与出租房源关系
                HouseDevelopRelation houseDevelopRelation = new HouseDevelopRelation();
                houseDevelopRelation.setHouse_develop_id(houseDevelop.getHouse_develop_id());
                houseDevelopRelation.setHouse_id(house.getHouse_id());
                houseDevelopRelation.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                houseDevelopRelation.setCreate_uid(house.getUpdate_uid());
                houseDevelopRelationMapper.insertHouseDevelopRelation(houseDevelopRelation);

                // 5.增加一条系统根据
                saveFollow(house, "开发房源审核时系统跟进");

                // 6.记录出租房源操作状态日志
                // 房屋状态为无效-只新增一条房屋状态变更日志
                saveHouseRentStatusAction(houseRent, DictConstants.HouseStatusType.HOUSE.value());
                // 房屋状态为有效-再新增一条房屋激活状态变更日志
                if (DictConstants.HouseStatus.WAITING_RENT.equals(houseRent.getHouse_status())) {
                    saveHouseRentStatusAction(houseRent, DictConstants.HouseStatusType.ACTIVE.value());
                }
                
                //更新爱上房房源
                
                // 记录状态
                HouseAuditStatusChange houseAuditStatusChange=new HouseAuditStatusChange();
                houseAuditStatusChange.setChange_id(UuidUtil.getUUID());
                houseAuditStatusChange.setHouse_id(house.getHouse_id());
                houseAuditStatusChange.setApply_change_status(house.getHouse_status());
                houseAuditStatusChange.setAudit_uid(house.getUpdate_uid());
                houseAuditStatusChange.setAudit_date(DateUtil.getCurrentDateTimeAsString());
                houseAuditStatusChange.setAudit_status(house.getAudit_status());
                houseAuditStatusChange.setAudit_remark(house.getAudit_content());
                houseAuditStatusChange.setSave_change_status(houseRent.getHouse_status());
                houseAuditStatusChange.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                houseAuditStatusChange.setCreate_uid(house.getCreate_uid());
                houseAuditStatusChange.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                houseAuditStatusChange.setUpdate_uid(house.getCreate_uid());
                houseAuditStatusChangeMapper.insert(houseAuditStatusChange);
                
            }

            // 7.更新开发房源审核状态
            houseDevelop.setAudit_status(house.getAudit_status());
            houseDevelop.setAudit_time(DateUtil.getCurrentDateTimeAsString());
            houseDevelop.setAudit_uid(house.getUpdate_uid());//已经给当前登录的user_id放到house.create_uid
            houseDevelop.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
            houseDevelop.setUpdate_uid(house.getUpdate_uid());
            houseDevelop.setAudit_content(house.getAudit_content());
            
            houseDevelop.setHouse_status(house.getHouse_status());
            houseDevelop.setProperty_type(house.getProperty_type());
            houseDevelop.setProperty_use(house.getProperty_use());
            houseDevelop.setRooms(house.getRooms());
            houseDevelop.setLivings(house.getLivings());
            houseDevelop.setKitchens(house.getKitchens());
            houseDevelop.setBathrooms(house.getBathrooms());
            houseDevelop.setBalconys(house.getBalconys());
            houseDevelopMapper.updateByPrimaryKeySelective(houseDevelop);
           
            //洗盘/审核历史记录
            HouseWash houseWash=new HouseWash();
            houseWash.setWash_id(UuidUtil.getUUID());
            houseWash.setObject_type(HouseWashObjectTypeEnum.HOUSE_DEVELOP.getValue());
            houseWash.setHouse_develop_id(houseDevelop.getHouse_develop_id());
            houseWash.setHouse_id(house.getHouse_id());
            houseWash.setBefore_wish_audit_status(houseDevelop.getAudit_status());
            houseWash.setAfter_wish_audit_status(house.getAudit_status());
            houseWash.setCreate_time(DateUtil.getCurrentDateTimeAsString());
            houseWash.setCreate_uid(house.getCreate_uid());
            
            if(DictConstants.AuditStatus.PASS.value().equals(houseDevelop.getAudit_status())){
            	//记录房源状态
                houseWash.setAfter_wish_house_status(house.getHouse_status());
            	
	            //审核通过，将相同房源修改成 审核未通过
	            List<HouseDevelop>  list= houseDevelopMapper.selectHouseDevelopSimilarList(houseDevelop.getHouse_develop_id());
	            String house_develop_ids="";
	            for(int i=0;list!=null && i<list.size();i++){
	            	if(!houseDevelop.getHouse_develop_id().equals(list.get(i).getHouse_develop_id())){
	            		house_develop_ids+="'"+list.get(i).getHouse_develop_id()+"',";
	            	}
	            }
	            house_develop_ids = house_develop_ids.endsWith(",")?house_develop_ids.substring(0, house_develop_ids.length()-1):house_develop_ids;
	            if(house_develop_ids.length()>0){
	            	Map<String,String> map=new HashMap<String,String>();
	            	map.put("house_develop_ids", house_develop_ids);
	            	map.put("audit_uid", houseDevelop.getAudit_uid());
	            	houseDevelopMapper.updateHouseDevelopSimilar(map);
	            }
            }
            houseWashMapper.insert(houseWash);
            
            //爱上房的房源 需要反馈审核结果
            
            return ResultMsg.createOkMsg();
        } catch (Exception e) {
        	e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    /**
     * 保存出租房源状态变更日志
     *
     * @param houseRent
     * @param statusType
     */
    @Transactional
    private void saveHouseRentStatusAction(HouseRent houseRent, String statusType) throws Exception {
        HouseRentStatusAction houseRentStatusAction = new HouseRentStatusAction();
        // 主键
        houseRentStatusAction.setAction_id(UuidUtil.getUUID());
        houseRentStatusAction.setHouse_id(houseRent.getHouse_id());
        houseRentStatusAction.setStatus_value(houseRent.getHouse_status());
        houseRentStatusAction.setStatus_type(statusType);
        houseRentStatusAction.setOperat_uid(houseRent.getUpdate_uid());
        houseRentStatusAction.setOperat_time(DateUtil.getCurrentDateTimeAsString());
        houseRentStatusActionMapper.insertHouseRentStatusAction(houseRentStatusAction);
    }

    /**
     * 开发房源审核时添加房屋联系人
     *
     * @param house
     * @param houseLinkman
     * @throws Exception
     */
    @Transactional
    private void saveHouseLinkman(House house, HouseLinkman houseLinkman) throws Exception {
        houseLinkman.setResidential_id(house.getResidential_id());
        houseLinkman.setBuilding_id(house.getBuilding_id());
        houseLinkman.setHouse_id(house.getHouse_id());
        houseLinkman.setGender(null);
        houseLinkman.setRemark("开发房源审核时添加出租房源联系人");
        houseLinkman.setDeleted(0);
        houseLinkman.setCreate_time(DateUtil.getCurrentDateTimeAsString());
        houseLinkman.setCreate_uid(house.getUpdate_uid());
        houseLinkman.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
        houseLinkman.setUpdate_uid(house.getUpdate_uid());
        List<HouseLinkman> houseLinkmanList = new ArrayList<HouseLinkman>();
        houseLinkmanList.add(houseLinkman);
        house.setHouseLinkmanList(houseLinkmanList);
        saveHouseLinkman(house);
    }

    /**
     * 开发房源图片-分页列表
     *
     * @param pageData
     * @return ResultObjectMsg<PagingHelper<HouseDevelopImg>>
     */
    public ResultObjectMsg<PagingHelper<HouseDevelopImg>> searchHouseDevelopImgList(Map<String, Object> pageData) throws Exception {
        int page_num = ParameterUtil.getInt(pageData, "pageNumber", 1);
        int page_size = ParameterUtil.getInt(pageData, "pageSize", 10);

        PagingHelper<HouseDevelopImg> ph = new PagingHelper<HouseDevelopImg>();
        ph.setPerPageSize(page_size);
        ph.setCurrentPage(page_num);

        pageData.put("begin_num", ph.getBeginRowNumber());
        pageData.put("end_num", ph.getEndRowNumber());

        List<HouseDevelopImg> list = houseDevelopImgMapper.searchHouseDevelopImgList(pageData);
        Integer count = houseDevelopImgMapper.countSearchHouseDevelopImg(pageData);

        ph.setTotal(count); // 设置总的记录数
        ph.setRows(list); // 设置返回的记录
        return new ResultObjectMsg<PagingHelper<HouseDevelopImg>>(ph);
    }

    /**
     * 开发房源图片-不分页列表
     *
     * @param pageData
     * @return ResultObjectMsg<List<HouseDevelopImg>>
     */
    public ResultObjectMsg<List<HouseDevelopImg>> selectHouseDevelopImgList(Map<String, Object> pageData) throws Exception {
        if (null == pageData || null == pageData.get("house_develop_id")) {
            return new ResultObjectMsg<List<HouseDevelopImg>>("缺少开发房源ID");
        }
        return new ResultObjectMsg<List<HouseDevelopImg>>(houseDevelopImgMapper.searchHouseDevelopImgList(pageData));
    }

    /**
     * 开发房源图片-新增
     *
     * @param houseDevelopImg
     */
    @Transactional
    public ResultMsg addHouseDevelopImg(HouseDevelopImg houseDevelopImg) throws Exception {
        try {
            // 主键
            houseDevelopImg.setHouse_img_id(UuidUtil.getUUID());
            houseDevelopImg.setDeleted(0);
            houseDevelopImg.setCreate_time(DateUtil.getCurrentDateTimeAsString());
            houseDevelopImgMapper.insertHouseDevelopImg(houseDevelopImg);
            return ResultMsg.createOkMsg();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 开发房源图片-删除
     *
     * @param house_img_id
     */
    @Transactional
    public ResultMsg deleteHouseDevelopImg(String house_img_id) throws Exception {
        try {
            houseDevelopImgMapper.deleteByHouseImgId(house_img_id);
            return ResultMsg.createOkMsg();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 返回出租房源配套设施
     *
     * @param house_id
     * @return ResultObjectMsg<List<HouseConfiguration>>
     */
    public ResultObjectMsg<List<HouseConfiguration>> selectHouseConfigurationList(String house_id) throws Exception {
        return new ResultObjectMsg<List<HouseConfiguration>>(houseConfigurationMapper.selectListByHouseId(house_id));
    }

    /**
     * 楼盘房屋信息-保存
     *
     * @param sessionVo
     * @param house
     */
    @Transactional
    public ResultObjectMsg<House> saveHouse(SessionVo sessionVo, House house) throws Exception {
        try {
            ResultObjectMsg<House> resultObjectMsg = new ResultObjectMsg<House>(house);
            SysUser sysUser = sessionVo.getSysUser();
            // 1.必填项校验：出租房源信息
            if (StringUtil.isNullOrEmpty(house.getCity_code())) {
                return resultObjectMsg.createErrorMsg("缺少市区.");
            }
            if (StringUtil.isNullOrEmpty(house.getArea_code())) {
                return resultObjectMsg.createErrorMsg("缺少城区.");
            }
            if (null == house.getRooms() || null == house.getLivings() || null == house.getKitchens() || null == house.getBathrooms() || null == house.getBalconys()) {
                return resultObjectMsg.createErrorMsg("请完善户型.");
            }
            if (null == house.getBuild_area()) {
                return resultObjectMsg.createErrorMsg("请输入面积.");
            }
            // 房源出租信息
            HouseRent houseRent = house.getHouseRent();
            if (null == houseRent) {
                return resultObjectMsg.createErrorMsg("请完善房屋出租信息.");
            }
            if (StringUtil.isNullOrEmpty(houseRent.getHouse_status())) {
                return resultObjectMsg.createErrorMsg("请选择房源状态.");
            }

//            if(StringUtil.isNullOrEmpty(houseRent.getCategory())){
//                return resultObjectMsg.createErrorMsg("请选择房源类别.");
//            }

            if (StringUtil.isNullOrEmpty(houseRent.getSource())) {
                return resultObjectMsg.createErrorMsg("请选择房屋来源.");
            }
            if (null == houseRent.getRental_price() || String.valueOf(houseRent.getRental_price()).length() > 8) {
                return resultObjectMsg.createErrorMsg("请输入小于8位的月租价.");
            }
       /*     if (null == houseRent.getBelong_did()) {
                return resultObjectMsg.createErrorMsg("请选择归属部门.");
            }
            if (null == houseRent.getBelong_uid()) {
                return resultObjectMsg.createErrorMsg("请选择归属人.");
            }
            if (null == houseRent.getBelong_uid()) {
                return resultObjectMsg.createErrorMsg("请选择归属人.");
            }*/
            // 根据楼盘ID、栋座ID、城、区、单元、层、房号查询house中是否已经存在
            House houseRes = houseMapper.selectByHouse(house);
            // 21.新建
            if (null == house.getHouse_id()) {
                if (StringUtil.isNullOrEmpty(house.getResidential_name()) || StringUtil.isNullOrEmpty(house.getResidential_id())) {
                    return resultObjectMsg.createErrorMsg("缺少楼盘.");
                }
                if (StringUtil.isNullOrEmpty(house.getBuilding_name()) || StringUtil.isNullOrEmpty(house.getBuilding_id())) {
                    return resultObjectMsg.createErrorMsg("缺少栋座.");
                }
                if (StringUtil.isNullOrEmpty(house.getUnit()) || StringUtil.isNullOrEmpty(house.getUnit_id())) {
                    return resultObjectMsg.createErrorMsg("缺少单元.");
                }
                if (StringUtil.isNullOrEmpty(house.getFloor()) || StringUtil.isNullOrEmpty(house.getFloor())) {
                    return resultObjectMsg.createErrorMsg("缺少楼层.");
                }
                if (house.getFloor().startsWith("0")) {
                    return resultObjectMsg.createErrorMsg("楼层不能以0开头.");
                }
                if (StringUtil.isNullOrEmpty(house.getHouse_no())) {
                    return resultObjectMsg.createErrorMsg("缺少房号.");
                }
                if (house.getHouse_no().startsWith("0")) {
                    return resultObjectMsg.createErrorMsg("房号不能以0开头.");
                }
                if (null == house.getHouseLinkmanList() || house.getHouseLinkmanList().size() <= 0) {
                    return resultObjectMsg.createErrorMsg("请添加联系人.");
                }
                if (null != houseRes && StringUtil.notNullOrEmpty(houseRes.getHouse_id())) {
                    return resultObjectMsg.createErrorMsg("出租房源已经存在,房源编号:" + houseRes.getHouse_code() + " 房源状态:" + DicTools.getCnValue(DictConstants.HouseStatus.getDictId(), houseRes.getHouse_status()));
                }

                for (HouseLinkman houseLinkman : house.getHouseLinkmanList()) {
                    if (null == houseLinkman.getMobile_phone_number()) {
                        return resultObjectMsg.createErrorMsg("电话不能为空.");
                    } else if (!PhoneValidateUtil.isMobileOrPhone(houseLinkman.getMobile_phone_number())) {
                        return resultObjectMsg.createErrorMsg("电话格式不正确.");
                    }
                }

                // 22.新增house和house_rent
                SysDistrict city = districtService.getByCode(house.getCity_code());
                if (null == city || StringUtil.isNullOrEmpty(city.getAbridge())) {
                    return resultObjectMsg.createErrorMsg((null != city ? (city.getName() + "缺少汉语拼音.") : "市区不存在"));
                }
                SysDistrict area = districtService.getByCode(house.getArea_code());
                if (null == area || StringUtil.isNullOrEmpty(area.getAbridge())) {
                    return resultObjectMsg.createErrorMsg((null != area ? (area.getName() + "缺少汉语拼音.") : "城区不存在"));
                }
                String house_code = redisService.getCode(CodeTypeConstants.HOUSE_CODE);
                if (StringUtil.isNullOrEmpty(house_code)) {
                    return resultObjectMsg.createErrorMsg("redisService生成出租房源编号失败.");
                }

                house.setHouse_code(BusinessCodeUtil.generateCode(city.getAbridge(), area.getAbridge(), house_code));
                // 主键
                house.setHouse_id(UuidUtil.getUUID());
                house.setDeleted(0);
                house.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                house.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                house.setCreate_uid(sysUser.getUser_id());
                house.setUpdate_uid(sysUser.getUser_id());
                Residential residential = residentialMapper.selectByPrimaryKey(house.getResidential_id());
                if (null == residential) {
                    return resultObjectMsg.createErrorMsg("楼盘不存在.");
                }
                ResidentialBuilding residentialBuilding = residentialBuildingMapper.selectByPrimaryKey(house.getBuilding_id());
                if (null == residentialBuilding) {
                    return resultObjectMsg.createErrorMsg("栋座不存在.");
                }
                house.setProperty_name(residential.getResidential_name() + residentialBuilding.getBuilding_name() + ("无".equals(house.getUnit()) ? "" : house.getUnit()) + house.getHouse_no() + "室");
                houseMapper.insertHouse(house);
                HouseRent houseRentOld = houseRentMapper.selectByHouseId(house.getHouse_id());
                if (null != houseRentOld && !"".equals(houseRentOld.getHouse_id())) {
                    throw new RuntimeException("房屋ID已存在，请对比数据后重新操作");
                }
                // 新增house_rent
                if (DictConstants.HouseStatus.WAITING_RENT.value().equals(houseRent.getHouse_status())) {
                    // 有效状态，设置激活时间
                    houseRent.setActivated_time(DateUtil.getCurrentDateTimeAsString());
                }
                houseRent.setHouse_id(house.getHouse_id());
                houseRent.setResidential_id(house.getResidential_id());
                houseRent.setBuilding_id(house.getBuilding_id());
                houseRent.setDeleted(0);
                houseRent.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                houseRent.setCreate_uid(house.getUpdate_uid());
                houseRent.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                houseRent.setUpdate_uid(house.getUpdate_uid());
                houseRentMapper.insertHouseRent(houseRent);

                // 23.保存配套设施、图片 、联系人
                saveHouseConfiguration(house, "insert");
                saveHouseImg(house);
                saveHouseLinkman(house);

                // 24.增加一条系统根据
                saveFollow(house, "新增出租房源时系统跟进");

                // 25.记录出租房源操作状态日志
                // 房屋状态为非有效-只新增一条房屋状态变更日志
                saveHouseRentStatusAction(houseRent, DictConstants.HouseStatusType.HOUSE.value());
                // 房屋状态为有效-再新增一条房屋激活状态变更日志
                if (DictConstants.HouseStatus.WAITING_RENT.value().equals(houseRent.getHouse_status())) {
                    saveHouseRentStatusAction(houseRent, DictConstants.HouseStatusType.ACTIVE.value());
                }
                houseRentOfficailPersonImpl.configOfficailPerson(houseRent.getHouse_id());
            } else {
                if (StringUtil.isNullOrEmpty(house.getHouse_id()) && houseRes.getHouse_id() == house.getHouse_id()) {
                    return resultObjectMsg.createErrorMsg("出租房源已经存在,房源编号为" + houseRes.getHouse_code() + ".");
                }
                //当备注、看房备注改为null或者空字符是修改为无
                if (StringUtil.isNullOrEmpty(houseRent.getRemark())) {
                    houseRent.setRemark("无");
                }
                if (StringUtil.isNullOrEmpty(houseRent.getLook_remark())) {
                    houseRent.setLook_remark("无");
                }

                // 31.编辑
                House houseOld = houseMapper.selectByPrimaryKey(house.getHouse_id());
                List<HouseLinkman> houseLinkmanList = houseLinkmanMapper.selectListByHouseId(house.getHouse_id());
                if (null == houseLinkmanList || houseLinkmanList.size() <= 0) {
                    return resultObjectMsg.createErrorMsg("请添加联系人后再保存.");
                }
                if (null == houseOld) {
                    return resultObjectMsg.createErrorMsg("当前出租房源房源信息数据不存在.");
                }
                if (StringUtil.isNullOrEmpty(house.getUpdate_time())) {
                    return resultObjectMsg.createErrorMsg("缺少更新时间.");
                }
                if (!house.getUpdate_time().equals(houseOld.getUpdate_time())) {
                    return resultObjectMsg.createErrorMsg("用户数据已经被其他用户更新，请返回重新编辑.");
                }
                HouseRent houseRentOld = houseRentMapper.selectByHouseId(house.getHouse_id());
                if (null == houseRentOld) {
                    return resultObjectMsg.createErrorMsg("出租房源不存在.");
                }
                houseOld.setHouseRent(houseRentOld);

                // 数据权限---没有权限将原来的数据覆盖修改的数据
                // 公共信息权限--管理资料房源、开发自营房源、无效房源
                if (("manageHouseResource".equals(house.getFrom_src()) && !sessionVo.isEnabled("manageHouseResourceHouseRentSavePulic", String.valueOf(houseRentOld.getBelong_did()), String.valueOf(houseRentOld.getBelong_uid())))
                        || ("devHouseResource".equals(house.getFrom_src()) && !sessionVo.isEnabled("devHouseHouseRentSavePulic", String.valueOf(houseRentOld.getBelong_did()), String.valueOf(houseRentOld.getBelong_uid())))
                        || ("invalidHouseResource".equals(house.getFrom_src()) && !sessionVo.isEnabled("invalidHouseRentSavePulic", String.valueOf(houseRentOld.getBelong_did()), String.valueOf(houseRentOld.getBelong_uid())))) {
                    house.setProperty_use(houseOld.getProperty_use());
                    house.setProperty_type(houseOld.getProperty_type());
                    house.setRooms(houseOld.getRooms());
                    house.setLivings(houseOld.getLivings());
                    house.setKitchens(houseOld.getKitchens());
                    house.setBathrooms(houseOld.getBathrooms());
                    house.setBuild_area(houseOld.getBuild_area());
                    house.setOrientation(houseOld.getOrientation());
                    house.setFitment_type(houseOld.getFitment_type());
                    house.getHouseRent().setNow_status(houseOld.getHouseRent().getNow_status());
                    house.setHouse_status(houseOld.getHouse_status());
                    house.setLook_type(houseOld.getLook_type());
                    house.setLook_date(houseOld.getLook_date());
                    house.getHouseRent().setLook_remark(houseOld.getHouseRent().getLook_remark());
                    house.setSource(houseOld.getSource());
                    house.setRemark(houseOld.getRemark());
                }
                //如果房源状态从无效改变，则将拓房人设置为当前用户
                if(!houseOld.getHouseRent().getHouse_status().equals(house.getHouse_status())&&!house.getHouse_status().equals("INVALID")){
                	houseRent.setCultivation_uid(sysUser.getUser_id());
                	houseRent.setCultivation_time(DateUtil.getCurrentDateTimeAsString());
                    //如果房源状态改变为业主待租状态，则激活人设置为当前用户
                	if(house.getHouse_status().equals("WAITING_RENT")){
                		houseRent.setActivated_uid(sysUser.getUser_id());
                		houseRent.setActivated_time(DateUtil.getCurrentDateTimeAsString());
                	}
                	
                }
                // 归属信息
                if (!sessionVo.isEnabled("HouseRentSaveBelong", String.valueOf(houseRentOld.getBelong_did()), String.valueOf(houseRentOld.getBelong_uid()))) {
                    // house.getHouseRent().setRental_price(houseOld.getHouseRent().getRental_price());
                    /*house.getHouseRent().setBelong_uid(houseOld.getHouseRent().getBelong_uid());
                    house.getHouseRent().setBelong_did(houseOld.getHouseRent().getBelong_did());*/
                }
                house.getHouseRent().setBelong_uid(houseRent.getBelong_uid());
                house.getHouseRent().setBelong_did(houseRent.getBelong_did());
                // house
                house.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                house.setUpdate_uid(sysUser.getUser_id());
                houseMapper.updateByPrimaryKeySelective(house);
                // house_rent
                if (!DictConstants.HouseStatus.WAITING_RENT.value().equals(houseRentOld.getHouse_status()) && DictConstants.HouseStatus.WAITING_RENT.value().equals(houseRent.getHouse_status())) {
                    // 有效状态，设置激活时间
                    houseRent.setActivated_time(DateUtil.getCurrentDateTimeAsString());
                }
                houseRent.setHouse_id(house.getHouse_id());
                houseRent.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                houseRent.setUpdate_uid(house.getUpdate_uid());
//                if (StringUtil.isNullOrEmpty(houseRent.getCategory())) {
//                    houseRent.setCategory(" ");
//                }
                houseRentMapper.updateByPrimaryKeySelective(houseRent);
                this.houseStatusMapper.updateHouseCategoryById(houseRent.getHouse_id(), houseRent.getCategory(), sysUser.getUser_id());

                // 详情的跟进不作同一处理

                // 32.保存关联关系--如果有则更新(根据是否在更新房屋的同时更新关联配置、图片 、联系人而定)--先删除后新增
                // houseLinkmanMapper.deleteByHouseId(house.getHouse_id());
                // saveHouseLinkman(house);

                // 33.出租房屋信息发生变化时生成一条系统跟进
                saveFollow(house, followContentByEditHouse(house, houseOld, houseRentOld));

                // 34.记录出租房源操作状态日志
                // 房屋状态为非有效-只新增一条房屋状态变更日志
                saveHouseRentStatusAction(houseRent, DictConstants.HouseStatusType.HOUSE.value());
                // 房屋状态为有效-再新增一条房屋激活状态变更日志
                if (StringUtil.isNullOrEmpty(houseRentOld.getActivated_time()) && DictConstants.HouseStatus.WAITING_RENT.value().equals(houseRent.getHouse_status())) {
                    saveHouseRentStatusAction(houseRent, DictConstants.HouseStatusType.ACTIVE.value());
                }
                
                //审核 修改房源状态
                if(house.getChange_id()!=null){
                	Map<String ,Object> pageData=new HashMap<String,Object>();
                	pageData.put("houseRent", houseRent);
                	pageData.put("house", house);
                	pageData.put("sessionVo", sessionVo);
                	houseAuditStatusChangeBiz.auditHouseStatusChange(pageData);
                }
            }
            return resultObjectMsg.createOkMsg();
        } catch (Exception e) {
        	e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    public String followContentByEditHouse(House house, House houseOld, HouseRent houseRentOld) throws Exception {
        StringBuffer follow_content = new StringBuffer();
        if (null != house && null != houseOld) {
            if (!StringUtil.isNullOrEmpty(house.getUnit()) && !house.getUnit().equals(houseOld.getUnit())) {
                follow_content.append("【单元:" + houseOld.getUnit() + "=>" + house.getUnit() + "】");
            }
            if (!StringUtil.isNullOrEmpty(house.getFloor()) && !house.getFloor().equals(houseOld.getFloor())) {
                follow_content.append("【楼层:" + houseOld.getFloor() + "=>" + house.getFloor() + "】");
            }
            if (!StringUtil.isNullOrEmpty(house.getHouse_no()) && !house.getHouse_no().equals(houseOld.getHouse_no())) {
                follow_content.append("【房号:" + houseOld.getHouse_no() + "=>" + house.getHouse_no() + "】");
            }
            if (null != house.getRooms() && null != houseOld.getRooms() && house.getRooms().intValue() != houseOld.getRooms().intValue()) {
                follow_content.append("【户型:" + houseOld.getRooms().intValue() + "室=>" + house.getRooms().intValue() + "室" + "】");
            }
            if (null != house.getLivings() && null != houseOld.getLivings() && house.getLivings().intValue() != houseOld.getLivings().intValue()) {
                follow_content.append("【户型:" + houseOld.getLivings().intValue() + "厅=>" + house.getLivings().intValue() + "厅" + "】");
            }
            if (null != house.getKitchens() && null != houseOld.getKitchens() && house.getKitchens().intValue() != houseOld.getKitchens().intValue()) {
                follow_content.append("【户型:" + houseOld.getKitchens().intValue() + "厨=>" + house.getKitchens().intValue() + "厨" + "】");
            }
            if (null != house.getBathrooms() && null != houseOld.getBathrooms() && house.getBathrooms().intValue() != houseOld.getBathrooms().intValue()) {
                follow_content.append("【户型:" + houseOld.getBathrooms().intValue() + "卫=>" + house.getBathrooms().intValue() + "卫" + "】");
            }
            if (null != house.getBalconys() && null != houseOld.getBalconys() && house.getBalconys().intValue() != houseOld.getBalconys().intValue()) {
                follow_content.append("【户型:" + houseOld.getBalconys().intValue() + "阳台=>" + house.getBalconys().intValue() + "阳台" + "】");
            }
            if (null != house.getBuild_area() && null != houseOld.getBuild_area() && house.getBuild_area().doubleValue() != houseOld.getBuild_area().doubleValue()) {
                follow_content.append("【面积:" + houseOld.getBuild_area().doubleValue() + "平米=>" + house.getBuild_area().doubleValue() + "平米" + "】");
            }
            if (!StringUtil.isNullOrEmpty(house.getOrientation()) && !house.getOrientation().equals(houseOld.getOrientation())) {
                follow_content.append("【朝向:" + this.getCnValue(DictConstants.Orientation.getDictId(), houseOld.getOrientation()) + "=>" + this.getCnValue(DictConstants.Orientation.getDictId(), house.getOrientation()) + "】");
            } else if (!StringUtil.isNullOrEmpty(houseOld.getOrientation()) && !houseOld.getOrientation().equals(house.getOrientation())) {
                follow_content.append("【朝向:" + this.getCnValue(DictConstants.Orientation.getDictId(), houseOld.getOrientation()) + "=>" + this.getCnValue(DictConstants.Orientation.getDictId(), house.getOrientation()) + "】");
            }
            if (!StringUtil.isNullOrEmpty(house.getProperty_type()) && !house.getProperty_type().equals(houseOld.getProperty_type())) {
                follow_content.append("【物业类型:" + this.getCnValue(DictConstants.HouseRentPropertyType.getDictId(), houseOld.getProperty_type()) + "=>" + this.getCnValue(DictConstants.HouseRentPropertyType.getDictId(), house.getProperty_type()) + "】");
            } else if (!StringUtil.isNullOrEmpty(houseOld.getProperty_type()) && !houseOld.getProperty_type().equals(house.getProperty_type())) {
                follow_content.append("【物业类型:" + this.getCnValue(DictConstants.HouseRentPropertyType.getDictId(), houseOld.getProperty_type()) + "=>" + this.getCnValue(DictConstants.HouseRentPropertyType.getDictId(), house.getProperty_type()) + "】");
            }
            if (!StringUtil.isNullOrEmpty(house.getProperty_use()) && !house.getProperty_use().equals(houseOld.getProperty_use())) {
                follow_content.append("【物业用途:" + this.getCnValue(DictConstants.HousePropertyUse.getDictId(), houseOld.getProperty_use()) + "=>" + this.getCnValue(DictConstants.HousePropertyUse.getDictId(), house.getProperty_use()) + "】");
            } else if (!StringUtil.isNullOrEmpty(houseOld.getProperty_use()) && !houseOld.getProperty_use().equals(house.getProperty_use())) {
                follow_content.append("【物业用途:" + this.getCnValue(DictConstants.HousePropertyUse.getDictId(), houseOld.getProperty_use()) + "=>" + this.getCnValue(DictConstants.HousePropertyUse.getDictId(), house.getProperty_use()) + "】");
            }
            if (!StringUtil.isNullOrEmpty(house.getProperty_right()) && !house.getProperty_right().equals(houseOld.getProperty_right())) {
                follow_content.append("【产权属性:" + this.getCnValue(DictConstants.PropertyRight.getDictId(), houseOld.getProperty_right()) + "=>" + this.getCnValue(DictConstants.PropertyRight.getDictId(), house.getProperty_right()) + "】");
            } else if (!StringUtil.isNullOrEmpty(houseOld.getProperty_right()) && !houseOld.getProperty_right().equals(house.getProperty_right())) {
                follow_content.append("【产权属性:" + this.getCnValue(DictConstants.PropertyRight.getDictId(), houseOld.getProperty_right()) + "=>" + this.getCnValue(DictConstants.PropertyRight.getDictId(), house.getProperty_right()) + "】");
            }
            if (!StringUtil.isNullOrEmpty(house.getFitment_type()) && !house.getFitment_type().equals(houseOld.getFitment_type())) {
                follow_content.append("【装修情况:" + this.getCnValue(DictConstants.FitmentType.getDictId(), houseOld.getFitment_type()) + "=>" + this.getCnValue(DictConstants.FitmentType.getDictId(), house.getFitment_type()) + "】");
            } else if (!StringUtil.isNullOrEmpty(houseOld.getFitment_type()) && !houseOld.getFitment_type().equals(house.getFitment_type())) {
                follow_content.append("【装修情况:" + this.getCnValue(DictConstants.FitmentType.getDictId(), houseOld.getFitment_type()) + "=>" + this.getCnValue(DictConstants.FitmentType.getDictId(), house.getFitment_type()) + "】");
            }
            /*if (!StringUtil.isNullOrEmpty(house.getRemark()) && !house.getRemark().equals(houseOld.getRemark())) {
                follow_content.append("房屋备注:" + (null == houseOld.getRemark() ? "" : houseOld.getRemark()) + "=>" + house.getRemark() + "】");
            } else if (!StringUtil.isNullOrEmpty(houseOld.getRemark()) && !houseOld.getRemark().equals(house.getRemark())) {
                follow_content.append("房屋备注:" + houseOld.getRemark() + "=>" + house.getRemark() + "】");
            }*/
        }
        if (null != house.getHouseRent() && null != houseRentOld) {
            if (!StringUtil.isNullOrEmpty(house.getHouseRent().getHouse_status()) && !house.getHouseRent().getHouse_status().equals(houseRentOld.getHouse_status())) {
                follow_content.append("【房源状态:" + this.getCnValue(DictConstants.HouseStatus.getDictId(), houseRentOld.getHouse_status()) + "=>" + this.getCnValue(DictConstants.HouseStatus.getDictId(), house.getHouseRent().getHouse_status()) + "】");
            }
            if (!StringUtil.isNullOrEmpty(house.getHouseRent().getSource()) && !house.getHouseRent().getSource().equals(houseRentOld.getSource())) {
                follow_content.append("【房屋来源:" + this.getCnValue(DictConstants.HouseSource.getDictId(), houseRentOld.getSource()) + "=>" + this.getCnValue(DictConstants.HouseSource.getDictId(), house.getHouseRent().getSource()) + "】");
            }
            if (!StringUtil.isNullOrEmpty(house.getHouseRent().getLook_type()) && !house.getHouseRent().getLook_type().equals(houseRentOld.getLook_type())) {
                follow_content.append("【看房方式:" + this.getCnValue(DictConstants.LookType.getDictId(), houseRentOld.getLook_type()) + "=>" + this.getCnValue(DictConstants.LookType.getDictId(), house.getHouseRent().getLook_type()) + "】");
            } else if (!StringUtil.isNullOrEmpty(houseRentOld.getLook_type()) && !houseRentOld.getLook_type().equals(house.getHouseRent().getLook_type())) {
                follow_content.append("【看房方式:" + this.getCnValue(DictConstants.LookType.getDictId(), houseRentOld.getLook_type()) + "=>" + this.getCnValue(DictConstants.LookType.getDictId(), house.getHouseRent().getLook_type()) + "】");
            }
            if (!StringUtil.isNullOrEmpty(house.getHouseRent().getLook_date()) && !house.getHouseRent().getLook_date().equals(houseRentOld.getLook_date())) {
                follow_content.append("【可看房日期:" + (null == houseRentOld.getLook_date() ? "" : houseRentOld) + "=>" + house.getHouseRent().getLook_date() + "】");
            } else if (!StringUtil.isNullOrEmpty(houseRentOld.getLook_date()) && !houseRentOld.getLook_date().equals(house.getHouseRent().getLook_date())) {
                follow_content.append("【可看房日期:" + (null == houseRentOld.getLook_date() ? "" : houseRentOld) + "=>" + house.getHouseRent().getLook_date() + "】");
            }
            if (!StringUtil.isNullOrEmpty(house.getHouseRent().getLook_remark()) && !house.getHouseRent().getLook_remark().equals(houseRentOld.getLook_remark())) {
                follow_content.append("【看房备注:" + (null == houseRentOld.getLook_remark() ? "" : houseRentOld.getLook_remark()) + "=>" + house.getHouseRent().getLook_remark() + "】");
            } else if (!StringUtil.isNullOrEmpty(houseRentOld.getLook_remark()) && !houseRentOld.getLook_remark().equals(house.getHouseRent().getLook_remark())) {
                follow_content.append("【看房备注:" + houseRentOld.getLook_remark() + "=>" + house.getHouseRent().getLook_remark());
            }
            if (!StringUtil.isNullOrEmpty(house.getHouseRent().getNow_status()) && !house.getHouseRent().getNow_status().equals(houseRentOld.getNow_status())) {
                follow_content.append("【房屋现状:" + this.getCnValue(DictConstants.NowStatus.getDictId(), houseRentOld.getNow_status()) + "=>" + this.getCnValue(DictConstants.NowStatus.getDictId(), house.getHouseRent().getNow_status()) + "】");
            } else if (!StringUtil.isNullOrEmpty(houseRentOld.getNow_status()) && !houseRentOld.getNow_status().equals(house.getHouseRent().getNow_status())) {
                follow_content.append("【房屋现状:" + this.getCnValue(DictConstants.NowStatus.getDictId(), houseRentOld.getNow_status()) + "=>" + this.getCnValue(DictConstants.NowStatus.getDictId(), house.getHouseRent().getNow_status()) + "】");
            }
            if (null != house.getHouseRent().getRental_price() && null != houseRentOld.getRental_price() && house.getHouseRent().getRental_price().doubleValue() != houseRentOld.getRental_price().doubleValue()) {
                follow_content.append("【月租价:" + houseRentOld.getRental_price() + "=>" + house.getHouseRent().getRental_price() + "】");
            }
            if (null != house.getHouseRent().getBelong_did() && null != houseRentOld.getBelong_did() && !house.getHouseRent().getBelong_did().equals(houseRentOld.getBelong_did())) {
                follow_content.append("【归属部门:" + departService.getDepartNameById(houseRentOld.getBelong_did()) + "=>" + departService.getDepartNameById(house.getHouseRent().getBelong_did()) + "】");
            }
            if (null != house.getHouseRent().getBelong_uid() && null != houseRentOld.getBelong_uid() && !house.getHouseRent().getBelong_uid().equals(houseRentOld.getBelong_uid())) {
                follow_content.append("【归属人:" + userService.getUserNameById(houseRentOld.getBelong_uid()) + "=>" + userService.getUserNameById(house.getHouseRent().getBelong_uid()) + "】");
            }
            if (!StringUtil.isNullOrEmpty(house.getHouseRent().getRemark()) && !house.getHouseRent().getRemark().equals(houseRentOld.getRemark())) {
                follow_content.append("【出租房屋备注:" + (null == houseRentOld.getRemark() ? "" : houseRentOld.getRemark()) + "=>" + house.getHouseRent().getRemark() + "】");
            } else if (!StringUtil.isNullOrEmpty(houseRentOld.getRemark()) && !houseRentOld.getRemark().equals(house.getHouseRent().getRemark())) {
                follow_content.append("【出租房屋备注:" + houseRentOld.getRemark() + "=>" + house.getHouseRent().getRemark() + "】");
            }
            if (!StringUtil.isNullOrEmpty(house.getHouseRent().getCategory()) && !house.getHouseRent().getCategory().equals(houseRentOld.getCategory())) {
                follow_content.append("【房源类别:" + this.getCnValue(DictConstants.HouseCategory.getDictId(), houseRentOld.getCategory()) + "=>" + this.getCnValue(DictConstants.HouseCategory.getDictId(), house.getHouseRent().getCategory()) + "】");
            } else if (!StringUtil.isNullOrEmpty(houseRentOld.getNow_status()) && !houseRentOld.getNow_status().equals(house.getHouseRent().getNow_status())) {
                follow_content.append("【房源类别:" + this.getCnValue(DictConstants.HouseCategory.getDictId(), houseRentOld.getCategory()) + "=>" + this.getCnValue(DictConstants.HouseCategory.getDictId(), house.getHouseRent().getCategory()) + "】");
            }
        }
        return follow_content.toString();
    }

    /**
     * 添加一条系统跟进
     *
     * @param house
     */
    @Transactional
    public void saveFollow(House house, String follow_content) throws Exception {
        try {
            if (!StringUtil.isNullOrEmpty(follow_content)) {
                Follow follow = new Follow();
                // 主键
                follow.setFollow_id(UuidUtil.getUUID());
                follow.setObject_type(DictConstants.FollowObjectType.HOUSE.value());
                follow.setObject_id(house.getHouse_id());
                follow.setFollow_type(DictConstants.HouseFollowType.SYSTEMEDIT.value());
                follow.setFollow_content(follow_content);
                follow.setFollow_open(DictConstants.YesNo.Y.value());
                follow.setFollow_date(DateUtil.getCurrentDateTimeAsString());
                follow.setDeleted(0);
                follow.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                follow.setCreate_uid(house.getUpdate_uid());
                follow.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                follow.setUpdate_uid(house.getUpdate_uid());
                followMapper.insert(follow);
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 保存房屋配套设备信息
     *
     * @param house
     * @return ResultMsg
     */
    @Transactional
    public ResultMsg saveHouseConfiguration(House house) throws Exception {
        try {
            saveHouseConfiguration(house, "update");
            return ResultMsg.createOkMsg();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Transactional
    private void saveHouseConfiguration(House house, String type) throws Exception {
        houseConfigurationMapper.deleteByHouseId(house.getHouse_id());
        List<HouseConfiguration> houseConfigurationList = house.getHouseConfigurationList();
        List<HouseConfiguration> houseConfigurationListOld = houseConfigurationMapper.selectByHouseId(house.getHouse_id());
        if (null != houseConfigurationList && houseConfigurationList.size() > 0) {
            List<HouseConfiguration> listSave = new ArrayList<HouseConfiguration>();
            for (HouseConfiguration houseConfiguration : houseConfigurationList) {
                HouseConfiguration configuration = new HouseConfiguration();
                //configuration_id uuid生成
                configuration.setConfiguration_id(UuidUtil.getUUID());
                // residential_id
                configuration.setResidential_id(house.getResidential_id());
                // building_id
                configuration.setBuilding_id(house.getBuilding_id());
                // house_id
                configuration.setHouse_id(house.getHouse_id());
                configuration.setConfiguration_code(houseConfiguration.getConfiguration_code());
                // create_id
                configuration.setCreate_uid(house.getUpdate_uid());
                listSave.add(configuration);
            }
            houseConfigurationMapper.saveHouseConfiguration(listSave);
        }
        // 生成一条跟进
        if (null != type && type.equals("update")) {
            String follow_content = followContentBySaveHouseConfiguration(houseConfigurationListOld, houseConfigurationList);
            if (!StringUtil.isNullOrEmpty(follow_content)) {
                saveFollow(house, follow_content);
            }
        }
    }

    private String followContentBySaveHouseConfiguration(List<HouseConfiguration> houseConfigurationListOld, List<HouseConfiguration> houseConfigurationList) throws Exception {
        String oldC = "";
        String newC = "";
        int same = 0;
        if (null != houseConfigurationListOld && houseConfigurationListOld.size() > 0) {
            for (HouseConfiguration hcOld : houseConfigurationListOld) {
                if (null != houseConfigurationList && houseConfigurationList.size() > 0) {
                    for (HouseConfiguration hc : houseConfigurationList) {
                        if (hcOld == hc) {
                            same++;
                            break;
                        }
                    }
                }
                oldC += this.getCnValue(DictConstants.HouseHomeConfiguration.getDictId(), hcOld.getConfiguration_code()) + this.getCnValue(DictConstants.HouseElectricConfiguration.getDictId(), hcOld.getConfiguration_code()) + this.getCnValue(DictConstants.HouseGroundConfiguration.getDictId(), hcOld.getConfiguration_code());
            }
        }
        if (null != houseConfigurationListOld && null != houseConfigurationList && ((houseConfigurationListOld.size() != houseConfigurationList.size()) || (same != houseConfigurationList.size()))) {
            for (HouseConfiguration hc : houseConfigurationList) {
                newC += this.getCnValue(DictConstants.HouseHomeConfiguration.getDictId(), hc.getConfiguration_code()) + this.getCnValue(DictConstants.HouseElectricConfiguration.getDictId(), hc.getConfiguration_code()) + this.getCnValue(DictConstants.HouseGroundConfiguration.getDictId(), hc.getConfiguration_code());
            }
        }
        if (oldC.equals(newC)) {
            return "";
        }
        return "【房屋配套设施:" + oldC + "=>" + newC + "】";
    }

    private String getCnValue(String dicType, String Key) throws Exception {
        if (StringUtil.isNullOrEmpty(dicType) || StringUtil.isNullOrEmpty(Key)) {
            return "无";
        }
        return DicTools.getCnValue(dicType, Key);
    }

    /**
     * 保存房屋图片信息
     *
     * @param house
     * @return
     */
    @Transactional
    public ResultMsg saveHouseImg(House house) throws Exception {
        try {
            houseImgMapper.deleteByHouseId(house.getHouse_id());
            List<HouseImg> houseImgList = house.getHouseImgList();
            if (null != houseImgList && houseImgList.size() > 0) {
                List<HouseImg> listSave = new ArrayList<HouseImg>();
                for (HouseImg houseImg : houseImgList) {
                    HouseImg img = new HouseImg();
                    // 主键
                    img.setHouse_img_id(UuidUtil.getUUID());
                    // residential_id
                    img.setResidential_id(house.getResidential_id());
                    // building_id
                    img.setBuilding_id(house.getBuilding_id());
                    // house_id
                    img.setHouse_id(house.getHouse_id());
                    img.setImg_id(houseImg.getImg_id());
                    img.setImg_name(houseImg.getImg_name());
                    img.setImg_type(houseImg.getImg_type());
                    img.setAudit_status(DictConstants.AuditStatus.NO_AUDIT.value());
                    img.setAudit_time(houseImg.getAudit_time());
                    img.setAudit_uid(houseImg.getAudit_uid());
                    img.setDeleted(0);
                    // create_uid
                    img.setCreate_uid(house.getUpdate_uid());
                    img.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                    listSave.add(img);
                }
                houseImgMapper.saveHouseImg(listSave);
            }
            return ResultMsg.createOkMsg();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 保存房屋联系人
     *
     * @param house
     */
    @Transactional
    private void saveHouseLinkman(House house) throws Exception {
        List<HouseLinkman> HouseLinkmanList = house.getHouseLinkmanList();
        if (null != HouseLinkmanList && HouseLinkmanList.size() > 0) {
            List<HouseLinkman> listSave = new ArrayList<HouseLinkman>();
            for (HouseLinkman houseLinkman : HouseLinkmanList) {
                HouseLinkman linkman = new HouseLinkman();
                // 主键
                linkman.setLinkman_id(UuidUtil.getUUID());
                // residential_id
                linkman.setResidential_id(house.getResidential_id());
                // building_id
                linkman.setBuilding_id(house.getBuilding_id());
                // house_id
                linkman.setHouse_id(house.getHouse_id());
                linkman.setName(houseLinkman.getName());
                linkman.setGender(houseLinkman.getGender());
                linkman.setMobile_phone_number(houseLinkman.getMobile_phone_number());
                linkman.setTelephone_number(houseLinkman.getTelephone_number());
                linkman.setRemark(houseLinkman.getRemark());
                linkman.setDeleted(0);
                // create_uid
                linkman.setCreate_uid(house.getCreate_uid());
                linkman.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                // update_uid
                linkman.setUpdate_uid(house.getUpdate_uid());
                linkman.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                listSave.add(linkman);
            }
            houseLinkmanMapper.saveHouseLinkman(listSave);
        }
    }

    /**
     * 楼盘房屋信息-列表
     *
     * @param pageData
     * @return ResultObjectMsg<PagingHelper<House>>
     */
    public ResultObjectMsg<PagingHelper<House>> searchHouse(Map<String, Object> pageData) throws Exception {
        int page_num = ParameterUtil.getInt(pageData, "pageNumber", 1);
        int page_size = ParameterUtil.getInt(pageData, "pageSize", 10);

        SessionVo sessionVo = (SessionVo) pageData.get("sessionVo");
        if (null != sessionVo) {
            SysUser sysUser = sessionVo.getSysUser();
            pageData.put("current_city_code", sysUser.getCurrent_city_code());
        }

        PagingHelper<House> ph = new PagingHelper<House>();
        ph.setPerPageSize(page_size);
        ph.setCurrentPage(page_num);

        pageData.put("begin_num", ph.getBeginRowNumber());
        pageData.put("end_num", ph.getEndRowNumber());

        List<House> list = houseMapper.searchHouseList(pageData);
        Integer count = houseMapper.countSearchHouse(pageData);

        ph.setTotal(count); // 设置总的记录数
        ph.setRows(list); // 设置返回的记录
        return new ResultObjectMsg<PagingHelper<House>>(ph);
    }

    /**
     * 楼盘房屋信息-详情-带权限
     *
     * @param house_id
     * @return ResultObjectMsg<House>
     */
    public ResultObjectMsg<House> selectHouseDetailbyMap(Map<String, Object> pageData, SessionVo sessionVo) throws Exception {
        String house_id = (String) pageData.get("house_id");
        String from = (String) pageData.get("from");
        if (null == house_id) {
            return new ResultObjectMsg<House>("缺少出租房源ID.");
        }
        House house = houseMapper.selectByHouseId(house_id);
        house.setResidential_dep_id(house.getResidential_dep_id());
        ResultObjectMsg<House> resultObjectMsg = new ResultObjectMsg<House>("房源详情不存在.");
        if (null != house) {
            house.setHouseRent(house.getHouseRent());
            house.setHouseConfigurationList(house.getHouseConfigurationList());
            house.setHouseImgList(house.getHouseImgList());
            house.setHouseLinkmanList(house.getHouseLinkmanList());

            resultObjectMsg = new ResultObjectMsg<House>(house);
            if ("manageHouseResource".equals(from)) {//管理资料房源
                resultObjectMsg.setPar("DataSavePublic", sessionVo.isEnabled("manageHouseResourceHouseRentSavePulic", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                resultObjectMsg.setPar("DataSaveBelong", sessionVo.isEnabled("manageHouseResourceHouseRentSaveBelong", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                resultObjectMsg.setPar("DataSaveTel", sessionVo.isEnabled("manageHouseResourceHouseRentSaveTel", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                resultObjectMsg.setPar("DataAddPicture", sessionVo.isEnabled("manageHouseResourceHouseRentAddPicture", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                //图片已放到初始化图片方法
                //resultObjectMsg.setPar("DataDeleterPicture", sessionVo.isEnabled("HouseRentDeletePicture", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                //公共信息未授权是没有上级关系不能修改
                String HouseRentSavePulicFuncDataPermType = sessionVo.getUserFuncDataPermType("manageHouseResourceHouseRentSavePulic");
                if (DictConstants.PermType.PERSON.equals(HouseRentSavePulicFuncDataPermType)) {
                    resultObjectMsg.setPar("DataSavePublic", sessionVo.getSysUser().getUser_id().equals(house.getHouseRent().getBelong_uid()) ? "" : "disabled");
                }
                //官网维护人
                resultObjectMsg.setPar("DataUpdateWebUser", sessionVo.isEnabled("RentHouseUpdateWebUser", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
            } else if ("devHouse".equals(from)) {//开发自营房源
                resultObjectMsg.setPar("HouseUpdateMonthMoney", sessionVo.isEnabled("HouseUpdateMonthMoney", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                resultObjectMsg.setPar("DataSavePublic", sessionVo.isEnabled("devHouseHouseRentSavePulic", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                resultObjectMsg.setPar("DataSaveBelong", sessionVo.isEnabled("devHouseHouseRentSaveBelong", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                resultObjectMsg.setPar("DataSaveTel", sessionVo.isEnabled("devHouseHouseRentSaveTel", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                resultObjectMsg.setPar("DataAddPicture", sessionVo.isEnabled("devHouseHouseRentAddPicture", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                //图片已放到初始化图片方法
                //resultObjectMsg.setPar("DataDeleterPicture", sessionVo.isEnabled("HouseRentDeletePicture", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                //公共信息未授权是没有上级关系不能修改
                String HouseRentSavePulicFuncDataPermType = sessionVo.getUserFuncDataPermType("devHouseHouseRentSavePulic");
                if (DictConstants.PermType.PERSON.equals(HouseRentSavePulicFuncDataPermType)) {
                    resultObjectMsg.setPar("DataSavePublic", sessionVo.getSysUser().getUser_id().equals(house.getHouseRent().getBelong_uid()) ? "" : "disabled");
                }
                //官网维护人
                resultObjectMsg.setPar("DataUpdateWebUser", sessionVo.isEnabled("DevHouseUpdateWebUser", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
            } else if ("invalid".equals(from)) {//失效房源
                resultObjectMsg.setPar("DataSavePublic", sessionVo.isEnabled("invalidHouseRentSavePulic", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                resultObjectMsg.setPar("DataSaveBelong", sessionVo.isEnabled("invalidHouseRentSaveBelong", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                resultObjectMsg.setPar("DataSaveTel", sessionVo.isEnabled("invalidHouseRentSaveTel", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                resultObjectMsg.setPar("DataAddPicture", sessionVo.isEnabled("invalidHouseRentAddPicture", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                //图片已放到初始化图片方法
                //resultObjectMsg.setPar("DataDeleterPicture", sessionVo.isEnabled("HouseRentDeletePicture", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                //公共信息未授权是没有上级关系不能修改
                String HouseRentSavePulicFuncDataPermType = sessionVo.getUserFuncDataPermType("invalidHouseRentSavePulic");
                if (DictConstants.PermType.PERSON.equals(HouseRentSavePulicFuncDataPermType)) {
                    resultObjectMsg.setPar("DataSavePublic", sessionVo.getSysUser().getUser_id().equals(house.getHouseRent().getBelong_uid()) ? "" : "disabled");
                }
            } else if ("trusteeship".equals(from)) {//托管中的房源
                resultObjectMsg.setPar("DataSavePublic", sessionVo.isEnabled("trusteeshipHouseRentSavePulic", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                resultObjectMsg.setPar("DataSaveBelong", sessionVo.isEnabled("trusteeshipHouseRentSaveBelong", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                resultObjectMsg.setPar("DataSaveTel", sessionVo.isEnabled("trusteeshipHouseRentSaveTel", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                resultObjectMsg.setPar("DataAddPicture", sessionVo.isEnabled("trusteeshipHouseRentAddPicture", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                //图片已放到初始化图片方法
                //resultObjectMsg.setPar("DataDeleterPicture", sessionVo.isEnabled("HouseRentDeletePicture", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                //公共信息未授权是没有上级关系不能修改
                String HouseRentSavePulicFuncDataPermType = sessionVo.getUserFuncDataPermType("trusteeshipHouseRentSavePulic");
                if (DictConstants.PermType.PERSON.equals(HouseRentSavePulicFuncDataPermType)) {
                    resultObjectMsg.setPar("DataSavePublic", sessionVo.getSysUser().getUser_id().equals(house.getHouseRent().getBelong_uid()) ? "" : "disabled");
                }
            } else {
                resultObjectMsg.setPar("DataSavePublic", sessionVo.isEnabled("HouseRentSavePulic", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                resultObjectMsg.setPar("DataSaveBelong", sessionVo.isEnabled("HouseRentSaveBelong", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                resultObjectMsg.setPar("DataSaveTel", sessionVo.isEnabled("HouseRentSaveTel", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                resultObjectMsg.setPar("DataAddPicture", sessionVo.isEnabled("HouseRentAddPicture", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                //图片已放到初始化图片方法
                //resultObjectMsg.setPar("DataDeleterPicture", sessionVo.isEnabled("HouseRentDeletePicture", String.valueOf(house.getHouseRent().getBelong_did()), String.valueOf(house.getHouseRent().getBelong_uid())) == true ? "" : "disabled");
                //公共信息未授权是没有上级关系不能修改
                String HouseRentSavePulicFuncDataPermType = sessionVo.getUserFuncDataPermType("HouseRentSavePulic");
                if (DictConstants.PermType.PERSON.equals(HouseRentSavePulicFuncDataPermType)) {
                    resultObjectMsg.setPar("DataSavePublic", sessionVo.getSysUser().getUser_id().equals(house.getHouseRent().getBelong_uid()) ? "" : "disabled");
                }
            }


        }

        //当house_id在apartment中存在未删除且激活的时，出租房源不能修改
        Integer apartmentNumber = apartmentMapper.selectByHouseId(house_id);
        resultObjectMsg.setPar("isModificationRentHouse", apartmentNumber > 0 ? "disabled" : "");
        
        //判断归属人的跟进
        lastFollowIsYestday(house);
        
        return resultObjectMsg;
    }

	private void lastFollowIsYestday(House house) {
		HashMap<String, Object> map = new HashMap<String, Object>();
        map.put("object_id",house.getHouse_id());
        map.put("create_uid", house.getHouseRent().getBelong_uid());
        Integer countLastFollow = followMapper.countLastFollowByObjectId(map);
        HashMap<String, Object> map2 = new HashMap<String, Object>();
        map2.put("house_id",house.getHouse_id());
		map2.put("object_id", house.getHouse_id());
		map2.put("create_uid", house.getHouseRent().getBelong_uid());
		HouseRolesChangeHistory lastRecord = houseRolesChangeHistoryMapper.selectLastRecord(map2);
		if(lastRecord !=null && lastRecord.getCreate_time() !=null &&lastRecord.getBelong_uid() !=null ){//表示不
			Date nextDate = DateUtil.nextDay(DateUtil.parse(lastRecord.getCreate_time(),DateUtil.DATETIME_FORMAT_PATTERN));
			if(countLastFollow == 0 && nextDate.before(new Date()) ){//表示没有
				house.getHouseRent().setUser_dep_belong(null);
				house.getHouseRent().setBelong_time(null);
	        }
		}
	}

    /**
     * 楼盘房屋信息-详情
     *
     * @param house_id
     * @return ResultObjectMsg<House>
     */
    public ResultObjectMsg<House> selectHouseDetail(String house_id) throws Exception {
        if (null == house_id) {
            return new ResultObjectMsg<House>("缺少出租房源ID.");
        }
        House house = houseMapper.selectByHouseId(house_id);
        if (null != house) {
            house.setHouseRent(house.getHouseRent());
            house.setHouseConfigurationList(house.getHouseConfigurationList());
            house.setHouseImgList(house.getHouseImgList());
            house.setHouseLinkmanList(house.getHouseLinkmanList());
        }

        return new ResultObjectMsg<House>(house);
    }

    /**
     * 楼盘房屋信息-删除
     *
     * @param sysUser
     * @param house_id
     */
    @Transactional
    public ResultMsg deleteHouse(SysUser sysUser, String house_id) throws Exception {
        try {
            if (null == sysUser || null == sysUser.getUser_id()) {
                return ResultMsg.createErrorMsg("登录用户不存在.");
            }
            if (null == house_id) {
                return ResultMsg.createErrorMsg("缺少出租房源ID.");
            }
            // 判断当前房源是否有有效的普单合同，如果有则不能删除，如果没有则可以删除，且删除与之关联的配置、图片、联系人、与开发房源的关联关系(如果有)
            Integer genCount = houseGeneralContractVoMapper.selectCountByHouseId(house_id);
            if (null != genCount && genCount > 0) {
                return ResultMsg.createErrorMsg("当前房源有普单合同，不能删除.");
            }
            // 判断当前房源是否有有效的委托合同，如果有则不能删除，如果没有则可以删除，且删除与之关联的配置、图片、联系人、与开发房源的关联关系(如果有)
            List<ApartmentHouseContractVo> apartmentHouseContractVoList = houseContractVoMapper.selectByHouseId(house_id);
            if (null != apartmentHouseContractVoList && apartmentHouseContractVoList.size() > 0) {
                return ResultMsg.createErrorMsg("当前房源有有效或已签署尚未生效的委托合同，不能删除.");
            }
            // 直接删除
            houseConfigurationMapper.deleteByHouseId(house_id);
            // 软删除
            houseImgMapper.deleteByHouseId(house_id);
            Map<String, Object> pageData = new HashMap<String, Object>();
            pageData.put("house_id", house_id);
            pageData.put("update_time", DateUtil.getCurrentDateTimeAsString());
            pageData.put("update_uid", sysUser.getUser_id());
            houseLinkmanMapper.deleteByHouseId(pageData);
            HouseDevelopRelation houseDevelopRelationParam = new HouseDevelopRelation();
            houseDevelopRelationParam.setHouse_id(house_id);
            HouseDevelopRelation houseDevelopRelation = houseDevelopRelationMapper.selectByHouseDevelopRelation(houseDevelopRelationParam);
            if (null != houseDevelopRelation && null != houseDevelopRelation.getHouse_develop_id() && null != houseDevelopRelation.getHouse_id()) {
                houseDevelopRelationMapper.deleteByRelation(houseDevelopRelation);
            }
            // 删除所有跟进记录
            Map<String, Object> objMap = new HashMap<String, Object>();
            objMap.put("object_type", DictConstants.FollowObjectType.HOUSE.value());
            objMap.put("object_id", house_id);
            objMap.put("deleted", 1);
            objMap.put("update_time", DateUtil.getCurrentDateTimeAsString());
            objMap.put("update_uid", sysUser.getUser_id());
            followMapper.deleteByObjectMap(objMap);
            House house = houseMapper.selectByPrimaryKey(house_id);
            if (null != house && house.getDeleted() == 0) {
                house.setDeleted(1);
                house.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                house.setUpdate_uid(sysUser.getUser_id());
                houseMapper.updateByPrimaryKeySelective(house);
            }
            HouseRent houseRent = houseRentMapper.selectByPrimaryKey(house_id);
            if (null != houseRent && houseRent.getDeleted() == 0) {
                houseRent.setDeleted(1);
                houseRent.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                houseRent.setUpdate_uid(sysUser.getUser_id());
                houseRentMapper.updateByPrimaryKeySelective(houseRent);
            }
            return ResultMsg.createOkMsg();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 返回当前房屋的图片列表--分页
     *
     * @param pageData
     * @return ResultObjectMsg<PagingHelper<HouseImg>>
     */
    public ResultObjectMsg<PagingHelper<HouseImg>> searchHouseImgList(Map<String, Object> pageData) throws Exception {
        int page_num = ParameterUtil.getInt(pageData, "pageNumber", 1);
        int page_size = ParameterUtil.getInt(pageData, "pageSize", 10);

        PagingHelper<HouseImg> ph = new PagingHelper<HouseImg>();
        ph.setPerPageSize(page_size);
        ph.setCurrentPage(page_num);

        pageData.put("begin_num", ph.getBeginRowNumber());
        pageData.put("end_num", ph.getEndRowNumber());

        List<HouseImg> list = houseImgMapper.searchHouseImgList(pageData);
        Integer count = houseImgMapper.countSearchHouseImg(pageData);

        ph.setTotal(count); // 设置总的记录数
        ph.setRows(list); // 设置返回的记录
        return new ResultObjectMsg<PagingHelper<HouseImg>>(ph);
    }

    /**
     * 返回当前房屋的图片列表--不分页
     *
     * @param data
     * @return List<TtHouseImg>
     */
    public ResultObjectMsg<List<HouseImg>> selectHouseImgList(Map<String, Object> data) throws Exception {
        if (null == data || null == data.get("house_id")) {
            return new ResultObjectMsg<List<HouseImg>>("缺少出租房源ID.");
        }
        return new ResultObjectMsg<List<HouseImg>>(houseImgMapper.searchHouseImgList(data));
    }

    /**
     * 返回当前房屋的图片列表--不分页--权限
     *
     * @param data
     * @return List<TtHouseImg>
     */
    public ResultObjectMsg<List<HouseImg>> selectHouseImgList(Map<String, Object> data, SessionVo sessionVo) throws Exception {
        if (null == data || null == data.get("house_id")) {
            return new ResultObjectMsg<List<HouseImg>>("缺少出租房源ID.");
        }
        String from = (String) data.get("from");
        List<HouseImg> list = houseImgMapper.searchHouseImgList(data);
        ResultObjectMsg<List<HouseImg>> resultObjectMsg = new ResultObjectMsg<List<HouseImg>>(list);
        if ("manageHouseResource".equals(from)) {
            for (HouseImg houseImg : list) {
                resultObjectMsg.setPar("DataSaIMG" + houseImg.getHouse_img_id(), sessionVo.isEnabled("manageHouseResourceHouseRentDeletePicture", String.valueOf(houseImg.getCreate_did()), String.valueOf(houseImg.getCreate_uid())) == true ? "" : "disabled");
            }

            String houseRentDeletePictureFuncDataPermType = sessionVo.getUserFuncDataPermType("manageHouseResourceHouseRentDeletePicture");
            if (DictConstants.PermType.PERSON.equals(houseRentDeletePictureFuncDataPermType)) {
                for (HouseImg houseImg : list) {
                    resultObjectMsg.setPar("DataSaIMG" + houseImg.getHouse_img_id(), sessionVo.getSysUser().getUser_id().equals(houseImg.getCreate_uid()) ? "" : "disabled");
                }

            }
        } else if ("invalid".equals(from)) {
            for (HouseImg houseImg : list) {
                resultObjectMsg.setPar("DataSaIMG" + houseImg.getHouse_img_id(), sessionVo.isEnabled("invalidHouseRentDeletePicture", String.valueOf(houseImg.getCreate_did()), String.valueOf(houseImg.getCreate_uid())) == true ? "" : "disabled");
            }

            String houseRentDeletePictureFuncDataPermType = sessionVo.getUserFuncDataPermType("invalidHouseRentDeletePicture");
            if (DictConstants.PermType.PERSON.equals(houseRentDeletePictureFuncDataPermType)) {
                for (HouseImg houseImg : list) {
                    resultObjectMsg.setPar("DataSaIMG" + houseImg.getHouse_img_id(), sessionVo.getSysUser().getUser_id().equals(houseImg.getCreate_uid()) ? "" : "disabled");
                }

            }
        } else if ("devHouse".equals(from)) {
            for (HouseImg houseImg : list) {
                resultObjectMsg.setPar("DataSaIMG" + houseImg.getHouse_img_id(), sessionVo.isEnabled("devHouseHouseRentDeletePicture", String.valueOf(houseImg.getCreate_did()), String.valueOf(houseImg.getCreate_uid())) == true ? "" : "disabled");
            }

            String houseRentDeletePictureFuncDataPermType = sessionVo.getUserFuncDataPermType("devHouseHouseRentDeletePicture");
            if (DictConstants.PermType.PERSON.equals(houseRentDeletePictureFuncDataPermType)) {
                for (HouseImg houseImg : list) {
                    resultObjectMsg.setPar("DataSaIMG" + houseImg.getHouse_img_id(), sessionVo.getSysUser().getUser_id().equals(houseImg.getCreate_uid()) ? "" : "disabled");
                }

            }
        } else if ("trusteeship".equals(from)) {
            for (HouseImg houseImg : list) {
                resultObjectMsg.setPar("DataSaIMG" + houseImg.getHouse_img_id(), sessionVo.isEnabled("trusteeshipHouseRentDeletePicture", String.valueOf(houseImg.getCreate_did()), String.valueOf(houseImg.getCreate_uid())) == true ? "" : "disabled");
            }

            String houseRentDeletePictureFuncDataPermType = sessionVo.getUserFuncDataPermType("trusteeshipHouseRentDeletePicture");
            if (DictConstants.PermType.PERSON.equals(houseRentDeletePictureFuncDataPermType)) {
                for (HouseImg houseImg : list) {
                    resultObjectMsg.setPar("DataSaIMG" + houseImg.getHouse_img_id(), sessionVo.getSysUser().getUser_id().equals(houseImg.getCreate_uid()) ? "" : "disabled");
                }

            }
        } else {
            for (HouseImg houseImg : list) {
                resultObjectMsg.setPar("DataSaIMG" + houseImg.getHouse_img_id(), sessionVo.isEnabled("HouseRentDeletePicture", String.valueOf(houseImg.getCreate_did()), String.valueOf(houseImg.getCreate_uid())) == true ? "" : "disabled");
            }

            String houseRentDeletePictureFuncDataPermType = sessionVo.getUserFuncDataPermType("HouseRentDeletePicture");
            if (DictConstants.PermType.PERSON.equals(houseRentDeletePictureFuncDataPermType)) {
                for (HouseImg houseImg : list) {
                    resultObjectMsg.setPar("DataSaIMG" + houseImg.getHouse_img_id(), sessionVo.getSysUser().getUser_id().equals(houseImg.getCreate_uid()) ? "" : "disabled");
                }

            }
        }


        return resultObjectMsg;
    }

    /**
     * 新增单个图片
     *
     * @param houseImg
     */
    @Transactional
    public ResultObjectMsg<HouseImg> addHouseImg(HouseImg houseImg, SessionVo sessionVo) throws Exception {
        try {
            // 主键
            if (null == houseImg) {
                return new ResultObjectMsg<HouseImg>("缺少图片信息.");
            }
            if (null == sessionVo || null == sessionVo.getSysUser()) {
                return new ResultObjectMsg<HouseImg>("缺少用户ID,请登录.");
            }
            if (StringUtil.isNullOrEmpty(houseImg.getImg_id())) {
                return new ResultObjectMsg<HouseImg>("缺少图片ID.");
            }
            if (StringUtil.isNullOrEmpty(houseImg.getImg_type())) {
                return new ResultObjectMsg<HouseImg>("缺少图片类型.");
            }
            if (StringUtil.isNullOrEmpty(houseImg.getHouse_id())) {
                return new ResultObjectMsg<HouseImg>("缺少房屋ID.");
            }
            House house = houseMapper.selectByHouseId(houseImg.getHouse_id());
            if (null == house) {
                return new ResultObjectMsg<HouseImg>("房屋不存在.");
            }
            houseImg.setResidential_id(house.getResidential_id());
            houseImg.setBuilding_id(house.getBuilding_id());
            // 主键
            houseImg.setHouse_img_id(UuidUtil.getUUID());
            houseImg.setAudit_status(DictConstants.AuditStatus.NO_AUDIT.value());
            houseImg.setDeleted(0);
            houseImg.setCreate_time(DateUtil.getCurrentDateTimeAsString());
            houseImg.setCreate_uid(sessionVo.getSysUser().getUser_id());
            houseImgMapper.insertHouseImg(houseImg);
            return new ResultObjectMsg<HouseImg>(houseImg);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 删除单个图片--删除关联关系
     *
     * @param house_img_id
     */
    @Transactional
    public ResultMsg deleteHouseImg(String house_img_id) throws Exception {
        try {
            if (StringUtil.isNullOrEmpty(house_img_id)) {
                return ResultMsg.createErrorMsg("缺少房屋图片ID.");
            }
            houseImgMapper.deleteByHouseImgId(house_img_id);
            return ResultMsg.createOkMsg();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 更新图片状态
     *
     * @param houseImg
     */
    @Transactional
    public ResultMsg updateHouseImg(HouseImg houseImg) throws Exception {
        try {
            houseImgMapper.updateByPrimaryKeySelective(houseImg);
            return ResultMsg.createOkMsg();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 楼盘房屋图片-返回单个图片信息
     *
     * @param house_img_id
     * @return ResultObjectMsg<HouseImg>
     */
    public ResultObjectMsg<HouseImg> selectHouseImgDetail(String house_img_id) throws Exception {
        return new ResultObjectMsg<HouseImg>(houseImgMapper.selectByHouseImgId(house_img_id));
    }

    /**
     * 出租房源联系人列表
     *
     * @param sysUser
     * @param pageData
     * @return ResultObjectMsg<PagingHelper<HouseLinkman>>
     */
    public ResultObjectMsg<PagingHelper<HouseLinkman>> searchHouseLinkmanList(SysUser sysUser, Map<String, Object> pageData) throws Exception {
        if (null == pageData) {
            return new ResultObjectMsg<PagingHelper<HouseLinkman>>("参数为空.");
        }
        if (null == pageData.get("house_id")) {
            return new ResultObjectMsg<PagingHelper<HouseLinkman>>("缺少出租房源ID.");
        }

        HouseLinkmanViewed houseLinkmanViewed = new HouseLinkmanViewed();
        houseLinkmanViewed.setHouse_id(ParameterUtil.getString(pageData, "house_id", ""));
        houseLinkmanViewed.setUid(sysUser.getUser_id());
        Integer viewedCount = houseLinkmanViewedMapper.searchCountHouseLinkmanViewed(houseLinkmanViewed);
        if (viewedCount > 50) {
            return new ResultObjectMsg<PagingHelper<HouseLinkman>>("您查看联系人的次数已超过50,不能再查看了.");
        }

        int page_num = ParameterUtil.getInt(pageData, "pageNumber", 1);
        int page_size = ParameterUtil.getInt(pageData, "pageSize", 10);

        PagingHelper<HouseLinkman> ph = new PagingHelper<HouseLinkman>();
        ph.setPerPageSize(page_size);
        ph.setCurrentPage(page_num);

        pageData.put("begin_num", ph.getBeginRowNumber());
        pageData.put("end_num", ph.getEndRowNumber());

        List<HouseLinkman> list = houseLinkmanMapper.searchHouseLinkmanList(pageData);
        Integer count = houseLinkmanMapper.countSearchHouseLinkman(pageData);

        ph.setTotal(count); // 设置总的记录数
        ph.setRows(list); // 设置返回的记录

        return new ResultObjectMsg<>(ph);
    }

    /**
     * 删除联系人
     *
     * @param sysUser
     * @param linkman_id
     * @return ResultMsg
     */
    @Transactional
    public ResultMsg deleteHouseLinkman(SysUser sysUser, String linkman_id) throws Exception {
        try {
            if (null == sysUser || null == sysUser.getUser_id()) {
                return ResultMsg.createErrorMsg("登录用户不存在.");
            }
            if (null == linkman_id) {
                return ResultMsg.createErrorMsg("缺少联系人ID.");
            }
            HouseLinkman houseLinkman = houseLinkmanMapper.selectByPrimaryKey(linkman_id);
            houseLinkman.setDeleted(1);
            houseLinkman.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
            houseLinkman.setUpdate_uid(sysUser.getUser_id());
            houseLinkmanMapper.updateByPrimaryKeySelective(houseLinkman);
            // 生成一条跟进记录
            House house = new House();
            house.setHouse_id(houseLinkman.getHouse_id());
            house.setUpdate_uid(sysUser.getUser_id());
            saveFollow(house, "联系人:" + houseLinkman.getName() + houseLinkman.getMobile_phone_number() + "/" + houseLinkman.getTelephone_number() + "被删除");
            return ResultMsg.createOkMsg();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 保存联系人
     *
     * @param sysUser
     * @param houseLinkman
     * @return ResultMsg
     */
    @Transactional
    public ResultMsg saveHouseLinkman(SysUser sysUser, HouseLinkman houseLinkman) throws Exception {
        try {
        	String telephoneNumber = houseLinkman.getTelephone_number()==null?" ":"/"+houseLinkman.getTelephone_number();
            if (null == sysUser || null == sysUser.getUser_id()) {
                return ResultMsg.createErrorMsg("登录用户不存在.");
            }
            if (null == houseLinkman || null == houseLinkman.getHouse_id()) {
                return ResultMsg.createErrorMsg("出租房源ID不存在.");
            }
            if (StringUtil.isNullOrEmpty(houseLinkman.getMobile_phone_number()) && StringUtil.isNullOrEmpty(houseLinkman.getTelephone_number())) {
                return ResultMsg.createErrorMsg("请至少输入一个联系方式(联系方式或其他联系方式).");
            }
            if (!StringUtil.isNullOrEmpty(houseLinkman.getMobile_phone_number())) {
                if (houseLinkman.getMobile_phone_number().length() < 8 || houseLinkman.getMobile_phone_number().length() > 12) {
                    return ResultMsg.createErrorMsg("请输入8~12位的联系方式.");
                }
            }
            if (!StringUtil.isNullOrEmpty(houseLinkman.getTelephone_number())) {
                if (houseLinkman.getTelephone_number().length() < 8 || houseLinkman.getTelephone_number().length() > 12) {
                    return ResultMsg.createErrorMsg("请输入8~12的其他联系方式.");
                }
            }
            if (StringUtil.isNullOrEmpty(houseLinkman.getName())) {
                return ResultMsg.createErrorMsg("请输入联系人姓名.");
            }
            if (StringUtil.isNullOrEmpty(houseLinkman.getGender())) {
                return ResultMsg.createErrorMsg("请选择联系人性别.");
            }
            // 新增
            if (null == houseLinkman.getLinkman_id()) {
                House house = houseMapper.selectByPrimaryKey(houseLinkman.getHouse_id());
                if (null == house) {
                    return ResultMsg.createErrorMsg("出租房源不存在.");
                }
                // 主键
                houseLinkman.setLinkman_id(UuidUtil.getUUID());
                houseLinkman.setResidential_id(house.getResidential_id());
                houseLinkman.setBuilding_id(house.getBuilding_id());
                houseLinkman.setDeleted(0);
                houseLinkman.setCreate_time(DateUtil.getCurrentDateTimeAsString());
                houseLinkman.setCreate_uid(sysUser.getUser_id());
                houseLinkman.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                houseLinkman.setUpdate_uid(sysUser.getUser_id());
                houseLinkmanMapper.insertHouseLinkman(houseLinkman);
                house.setUpdate_uid(sysUser.getUser_id());
                saveFollow(house, "联系人:新增" + houseLinkman.getName() + houseLinkman.getMobile_phone_number() + telephoneNumber);
            } else {
                // 更新
                HouseLinkman houseLinkmanOld = houseLinkmanMapper.selectByPrimaryKey(houseLinkman.getLinkman_id());
                if (houseLinkmanOld.getUpdate_time().equals(houseLinkman.getUpdate_time())) {
                    return ResultMsg.createErrorMsg("联系人数据已被修改，请重新修改.");
                }
                houseLinkman.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
                houseLinkman.setUpdate_uid(sysUser.getUser_id());
                houseLinkmanMapper.updateHouseLinkman(houseLinkman);
                House house = new House();
                house.setHouse_id(houseLinkman.getHouse_id());
                house.setUpdate_uid(sysUser.getUser_id());
            	String telephoneNumberOld = houseLinkmanOld.getTelephone_number()==null?" ":"/"+houseLinkmanOld.getTelephone_number();
                saveFollow(house, "【联系人:" + houseLinkmanOld.getName() + houseLinkmanOld.getMobile_phone_number() + telephoneNumberOld + "=>" + houseLinkman.getName() + houseLinkman.getMobile_phone_number() + telephoneNumber + "】");
            }
            return ResultMsg.createOkMsg();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * 联系人详情
     *
     * @param linkman_id
     * @return ResultObjectMsg<HouseLinkman>
     */
    public ResultObjectMsg<HouseLinkman> selectHouseLinkmanDetail(String linkman_id) throws Exception {
        if (null == linkman_id) {
            return new ResultObjectMsg<HouseLinkman>("缺少联系人ID.");
        }
        return new ResultObjectMsg<HouseLinkman>(houseLinkmanMapper.selectByLinkmanId(linkman_id));
    }

    /**
     * 保存联系人查看记录
     *
     * @param sysUser
     * @param house_id
     * @return ResultMsg
     * @throws Exception
     */
    @Transactional
    public ResultMsg saveHouseLinkmanViewed(SysUser sysUser, String house_id) throws Exception {
        try {
            // 查看一次记录一次
            HouseLinkmanViewed houseLinkmanViewed = new HouseLinkmanViewed();
            // 主键
            houseLinkmanViewed.setViewed_id(UuidUtil.getUUID());
            houseLinkmanViewed.setHouse_id(house_id);
            houseLinkmanViewed.setUid(sysUser.getUser_id());
            houseLinkmanViewed.setViewed_date(DateUtil.getCurrentDateTimeAsString());
            houseLinkmanViewedMapper.insert(houseLinkmanViewed);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return ResultMsg.createOkMsg();
    }

    /**
     * 根据小区名称模糊查询楼盘列表
     *
     * @param apiParams
     * @return ResultObjectMsg<List<Map<String, Object>>>
     * @throws Exception
     */
    public ResultObjectMsg<List<Map<String, Object>>> searchApiResidential(Map<String, Object> apiParams) throws Exception {
        if (null == apiParams) {
            return new ResultObjectMsg<List<Map<String, Object>>>("缺少请求参数.");
        }
        if (StringUtil.isNullOrEmpty((String) apiParams.get("premName"))) {
            return new ResultObjectMsg<List<Map<String, Object>>>("缺少楼盘名称.");
        }
        return new ResultObjectMsg<List<Map<String, Object>>>(residentialMapper.searchApiResidential(apiParams));
    }

    /**
     * 根据小区ID获取所有房源信息
     *
     * @param apiParams
     * @return ResultObjectMsg<List<Map<String, Object>>>
     * @throws Exception
     */
    public ResultObjectMsg<List<Map<String, Object>>> searchApiApartment(Map<String, Object> apiParams) throws Exception {
        if (null == apiParams) {
            return new ResultObjectMsg<List<Map<String, Object>>>("缺少请求参数.");
        }
        if (StringUtil.isNullOrEmpty((String) apiParams.get("premId"))) {
            return new ResultObjectMsg<List<Map<String, Object>>>("缺少楼盘ID.");
        }
        return new ResultObjectMsg<List<Map<String, Object>>>(apartmentMapper.searchApiApartment(apiParams));
    }

    /**
     * 根据图片ID返回图片地址信息
     *
     * @param imgIds
     * @return ResultObjectMsg<Map<String,Object>>
     */
    public ResultObjectMsg<List<Map<String, Object>>> searchApiImage(String imgIds) {
        if (StringUtil.isNullOrEmpty(imgIds)) {
            return new ResultObjectMsg<List<Map<String, Object>>>("缺少图片ID.");
        }
        if (!imgIds.startsWith("'") || !imgIds.endsWith("'")) {
            return new ResultObjectMsg<List<Map<String, Object>>>("参数格式不正确.");
        }
        String[] paramsArr = imgIds.replace("'", "").split(",");
        List<Map<String, Object>> paramsList = new ArrayList<Map<String, Object>>();
        if (null != paramsArr && paramsArr.length > 0) {
            for (String imgId : paramsArr) {
                Map<String, Object> map = new HashMap<String, Object>();
                map.put("imgId", imgId);
                paramsList.add(map);
            }
        }
        return new ResultObjectMsg<List<Map<String, Object>>>(imageMapper.searchApiImage(paramsList));
    }

    /**
     * @param houseId
     * @return
     */
    public ResultObjectMsg<Map<String, Object>> searchApiHouse(String houseId) {
        if (StringUtil.isNullOrEmpty(houseId)) {
            return new ResultObjectMsg<Map<String, Object>>("缺少房源ID.");
        }
        return new ResultObjectMsg<Map<String, Object>>(houseMapper.searchApiHouse(houseId));
    }

    /**
     * @param roomId
     * @return
     */
    public ResultObjectMsg<Map<String, Object>> searchApiApartment(String roomId) {
        if (StringUtil.isNullOrEmpty(roomId)) {
            return new ResultObjectMsg<Map<String, Object>>("缺少roomId.");
        }
        return new ResultObjectMsg<Map<String, Object>>(houseMapper.searchApiApartment(roomId));
    }

    /**
     * 随机分配官网维护人
     *
     * @param pageData
     * @return
     */
    public ResultObjectMsg<SysUser> selectRodomWebUser(Map<String, Object> pageData) {
        String house_id = (String) pageData.get("house_id");

        houseRentOfficailPersonImpl.configOfficailPerson(house_id);
        String user_id = houseMapper.getWebManagerUidByHouseId(house_id);
        if (StringUtil.isNullOrEmpty(user_id)) {
            return new ResultObjectMsg<SysUser>(new SysUser());
        }
        return userService.getSysUserByUserId(user_id);
    }

    private String getRentDepIds(String depId) {
        String childDepIds = userService.getChildDepIds(depId);
        childDepIds = StringUtil.searchParamsByMarks(childDepIds, "'");
        Map<String, String> data = new HashMap<>();
        data.put("depIds", childDepIds);
        String rentDepIds = houseMapper.getRentChildDepIds(data);


        return rentDepIds;

    }

    public ResultMsg randomUpdateWebManger(String building_id, String belong_did, String belong_uid, String houseId) {
        try {
            SysUser webUser = this.randomWebManger(building_id, belong_did, belong_uid);
            houseMapper.updateWebMangerUidByWeb(houseId, webUser.getUser_id());
            return ResultMsg.createOkMsg();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private SysUser randomWebManger(String building_id, String belong_did, String belong_uid) {

        SysUser webUser = new SysUser();
        if (null != building_id) {
            //查询楼盘责任部门--
            List<SysDepart> list = houseMapper.searchResidentialBuildingDepIdByBuildingId(building_id);
            //检查dep_id是否是出租房源责任人uid
            int count = 0;
            List<SysUser> rentUsers = new ArrayList<>();
            for (SysDepart sysDepart : list) {
                if (sysDepart != null) {
                    String depId = sysDepart.getDep_id();
                    if (DictConstants.BusinessType.InOutNotSeparate.value().equals(sysDepart.getBusiness_type())) {//楼盘责任部门吸收不分
                        String childDepIds = userService.getChildDepIds(depId);
                        for (String childDepId : childDepIds.split(",")) {
                            List<SysUser> temp = userService.getSysUserByDepart(childDepId);
                            if (null != temp) {
                                for (SysUser sysUser : temp) {
                                    if (belong_uid.equals(sysUser.getUser_id())) {
                                        count++;
                                        break;
                                    }
                                }
                                rentUsers.addAll(temp);
                            }

                        }
                    }
                    if (DictConstants.BusinessType.InOutSeparate.value().equals(sysDepart.getBusiness_type())) {//吸收分离
                        String depIds = this.getRentDepIds(depId);//租赁组部门id
                        if (depIds != null) {
                            for (String childDepId : depIds.split(",")) {
                                List<SysUser> temp = userService.getSysUserByDepart(childDepId);
                                if (null != temp) {
                                    rentUsers.addAll(temp);
                                }
                            }
                        }

                    }

                }

            }

            if (count > 0) {//存在就分配给此人
                webUser.setDep_id(belong_did);
                webUser.setUser_id(belong_uid);

            } else if (count == 0) {

                if (rentUsers.size() > 0) {
                    //随机获得维护人
                    webUser = rentUsers.get((int) (1 + Math.random() * rentUsers.size()) - 1);
                }
            }
        }
        return webUser;

    }

    /**
     * 预定房源普单列表
     *
     * @param pageData
     * @return ResultObjectMsg<PagingHelper<Map<String, Object>>>
     * @throws Exception
     */
    public ResultObjectMsg<PagingHelper<Map<String, Object>>> searchBookAvailabilityGeneralList(Map<String, Object> pageData) throws Exception {
        if (null == pageData) {
            return new ResultObjectMsg<PagingHelper<Map<String, Object>>>("缺少参数.");
        }

        int page_num = ParameterUtil.getInt(pageData, "pageNumber", 1);
        int page_size = ParameterUtil.getInt(pageData, "pageSize", 10);

        PagingHelper<Map<String, Object>> ph = new PagingHelper<Map<String, Object>>();
        ph.setPerPageSize(page_size);
        ph.setCurrentPage(page_num);

        pageData.put("begin_num", ph.getBeginRowNumber());
        pageData.put("end_num", ph.getEndRowNumber());

        List<Map<String, Object>> list = houseMapper.searchBookAvailabilityHouseList(pageData);
        Integer count = houseMapper.countSearchBookAvailabilityHouse(pageData);

        ph.setTotal(count); // 设置总的记录数
        ph.setRows(list); // 设置返回的记录
        return new ResultObjectMsg<PagingHelper<Map<String, Object>>>(ph);
    }

    /**
     * 开发自营房源状态变更
     *
     * @param sysUser
     * @param house_id
     * @param house_status
     * @return ResultMsg
     * @throws Exception
     */
    @Transactional
    public ResultMsg updateStatus(SysUser sysUser, String house_id, String house_status, String category) throws Exception {
        try {
            if (null == sysUser) {
                return ResultMsg.createErrorMsg("用户不存在,请登录.");
            }
            if (StringUtil.isNullOrEmpty(house_id)) {
                return ResultMsg.createErrorMsg("缺少房屋ID.");
            }
            if (StringUtil.isNullOrEmpty(house_status) && null == category) {
                return ResultMsg.createErrorMsg("缺少房屋状态或类别.");
            }
            House houseOld = houseMapper.selectByHouseId(house_id);
            if (null == houseOld) {
                return ResultMsg.createErrorMsg("房屋不存在.");
            }
            HouseRent houseRentOld = houseRentMapper.selectByHouseId(house_id);
            if (null == houseRentOld) {
                return ResultMsg.createErrorMsg("出租房屋不存在.");
            }
            HouseRent houseRent = new HouseRent();
            houseRent.setHouse_id(house_id);
            if (!StringUtil.isNullOrEmpty(house_status)) {
                houseRent.setHouse_status(house_status);
            }
            if (null != category) {
                houseRent.setCategory(category);
            }

            houseRent.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
            houseRent.setUpdate_uid(sysUser.getUser_id());
            houseRentMapper.updateHouseStatusCategory(houseRent);
            StringBuffer sb = new StringBuffer("");
            if ((null != houseRentOld.getHouse_status() && !houseRentOld.getHouse_status().equals(houseRent.getHouse_status())) || (null != houseRent.getHouse_status() && !houseRent.getHouse_status().equals(houseRentOld.getHouse_status()))) {
                sb.append("【房源状态:" + this.getCnValue(DictConstants.HouseStatus.getDictId(), houseRentOld.getHouse_status()) + "=>" + this.getCnValue(DictConstants.HouseStatus.getDictId(), houseRent.getHouse_status()) + "】");
            }
            if ((null != houseRentOld.getCategory() && !houseRentOld.getCategory().equals(houseRent.getCategory())) && (null != houseRent.getCategory() && !houseRent.getCategory().equals(houseRentOld.getCategory()))) {
                sb.append("【房源类别:" + this.getCnValue(DictConstants.HouseCategory.getDictId(), houseRentOld.getCategory()) + "=>" + this.getCnValue(DictConstants.HouseCategory.getDictId(), houseRent.getCategory()) + "】");
            }
            houseOld.setUpdate_uid(sysUser.getUser_id());
            saveFollow(houseOld, sb.toString());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return ResultMsg.createOkMsg();
    }

//    /**
//     * 
//     * 获取公共区域图
//     * List<HouseRoomImg>
//     * @author longzq
//     * @param house_id
//     * @param house_contract_id
//     * @return
//     */
//    public List<HouseRoomImg>  selectPublicByHouseIdContractId(String house_id,String house_contract_id){
//    	 Map<String, Object> publicHouseRoomImgsMap = new HashMap<String, Object>();
//         publicHouseRoomImgsMap.put("house_id",house_id);
//         publicHouseRoomImgsMap.put("house_contract_id", house_contract_id);
//       List<HouseRoomImg> hrList= houseRoomImgMapper.selectPublicByHouseIdContractId(publicHouseRoomImgsMap);
//       return hrList;
//    }

    /**
     * 根据出租合同查询公寓信息列表
     *
     * @param apiParams
     * @return ResultObjectMsg<List<Map<String, Object>>>
     * @throws Exception
     */
    public ResultObjectMsg<List<Map<String, Object>>> searchApiApartmentByContract(Map<String, Object> apiParams) throws Exception {
        if (null == apiParams) {
            return new ResultObjectMsg<List<Map<String, Object>>>("缺少参数.");
        }
        if (StringUtil.isNullOrEmpty((String) apiParams.get("contract_id")) && StringUtil.isNullOrEmpty((String) apiParams.get("contract_num"))) {
            return new ResultObjectMsg<List<Map<String, Object>>>("缺少出租合同ID或出租合同号.");
        }
        return new ResultObjectMsg<List<Map<String, Object>>>(apartmentMapper.searchApiApartmentByContract(apiParams));
    }

    /**
     * 未删除房源House总数
     *
     * @return Integer
     */
    public Integer searchHouseListCountBySolr() {
        return houseMapper.searchHouseListCountBySolr();
    }

    /**
     * 未删除房源列表
     *
     * @param params
     * @return List<House>
     */
    public List<House> searchHouseListBySolr(Map<String, Object> params) {
        return houseMapper.searchHouseListBySolr(params);
    }

    /**
     * 最近更新的House的总数
     *
     * @return
     */
    public Integer searchHouseUpdateListCountBySolr() {
        return houseMapper.searchHouseUpdateListCountBySolr();
    }

    /**
     * 最近更新的House
     *
     * @return List<House>
     */
    public List<House> searchHouseUpdateListBySolr() {
        return houseMapper.searchHouseUpdateListBySolr();
    }

    /**
     * 最近删除的House房源
     *
     * @return List<House>
     */
    public List<House> searchHouseDeleteListBySolr() {
        return houseMapper.searchHouseDeleteListBySolr();
    }

    /**
     * 所有已删除House的总数
     *
     * @return Integer
     */
    public Integer searchHouseDeleteListALLCountBySolr() {
        return houseMapper.searchHouseDeleteListALLCountBySolr();
    }

    /**
     * 所有已删除的House列表
     *
     * @param params
     * @return List<String>
     */
    public List<String> searchHouseDeleteListALLBySolr(Map<String, Object> params) {
        return houseMapper.searchHouseDeleteListALLBySolr(params);
    }

    /**
     * 审核资料房源导出EXCEL
     *
     * @param queryParaMap
     * @return
     * @throws Exception 2016年8月19日
     *                   ligaochao
     */
    @SuppressWarnings("unchecked")
    public List<Map<String, Object>> searchHouseDevelopListForExportExcel(Map<String, Object> queryParaMap) throws Exception {
        //审核人
        if (null != queryParaMap.get("audit_name_search")) {
            String audit_uid_search = houseDevelopMapper.searchuidLikeName((String) queryParaMap.get("audit_name_search"));
            if (StringUtil.notNullOrEmpty(audit_uid_search)) {
                queryParaMap.put("audit_name_search", audit_uid_search);
            }
            List<String> paraList = new ArrayList<>();
            paraList.add("audit_name_search");
            queryParaMap = StringUtil.readAndWritePageData(queryParaMap, paraList);
        }

        List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
        List<HouseDevelop> houseDevelopList = houseDevelopMapper.searchHouseDevelopList(queryParaMap);
        for (HouseDevelop houseDevelop : houseDevelopList) {
            result.add(BeanUtils.describe(houseDevelop));
        }
        return result;
    }
    
    
    /**
     * 保存资料房源统一接口
     * @param sysUser
     * @param houseDevelop
     * @return
     * @throws Exception 
     */
	public ResultObjectMsg<HouseDevelop> saveHouseDevelopCentral(SysUser sysUser,
			HouseDevelop houseDevelop) throws Exception {
		// TODO Auto-generated method stub
		 if (StringUtil.isNullOrEmpty(houseDevelop.getData_source())) {
        	 return new ResultObjectMsg<HouseDevelop>("数据来源不能为空");
         }
		//1.根据来源判断必填项
		 ResultMsg resultMsg = null;
		switch (houseDevelop.getData_source()) {
		case "OFFICIAL_NET": //官网（不包含面积，跟户型）
			resultMsg = judgeFromWeb(houseDevelop);
			houseDevelop.setSource(DictConstants.HouseSource.OFFICIAL_NET.getKeyEn());
			houseDevelop.setUid("00000000000000000000000000000000");
			houseDevelop.setDid("00000000000000000000000000000000");
			break;
		case "WHCHAT": //微信
			resultMsg = judgeFromWeb(houseDevelop);
			houseDevelop.setSource(DictConstants.HouseSource.WBO_MOBILE.getKeyEn());
			houseDevelop.setUid("00000000000000000000000000000000");
			houseDevelop.setDid("00000000000000000000000000000000");
			break;
		case "DEVELOP": //ERP
			resultMsg = judgeFromWeb(houseDevelop);
			break;
		case "APP": //APP
			resultMsg = judgeFromWeb(houseDevelop);
			houseDevelop.setSource(DictConstants.HouseSource.APP.getKeyEn());
			break;
		case "AISHANGFANG": //爱上房
			resultMsg = judgeFromAishangfang(houseDevelop);
			if(houseDevelop.getBalconys()==null){//如果阳台为null
				houseDevelop.setBalconys(1);
			}
			houseDevelop.setSource(DictConstants.HouseSource.AISHANGFANG.getKeyEn());
			houseDevelop.setUid("00000000000000000000000000000000");
			houseDevelop.setDid("00000000000000000000000000000000");
			break;
		default://默认ERP
			 // 必填项校验
			resultMsg = judgeFromERP(houseDevelop);
			break;
		}
		//2.数据新增
		if(resultMsg!=null&&resultMsg.getCode()==0){
			 resultMsg = saveHouse(sysUser, houseDevelop);
		}
		if(resultMsg!=null&&resultMsg.getCode()==0){
			
			return new ResultObjectMsg<HouseDevelop>(houseDevelop);
		}else{
			return new ResultObjectMsg<HouseDevelop>(resultMsg.getMsg());
		}
	}

	private ResultMsg saveHouse(SysUser sysUser, HouseDevelop houseDevelop)
			throws Exception {
		if (!StringUtil.isNullOrEmpty(houseDevelop.getResidential_id()) && !StringUtil.isNullOrEmpty(houseDevelop.getBuilding_id())) {
		    House house = new House();
		    house.setResidential_id(houseDevelop.getResidential_id());
		    house.setBuilding_id(houseDevelop.getBuilding_id());
		    house.setCity_code(houseDevelop.getCity_code());
		    house.setUnit(houseDevelop.getUnit());
		    house.setHouse_no(houseDevelop.getHouse_no());
		    House houseRes = houseMapper.selectByHouse(house);
		    if (null != houseRes && !"".equals(houseRes.getHouse_id())) {
		        return ResultMsg.createErrorMsg("出租房源已经存在,房源编号:" + houseRes.getHouse_code() + " 房源状态:" + DicTools.getCnValue(DictConstants.HouseStatus.getDictId(), houseRes.getHouse_status()));
		    }
		}

		// 生成房源编号
		SysDistrict city = districtService.getByCode(houseDevelop.getCity_code());
		if (null == city || StringUtil.isNullOrEmpty(city.getAbridge())) {
		    return ResultMsg.createErrorMsg((null != city ? (city.getName() + "缺少汉语拼音.") : "市区不存在"));
		}
		SysDistrict area = districtService.getByCode(houseDevelop.getArea_code());
		if (null == area || StringUtil.isNullOrEmpty(area.getAbridge())) {
		    return ResultMsg.createErrorMsg((null != area ? (area.getName() + "缺少汉语拼音.") : "城区不存在"));
		}
		String house_code = redisService.getCode(CodeTypeConstants.HOUSE_DEVELOP_CODE);
		houseDevelop.setHouse_code(BusinessCodeUtil.generateCode(city.getAbridge(), area.getAbridge(), house_code.trim()));
		 if (StringUtil.isNullOrEmpty(house_code)) {
		    return ResultMsg.createErrorMsg("redisService生成房源编号失败.");
		}
		// 主键--
		String uuid = UuidUtil.getUUID();
		houseDevelop.setHouse_develop_id(uuid);
		houseDevelop.setDeleted(0);
		houseDevelop.setAudit_status(DictConstants.AuditStatus.NO_AUDIT.value());
		houseDevelop.setCreate_time(DateUtil.getCurrentDateTimeAsString());
		houseDevelop.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
		if(sysUser!=null){
			houseDevelop.setCreate_uid(sysUser.getUser_id());
			houseDevelop.setUpdate_uid(sysUser.getUser_id());
		}else{
			if("AISHANGFANG".equals(houseDevelop.getData_source())){
				houseDevelop.setCreate_uid("爱上房");
				houseDevelop.setUpdate_uid("爱上房");
			}else{
				houseDevelop.setCreate_uid("官网/M站/APP");
				houseDevelop.setUpdate_uid("官网/M站/APP");
			}
		}
		houseDevelopMapper.insertHouseDevelop(houseDevelop);
		// 保存关联关系--如果有则新增
		saveHouseDevelopImg(houseDevelop);
		saveHouseDevelopConfiguration(houseDevelop);
		return ResultMsg.createOkMsg();
	}

	private ResultMsg judgeFromERP(HouseDevelop houseDevelop) {
		if (StringUtil.isNullOrEmpty(houseDevelop.getContact_tel())) {
		    return ResultMsg.createErrorMsg("请输入联系方式.");
		}
		if (houseDevelop.getContact_tel().length() < 8 || houseDevelop.getContact_tel().length() > 12) {
		    return ResultMsg.createErrorMsg("请输入8~12位的联系方式.");
		}
		if (StringUtil.isNullOrEmpty(houseDevelop.getContact())) {
		    return ResultMsg.createErrorMsg("请输入联系人姓名.");
		}
		if (StringUtil.isNullOrEmpty(houseDevelop.getCity_code())) {
		    return ResultMsg.createErrorMsg("缺少市区.");
		}
		if (StringUtil.isNullOrEmpty(houseDevelop.getArea_code())) {
		    return ResultMsg.createErrorMsg("缺少城区.");
		}
		if (StringUtil.isNullOrEmpty(houseDevelop.getResidential_name())) {
		    return ResultMsg.createErrorMsg("缺少楼盘名称.");
		}
		if (StringUtil.isNullOrEmpty(houseDevelop.getBusiness_circle_id())) {
		    return ResultMsg.createErrorMsg("缺少商圈.");
		}
		if (StringUtil.isNullOrEmpty(houseDevelop.getBuilding_name())) {
		    return ResultMsg.createErrorMsg("缺少栋座名称【含后缀】.");
		}
		if (StringUtil.isNullOrEmpty(houseDevelop.getUnit())) {
		    return ResultMsg.createErrorMsg("缺少单元.");
		}
		if (StringUtil.isNullOrEmpty(houseDevelop.getFloor())) {
		    return ResultMsg.createErrorMsg("缺少楼层.");
		}
		if (houseDevelop.getFloor().startsWith("0")) {
		    return ResultMsg.createErrorMsg("楼层不能以0开头.");
		}
		if (StringUtil.isNullOrEmpty(houseDevelop.getHouse_no())) {
		    return ResultMsg.createErrorMsg("缺少具体房号.");
		}
		if (houseDevelop.getHouse_no().startsWith("0")) {
		    return ResultMsg.createErrorMsg("房号不能以0开头.");
		}
		if (null == houseDevelop.getDid()) {
		    return ResultMsg.createErrorMsg("请选择归属部门.");
		}
		if (null == houseDevelop.getUid()) {
		    return ResultMsg.createErrorMsg("请选择归属人.");
		}
		return ResultMsg.createOkMsg();
	}

	private ResultMsg judgeFromAishangfang(HouseDevelop houseDevelop) {
		if (StringUtil.isNullOrEmpty(houseDevelop.getArea_code())) {
		     return ResultMsg.createErrorMsg("缺少城区.");
		 }
		 if (StringUtil.isNullOrEmpty(houseDevelop.getCity_code())) {
		     return ResultMsg.createErrorMsg("缺少市区.");
		 }
		 if (StringUtil.isNullOrEmpty(houseDevelop.getResidential_name())) {
		     return ResultMsg.createErrorMsg("缺少楼盘名称.");
		 }
		 if (StringUtil.isNullOrEmpty(houseDevelop.getBuilding_name())) {
		     return ResultMsg.createErrorMsg("缺少栋座名称【含后缀】.");
		 }
		 if (StringUtil.isNullOrEmpty(houseDevelop.getUnit())) {
		     return ResultMsg.createErrorMsg("缺少单元.");
		 }
		  if (StringUtil.isNullOrEmpty(houseDevelop.getHouse_no())) {
		      return ResultMsg.createErrorMsg("缺少具体房号.");
		  	}
		  if (houseDevelop.getHouse_no().startsWith("0")) {
		      return ResultMsg.createErrorMsg("房号不能以0开头.");
		  	}
		  if (StringUtil.isNullOrEmpty(houseDevelop.getContact_tel())) {
		 	 return ResultMsg.createErrorMsg("请输入联系方式.");
		  	}
		  if (houseDevelop.getContact_tel().length() < 8 || houseDevelop.getContact_tel().length() > 12) {
		 	 return ResultMsg.createErrorMsg("请输入8~12位的联系方式.");
		  	}
		  if (StringUtil.isNullOrEmpty(houseDevelop.getContact())) {
		 	 return ResultMsg.createErrorMsg("请输入联系人姓名.");
		  	}
		  if (null == houseDevelop.getRental_price() || String.valueOf(houseDevelop.getRental_price()).length() > 8) {
		 	 return ResultMsg.createErrorMsg("请输入小于8位的月租价.");
		  	}
		 if (null == houseDevelop.getRooms() || null == houseDevelop.getLivings() || null == houseDevelop.getKitchens() || null == houseDevelop.getBathrooms() ) {
			 return ResultMsg.createErrorMsg("请完善户型.");
		 }
		 if (null == houseDevelop.getBuild_area()) {
			 return ResultMsg.createErrorMsg("请输入面积.");
		 }
		return ResultMsg.createOkMsg();
	}

	private ResultMsg judgeFromWeb(HouseDevelop houseDevelop) {
		if (StringUtil.isNullOrEmpty(houseDevelop.getArea_code())) {
             return ResultMsg.createErrorMsg("缺少城区.");
         }
		 if (StringUtil.isNullOrEmpty(houseDevelop.getCity_code())) {
             return ResultMsg.createErrorMsg("缺少市区.");
         }
		 if (StringUtil.isNullOrEmpty(houseDevelop.getResidential_name())) {
             return ResultMsg.createErrorMsg("缺少楼盘名称.");
         }
		 
	      if (StringUtil.isNullOrEmpty(houseDevelop.getContact_tel())) {
	     	 return ResultMsg.createErrorMsg("请输入联系方式.");
	      	}
	      if (houseDevelop.getContact_tel().length() < 8 || houseDevelop.getContact_tel().length() > 12) {
	     	 return ResultMsg.createErrorMsg("请输入8~12位的联系方式.");
	      	}
		return ResultMsg.createOkMsg();
	}
	
	
	public ResultObjectMsg<PagingHelper<HouseDevelop>> selectHouseDevelopSimilarList(Map<String, Object> pageData){
        int page_num = ParameterUtil.getInt(pageData, "pageNumber", 1);
        int page_size = ParameterUtil.getInt(pageData, "pageSize", 10);

        PagingHelper<HouseDevelop> ph = new PagingHelper<HouseDevelop>();
        ph.setPerPageSize(page_size);
        ph.setCurrentPage(page_num);

        pageData.put("begin_num", ph.getBeginRowNumber());
        pageData.put("end_num", ph.getEndRowNumber());

        List<HouseDevelop> list = houseDevelopMapper.selectHouseDevelopSimilarList((String)pageData.get("house_develop_id"));
        Integer count = houseDevelopMapper.selectHouseDevelopSimilarCount((String)pageData.get("house_develop_id"));

        ph.setTotal(count); // 设置总的记录数
        ph.setRows(list); // 设置返回的记录

        return new ResultObjectMsg<>(ph);
	}
	
	public static void main(String[] args) {
		 Map<String, Object> params = new HashMap<String, Object>();
         params.put("houseId", "111");
		 String postForm = HttpClientUtil.postForm("+", params );
		 System.out.println(postForm);
	}

	public ResultMsg changeHouseBelong(SysUser sysUser,Map<String, Object> pageData) {
		//根据房源获取houseRent
		House house = houseMapper.selectByHouseId((String)pageData.get("distribution_house_id"));
		HouseRent houseRent = house.getHouseRent();
		//更换归属人
		houseRent.setBelong_did((String)pageData.get("distribution_belong_did"));
		houseRent.setBelong_uid((String)pageData.get("distribution_belong_uid"));
		houseRent.setBelong_time(DateUtil.getCurrentDateTimeAsString());
		//更新归属时间
		houseRentMapper.updateByPrimaryKey(houseRent);
		//添加角色变更日志
		insertHistory(sysUser, houseRent);
		return ResultMsg.createOkMsg();
	}

	private void insertHistory(SysUser sysUser, HouseRent houseRent) {
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put("house_id",houseRent.getHouse_id());
		map.put("object_id", houseRent.getHouse_id());
		map.put("create_uid", houseRent.getBelong_uid());
		HouseRolesChangeHistory lastRecord = houseRolesChangeHistoryMapper.selectLastRecord(map);
		HouseRolesChangeHistory hrch = new HouseRolesChangeHistory();
		hrch.initBase(sysUser.getUser_id());
		hrch.setBelong_uid(houseRent.getBelong_uid());
		hrch.setHouse_id(houseRent.getHouse_id());
		if(lastRecord == null||lastRecord.getBelong_uid()==null){
			houseRolesChangeHistoryMapper.insert(hrch);
		}else if(!lastRecord.getBelong_uid().equals(houseRent.getBelong_uid())){//最后一条变更记录不是自己
			//判断是否是24小时内的变更的
			Date lastReord = DateUtil.parse(lastRecord.getCreate_time(), DateUtil.DATETIME_FORMAT_PATTERN);
			Date yesterDay = DateUtil.yesterDay(new Date());
			if(lastReord.before(yesterDay)){//自动作废
				houseRolesChangeHistoryMapper.insert(hrch);
			}else{//手动变更
				hrch.setChange_type("MANUAL");
				houseRolesChangeHistoryMapper.insert(hrch);
			}
		}
	}
}
