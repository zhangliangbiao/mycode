package com.isz.erp.house.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.solr.client.solrj.SolrClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.isz.erp.common.page.PagingHelper;
import com.isz.erp.common.util.IszLogger;
import com.isz.erp.common.util.ResultMsg;
import com.isz.erp.common.util.ResultObjectMsg;
import com.isz.erp.common.util.SolrClientUtil;
import com.isz.erp.common.util.SpatialUtils;
import com.isz.erp.facade.house.entity.Apartment;
import com.isz.erp.facade.house.entity.ApartmentRelet;
import com.isz.erp.facade.house.entity.HouseConfiguration;
import com.isz.erp.facade.house.entity.HouseRoom;
import com.isz.erp.facade.house.entity.HouseRoomImg;
import com.isz.erp.facade.house.service.ApartmentService;
import com.isz.erp.facade.house.vo.ApartmentContractVo;
import com.isz.erp.facade.house.vo.ApartmentHouseContractVo;
import com.isz.erp.facade.house.vo.ShareHouseRoomVo;
import com.isz.erp.facade.user.entity.SysUser;
import com.isz.erp.facade.user.vo.SessionVo;
import com.isz.erp.house.biz.ApartmentServiceBiz;
import com.isz.erp.service.comm.house.service.HandleApartmentStatusService;
import com.isz.erp.service.comm.house.service.HandleApartmentStatusService.RentAffectApartment_ActionType;

/**
 * 自营公寓接口实现
 *
 * @author lws * luwenshan@ishangzu.com
 * @version 1.0 *
 * @date 创建时间：2016年1月22日 下午6:17:03
 * @instruction 说明：
 */
@Service("apartmentServiceFacade")
public class ApartmentServiceFacade implements ApartmentService {
    private String SOLR_CORE = "apartment_core";
    @Autowired
    private SolrClientUtil solrClientUtil;
    @Autowired
    private ApartmentServiceBiz apartmentServiceBiz;
    @Autowired
    private HandleApartmentStatusService handleApartmentStatusService;
    // @Override
    // public ResultMsg affectApartmentStatusBatch(SysUser user) {
    // try {
    //
    // this.apartmentServiceBiz.affectApartmentStatusBatch(user);
    //
    // return
    // ResultMsg.createOkMsg("执行合同影响公寓状态成功.").setTypeUpdate().setMenu_name("房源管理").setDes("");
    //
    // } catch (Exception e) {
    // IszLogger.error(e);
    // return
    // ResultMsg.createErrorMsg("执行合同影响公寓状态出错.").setTypeUpdate().setMenu_name("房源管理").setDes("");
    // }
    // }

    @Override
    public ResultMsg cancelApartmentRelet(SessionVo vo, String apartmentId) {
        try {
            return apartmentServiceBiz.cancelApartmentRelet(vo, apartmentId).setMenu_name("管理自营房源").setTypeUpdate()
                    .setDes("");
        } catch (Exception e) {
            IszLogger.error("ApartmentServiceFacade.cancelApartmentRelet", e);
            return ResultMsg.createErrorMsg("取消房源转租出错.").setMenu_name("管理自营房源").setTypeSelect().setDes("");
        }
    }

    @Override
    public ResultObjectMsg<Map<String, Object>> apartmentCanRelet(SessionVo vo, String apartmentId) {
        try {

            return apartmentServiceBiz.apartmentCanRelet(vo, apartmentId).setMenu_name("管理自营房源").setTypeSelect()
                    .setDes("");

        } catch (Exception e) {
            IszLogger.error("ApartmentServiceFacade.apartmentCanRelet", e);
            return new ResultObjectMsg<Map<String, Object>>(e.getMessage()).setMenu_name("管理自营房源").setTypeSelect()
                    .setDes("");
        }
    }

    @Override
    public ResultMsg saveApartmentRelet(SessionVo vo, ApartmentRelet relet) {
        try {
            return apartmentServiceBiz.saveApartmentRelet(vo, relet).setMenu_name("管理自营房源").setTypeSelect().setDes("");
        } catch (Exception e) {
            IszLogger.error("ApartmentServiceFacade.saveApartmentRelet", e);
            return ResultMsg.createErrorMsg("房源转租失败.").setMenu_name("管理自营房源").setTypeSelect().setDes("");
        }
    }

    @Override
    public ResultObjectMsg<PagingHelper<Apartment>> searchApartmentList(Map<String, Object> pageData) {
        try {
            return apartmentServiceBiz.searchEntireApartmentList(pageData);
        } catch (Exception e) {
            IszLogger.error("ApartmentServiceFacade.searchApartmentList", e);
            return new ResultObjectMsg<PagingHelper<Apartment>>(e.getMessage());
        }
    }
    
    @Override
    public ResultObjectMsg<PagingHelper<ApartmentContractVo>> selectApartmentContractList(SessionVo sessionVo, Map<String, Object> apartmentMap) {
    	try {
    		return apartmentServiceBiz.selectApartmentContractList(sessionVo, apartmentMap);
    	} catch (Exception e) {
    		IszLogger.error("ApartmentServiceFacade.selectApartmentContractList", e);
    		return new ResultObjectMsg<PagingHelper<ApartmentContractVo>>(e.getMessage());
    	}
    }
    
    @Override
    public ResultObjectMsg<PagingHelper<ApartmentHouseContractVo>> selectApartmentHouseContractList(SessionVo sessionVo, Map<String, Object> apartmentMap) {
    	try {
    		return apartmentServiceBiz.selectApartmentHouseContractList(sessionVo, apartmentMap);
    	} catch (Exception e) {
    		IszLogger.error("ApartmentServiceFacade.selectApartmentHouseContractList", e);
    		return new ResultObjectMsg<PagingHelper<ApartmentHouseContractVo>>(e.getMessage());
    	}
    }

    @Override
    public ResultObjectMsg<Apartment> selectApartmentDetail(SessionVo sessionVo, String apartmentId) {
        try {
            return apartmentServiceBiz.selectEntireApartmentDetail(sessionVo, apartmentId);
        } catch (Exception e) {
            IszLogger.error("ApartmentServiceFacade.selectApartmentDetail", e);
            return new ResultObjectMsg<Apartment>(e.getMessage());
        }
    }

    // @Override
    // public ResultObjectMsg<PagingHelper<Apartment>>
    // searchShareHouseList(Map<String, Object> pageData) {
    // try {
    // return apartmentServiceBiz.searchShareHouseList(pageData);
    // } catch (Exception e) {
    // IszLogger.error("ApartmentServiceFacade.searchShareHouseList", e);
    // return new ResultObjectMsg<PagingHelper<Apartment>>(e.getMessage());
    // }
    // }

    @Override
    public ResultObjectMsg<Apartment> selectShareHouseDetail(String apartmentId, SessionVo sessionVo) {
        try {
            return apartmentServiceBiz.selectShareApartmentDetail(apartmentId, sessionVo);
        } catch (Exception e) {
            IszLogger.error("ApartmentServiceFacade.selectShareHouseDetail", e);
            return new ResultObjectMsg<Apartment>(e.getMessage());
        }
    }

    @Override
    public ResultMsg saveEntireHouse(Apartment apartment, SessionVo sessionVo) {
        try {
            return apartmentServiceBiz.saveEntireHouse(apartment, sessionVo);
        } catch (Exception e) {
            IszLogger.error("ApartmentServiceFacade.saveEntireHouse", e);
            return ResultMsg.createErrorMsg(e.getMessage());
        }
    }

    @Override
    public ResultObjectMsg<List<HouseConfiguration>> getConfigurationByHouse(String house_id) {
        try {
            return apartmentServiceBiz.selectConfigurationByHouse(house_id);
        } catch (Exception e) {
            IszLogger.error("ApartmentServiceFacade.selectApartmentDetail", e);
            return new ResultObjectMsg<List<HouseConfiguration>>(e.getMessage());
        }
    }

    @Override
    public ResultMsg deleteApartment(SysUser sysUser, Map<String, Object> pageData) {
        try {
            return apartmentServiceBiz.deleteApartment(sysUser, pageData);
        } catch (Exception e) {
            IszLogger.error("ApartmentServiceFacade.deleteApartment", e);
            return ResultMsg.createErrorMsg(e.getMessage());
        }
    }

    @Override
    public ResultMsg saveShareHouse(Apartment apartment, SessionVo sessionVo) {
        try {
            return apartmentServiceBiz.saveShareHouse(apartment, sessionVo);
        } catch (Exception e) {
            IszLogger.error("ApartmentServiceFacade.saveShareHouse", e);
            return ResultMsg.createErrorMsg(e.getMessage());
        }
    }
    
    @Override
    public ResultMsg saveShareHouseImages(Apartment apartment, SessionVo sessionVo) {
    	try {
    		return apartmentServiceBiz.saveShareHouseImages(apartment, sessionVo);
    	} catch (Exception e) {
    		IszLogger.error("ApartmentServiceFacade.saveShareHouse", e);
    		return ResultMsg.createErrorMsg(e.getMessage());
    	}
    }

    @Override
    public ResultObjectMsg<List<ShareHouseRoomVo>> selectShareHouseRoomList(Map<String, Object> pageData) {
        try {
            return apartmentServiceBiz.selectShareHouseRoomList(pageData);
        } catch (Exception e) {
            IszLogger.error("ApartmentServiceFacade.selectShareHouseRoomList", e);
            return new ResultObjectMsg<List<ShareHouseRoomVo>>(e.getMessage());
        }
    }

    @Override
    public ResultObjectMsg<HouseRoom> selectHouseRoomDetail(Map<String, Object> pageData) {
        try {
            return apartmentServiceBiz.selectHouseRoomDetail(pageData);
        } catch (Exception e) {
            IszLogger.error("ApartmentServiceFacade.selectHouseRoomDetail", e);
            return new ResultObjectMsg<HouseRoom>(e.getMessage());
        }
    }

    @Override
    public ResultObjectMsg<HouseRoomImg> saveHouseRoomImg(HouseRoomImg houseRoomImg, SysUser sysUser) {
        try {
            return apartmentServiceBiz.saveHouseRoomImg(houseRoomImg, sysUser);
        } catch (Exception e) {
            IszLogger.error("ApartmentServiceFacade.saveHouseRoomImg", e);
            return new ResultObjectMsg<HouseRoomImg>(e.getMessage());
        }
    }
    
    @Override
    public ResultMsg saveHouseConfiguration(Apartment apartment, SessionVo sessionVo) {
    	try {
    		return apartmentServiceBiz.saveHouseConfiguration(apartment, sessionVo);
    	} catch (Exception e) {
    		IszLogger.error("ApartmentServiceFacade.saveHouseConfiguration", e);
    		return ResultMsg.createErrorMsg(e.getMessage());
    	}
    }
    
    @Override
    public ResultMsg saveHouseImage(Apartment apartment, SessionVo sessionVo) {
    	try {
    		return apartmentServiceBiz.saveHouseImage(apartment, sessionVo);
    	} catch (Exception e) {
    		IszLogger.error("ApartmentServiceFacade.saveHouseImage", e);
    		return ResultMsg.createErrorMsg(e.getMessage());
    	}
    }

    @Override
    public ResultMsg deleteHouseRoomImg(Map<String, Object> pageData) {
        try {
            return apartmentServiceBiz.deleteHouseRoomImg(pageData);
        } catch (Exception e) {
            IszLogger.error("ApartmentServiceFacade.deleteHouseRoomImg", e);
            return ResultMsg.createErrorMsg(e.getMessage());
        }
    }

    @Override
    public ResultMsg saveApartment(SysUser sysUser, Apartment apartment) {
        try {
            return apartmentServiceBiz.saveApartment(sysUser, apartment);
        } catch (Exception e) {
            IszLogger.error("ApartmentServiceFacade.saveApartment", e);
            return ResultMsg.createErrorMsg(e.getMessage());
        }

    }

    @Override
    public ResultMsg syncApartmentIsActive(SysUser sysUser, String house_contract_id, String house_id) {
        try {
            return apartmentServiceBiz.syncApartmentIsActive(sysUser, house_contract_id, house_id);
        } catch (Exception e) {
            IszLogger.error("ApartmentServiceFacade.saveApartment", e);
            return ResultMsg.createErrorMsg(e.getMessage());
        }
    }

    @Override
    public ResultObjectMsg<List<Apartment>> getApartmentByHouseContractId(String house_contract_id) {
        try {
            return new ResultObjectMsg<List<Apartment>>(
                    apartmentServiceBiz.getApartmentByHouseContractId(house_contract_id));
        } catch (Exception e) {
            IszLogger.error("ApartmentServiceFacade.getApartmentByHouseContractId", e);
            return new ResultObjectMsg<List<Apartment>>(e.getMessage());
        }
    }

    @Override
    public ResultMsg batchApartmentExpire(List<String> ids) {
        try {
            apartmentServiceBiz.batchApartmentExpire(ids);
            return ResultMsg.createOkMsg();
        } catch (Exception e) {
            IszLogger.error("ApartmentServiceFacade.batchApartmentExpire", e);
            return ResultMsg.createErrorMsg(e.getMessage());
        }
    }

    @Override
    public ResultObjectMsg<SysUser> selectRodomApartmentWebUser(String apartmentId) {
        try {
            return apartmentServiceBiz.selectRodomApartmentWebUser(apartmentId);
        } catch (Exception e) {
            IszLogger.error("apartmentServiceBiz.selectRodomApartmentWebUser", e);
            return new ResultObjectMsg<SysUser>(e.getMessage());
        }
    }

    @Override
    public ResultObjectMsg<PagingHelper<Map<String, Object>>> searchBookAvailabilityApartmentList(
            Map<String, Object> pageData) {
        try {
            return apartmentServiceBiz.searchBookAvailabilityApartmentList(pageData);
        } catch (Exception e) {
            IszLogger.error("apartmentServiceBiz.searchBookAvailabilityApartmentList", e);
            return new ResultObjectMsg<PagingHelper<Map<String, Object>>>(e.getMessage());
        }
    }

    @Override
    public ResultMsg updateStatus(SysUser sysUser, String apartment_id, String rent_status, String category) {
        try {
            apartmentServiceBiz.updateStatus(sysUser, apartment_id, rent_status, category);
            return ResultMsg.createOkMsg();
        } catch (Exception e) {
            IszLogger.error("ApartmentServiceFacade.updateStatus", e);
            return ResultMsg.createErrorMsg(e.getMessage());
        }
    }

    @Override
    public ResultObjectMsg<List<Map<String, Object>>> searchPricingApartment(String apartment_id) {
        try {
            return apartmentServiceBiz.searchPricingApartment(apartment_id);
        } catch (Exception e) {
            IszLogger.error("apartmentServiceBiz.searchPricingApartment", e);
            return new ResultObjectMsg<List<Map<String, Object>>>(e.getMessage());
        }
    }

    @Override
    public ResultObjectMsg<Map<String, Object>> confirmPricing(SessionVo sessionVo,
                                                               List<Map<String, Object>> pageListData) {
        try {
            return apartmentServiceBiz.confirmPricing(sessionVo, pageListData);
        } catch (Exception e) {
            IszLogger.error("apartmentServiceBiz.confirmPricing", e);
            return new ResultObjectMsg<Map<String, Object>>(e.getMessage());
        }
    }

    @Override
    public ResultObjectMsg<List<HouseRoomImg>> selectPublicByHouseIdContractId(String house_id,
                                                                               String house_contract_id) {
        return apartmentServiceBiz.selectPublicByHouseIdContractId(house_id, house_contract_id);
    }

    @Override
    public ResultObjectMsg<List<HouseRoomImg>> selectHouseRoomImg(String room_id) {
        return apartmentServiceBiz.selectHouseRoomImg(room_id);
    }

    @Override
    public ResultMsg executeCalculateFireStatusJob() {
        try {
            return apartmentServiceBiz.executeCalculateFireStatusJob();
        } catch (Exception e) {
            IszLogger.error("apartmentServiceBiz.executeCalculateFireStatusJob", e);
            return ResultMsg.createErrorMsg(e.getMessage());
        }
    }

    @Override
    public ResultMsg solrApartmentIndexAll() {
        IszLogger.info("solr:apartment index all start");

        this.solrApartmentIndex(null);
        IszLogger.info("solr:apartment index all end");
        return ResultMsg.createOkMsg();
    }

    private ResultMsg solrApartmentIndex(String apartment_id) {

        Integer count = 0;
        int limit = 500; // 每次获取条数
        int offset = 0;// 下一个开始条数
        Map<String, Object> params = new HashMap<>();
        SolrClient solrClient = solrClientUtil.getSolrClient(SOLR_CORE);
        if (apartment_id == null) {
            count = apartmentServiceBiz.searchApartmentListCountBySolr();
        }
        do {

            params.put("limit", limit);
            params.put("offset", offset);
            params.put("apartment_id", apartment_id);
            List<Apartment> apartments = apartmentServiceBiz.searchApartmentListBySolr(params);

            try {
                // 如果增量索引查不到公寓id数据时，删除索引
                if ((null == apartments || apartments.size() == 0) && apartment_id != null) {
                    solrClient.deleteById(apartment_id);
                    solrClient.commit();
                } else {
                    if (null != apartments && apartments.size() > 0) {
                        checkGeoPoint(apartments);
                        solrClient.addBeans(apartments, 20000);
                        solrClient.commit();
                    }
                }

            } catch (Exception e) {
                if (apartment_id == null) {
                    IszLogger.error(SOLR_CORE + " solr 全量索引 error：" + e);

                } else {
                    IszLogger.error(SOLR_CORE + " solr 添加索引 house_id:" + apartment_id + "error：" + e);

                }
            }
            offset += limit;

        } while (count > offset);
        return ResultMsg.createOkMsg();

    }

    @Override
    public ResultMsg solrApartmentDeleteIndexByUpdateTime() {
        IszLogger.info("solr:apartment index delete start");
        List<Apartment> apartments = apartmentServiceBiz.searchApartmentDeleteListBySolr();
        SolrClient solrClient = solrClientUtil.getSolrClient(SOLR_CORE);
        if (null != apartments && apartments.size() > 0) {
            for (Apartment apartment : apartments) {
                try {
                    solrClient.deleteById(apartment.getApartment_id());
                } catch (Exception e) {
                    IszLogger.error(SOLR_CORE + " solr 增量删除 error：" + e);
                }
            }
        }
        try {
            solrClient.commit();
        } catch (Exception e) {
            IszLogger.error(SOLR_CORE + " solr 增量删除提交时 error：" + e);
        }
        IszLogger.info("solr:apartment index delete end");
        return ResultMsg.createOkMsg();
    }

    @Override
    public ResultMsg solrApartmentUpdateIndexByUpdateTime() {
        Integer count = 0;
        int limit = 500; // 每次获取条数
        int offset = 0;// 下一个开始条数
        Map<String, Object> params = new HashMap<>();
        SolrClient solrClient = solrClientUtil.getSolrClient(SOLR_CORE);
        count = apartmentServiceBiz.searchApartmentUpdateListCountBySolr();
        do {
            params.put("limit", limit);
            params.put("offset", offset);
            params.put("apartment_update_solr", "apartment_update_solr");
            List<Apartment> apartments = apartmentServiceBiz.searchApartmentListBySolr(params);
            try {
                if (null != apartments && apartments.size() > 0) {
                    checkGeoPoint(apartments);
                    solrClient.addBeans(apartments, 20000);
                    solrClient.commit();
                }
            } catch (Exception e) {
                IszLogger.error(SOLR_CORE + " solr 增量索引 error：" + e);
            }
            offset += limit;

        } while (count > offset);
        return ResultMsg.createOkMsg();
    }

    /**
     * 判断过滤处理错误经纬度的数据
     *
     * @param apartments
     */
    private void checkGeoPoint(List<Apartment> apartments) {
        for (Apartment apartment : apartments) {
            if (!SpatialUtils.isRightGeoPoint(apartment.getLng(), apartment.getLat())) {
                IszLogger.error("Solr定时索引,公寓编号: " + apartment.getApartment_code()
                        + " 楼盘ID: " + apartment.getResidential_id()
                        + " 楼盘名称: " + apartment.getResidential_name()
                        + " 楼盘经纬度(" + apartment.getLng() + "," + apartment.getLat() + ")不正确.");
                apartment.setLng("0");
                apartment.setLat("0");
                // geohashs字段才是位置
                apartment.setGeohashs("0,0");
            }
        }
    }

    @Override
    public ResultMsg solrApartmentUpdateIndex(String apartment_id) {
        IszLogger.info("solr:apartment index update by id:" + apartment_id + "start");
        ResultMsg resultMsg = this.solrApartmentIndex(apartment_id);
        IszLogger.info("solr:apartment index update by id:" + apartment_id + "end");
        return resultMsg;
    }

    @Override
    public ResultMsg solrApartmentDeleteIndex(String apartment_id) {
        IszLogger.info("solr:apartment index delete by id:" + apartment_id + "start");
        SolrClient solrClient = solrClientUtil.getSolrClient(SOLR_CORE);
        try {
            solrClient.deleteById(apartment_id);
            solrClient.commit();
        } catch (Exception e) {
            IszLogger.error(SOLR_CORE + " solr 增量删除 error：" + e);
        }
        IszLogger.info("solr:apartment index delete by id:" + apartment_id + "end");
        return ResultMsg.createOkMsg();
    }

    @Override
    public ResultMsg solrApartmentDeleteIndexAll() {
        IszLogger.info("solr:apartment index delete all start");

        Integer count = apartmentServiceBiz.searchApartmentDeleteListALLCountBySolr();
        int limit = 500; // 每次获取条数
        int offset = 0;// 下一个开始条数
        Map<String, Object> params = new HashMap<>();
        SolrClient solrClient = solrClientUtil.getSolrClient(SOLR_CORE);
        do {

            params.put("limit", limit);
            params.put("offset", offset);
            List<String> apartments = apartmentServiceBiz.searchApartmentDeleteListALLBySolr(params);
            try {
                if (null != apartments && apartments.size() > 0) {
                    solrClient.deleteById(apartments);
                    solrClient.commit();
                }
            } catch (Exception e) {
                IszLogger.error(SOLR_CORE + " solr 删除索引  error：" + e);
            }
            offset += limit;

        } while (count > offset);
        IszLogger.info("solr:apartment index delete all end");
        return ResultMsg.createOkMsg();
    }

    @Override
    public ResultMsg updateShareHousePublicImgSort(List<HouseRoomImg> houseRoomImgList) {
        try {
            return apartmentServiceBiz.updateShareHousePublicImgSort(houseRoomImgList);
        } catch (Exception e) {
            IszLogger.error("ApartmentServiceFacade.updateShareHousePublicImgSort", e);
            return ResultMsg.createErrorMsg(e.getMessage());
        }
    }

    @Override
    public Apartment searchApartmentByApartmentId(String apartment_id) {
        return apartmentServiceBiz.searchApartmentByAartmentId(apartment_id);
    }

    @Override
    public void handleApartmentContractStatusByHouseOther(String houseId, SysUser user) {
        handleApartmentStatusService.handleApartmentContractStatusByHouse(houseId, user,
                RentAffectApartment_ActionType.OTHER);
    }

    @Override
    public ResultObjectMsg<List<HouseRoomImg>> selectApartmentImgList(String apartment_id) {
        return apartmentServiceBiz.selectApartmentImgList(apartment_id);
    }

	@Override
	public Apartment searchValidApartmentByApartmentId(String apartment_id) {
		return apartmentServiceBiz.searchValidApartmentByApartmentId(apartment_id);
	}
	 
}
