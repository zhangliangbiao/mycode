package com.isz.erp.house.biz;

import com.isz.erp.common.page.PagingHelper;
import com.isz.erp.common.util.*;
import com.isz.erp.facade.house.entity.BusinessCircle;
import com.isz.erp.facade.house.entity.BusinessCircleDistrict;
import com.isz.erp.facade.house.vo.DistrictBusinessCircleVo;
import com.isz.erp.facade.user.entity.SysDistrict;
import com.isz.erp.facade.user.entity.SysUser;
import com.isz.erp.house.mapper.BusinessCircleDistrictMapper;
import com.isz.erp.house.mapper.BusinessCircleMapper;
import com.isz.erp.house.mapper.SysDistrictMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import java.util.*;

/**
 * Created by shaozhipeng on 16/11/2.
 */
@Service("districtBusinessCircleServiceBiz")
public class DistrictBusinessCircleServiceBiz {
    @Autowired
    private SysDistrictMapper sysDistrictMapper;

    @Autowired
    private BusinessCircleDistrictMapper businessCircleDistrictMapper;

    @Autowired
    private BusinessCircleMapper businessCircleMapper;

    /**
     * 区域商圈-全国城市城区商圈
     *
     * @return ResultObjectMsg<List<DistrictBusinessCircleVo>>
     * @throws Exception
     */
    public ResultObjectMsg<List<DistrictBusinessCircleVo>> getDistrictBusinessCircleTree() throws Exception {
        List<DistrictBusinessCircleVo> districtBusinessCircleVoRootList = new ArrayList<DistrictBusinessCircleVo>();
        DistrictBusinessCircleVo districtBusinessCircleVoRoot = new DistrictBusinessCircleVo();
        districtBusinessCircleVoRoot.setId("0");
        districtBusinessCircleVoRoot.setLevel(0);
        // 1 是省 数据没有省 0 下面直接查询城市
        districtBusinessCircleVoRoot.setText("全国");
        // 城市
        Map<String, Object> paramsMap = new HashMap<String, Object>();
        paramsMap.put("level", 2);
        // level 2
        List<DistrictBusinessCircleVo> districtBusinessCircleVoCityList = sysDistrictMapper.selectTreeListByParams(paramsMap);
        if (null != districtBusinessCircleVoCityList && districtBusinessCircleVoCityList.size() > 0) {
            for (DistrictBusinessCircleVo districtBusinessCircleVoCity : districtBusinessCircleVoCityList) {
                paramsMap.put("level", "3");
                paramsMap.put("parent_code", districtBusinessCircleVoCity.getId());
                // level 3
                List<DistrictBusinessCircleVo> districtBusinessCircleVoAreaList = sysDistrictMapper.selectTreeListByParams(paramsMap);
//                if(null != districtBusinessCircleVoAreaList && districtBusinessCircleVoAreaList.size() > 0) {
//                    for(DistrictBusinessCircleVo districtBusinessCircleVoArea : districtBusinessCircleVoAreaList) {
//                        paramsMap.put("city_code", districtBusinessCircleVoCity.getId());
//                        paramsMap.put("area_code", districtBusinessCircleVoArea.getId());
//                        // level 4
//                        List<DistrictBusinessCircleVo> districtBusinessCircleVoBusinessCircleList = businessCircleDistrictMapper.selectTreeListByParams(paramsMap);
//                        districtBusinessCircleVoArea.setChildren(districtBusinessCircleVoBusinessCircleList);
//                    }
//                }
                districtBusinessCircleVoCity.setChildren(districtBusinessCircleVoAreaList);
            }
        }

        districtBusinessCircleVoRoot.setChildren(districtBusinessCircleVoCityList);

        districtBusinessCircleVoRootList.add(districtBusinessCircleVoRoot);

        return new ResultObjectMsg(districtBusinessCircleVoRootList);
    }

    /**
     * 城市城区列表
     *
     * @param pageData
     * @return ResultObjectMsg<PagingHelper<SysDistrict>>
     * @throws Exception
     */
    public ResultObjectMsg<PagingHelper<Map<String, Object>>> searchDistrictList(Map<String, Object> pageData) throws Exception {
        if (null == pageData) {
            return new ResultObjectMsg<PagingHelper<Map<String, Object>>>("缺少参数.");
        }

        int page_num = ParameterUtil.getInt(pageData, "pageNumber", 1);
        int page_size = ParameterUtil.getInt(pageData, "pageSize", 10);

        PagingHelper<Map<String, Object>> ph = new PagingHelper<Map<String, Object>>();
        ph.setPerPageSize(page_size);
        ph.setCurrentPage(page_num);

        pageData.put("begin_num", ph.getBeginRowNumber());
        pageData.put("end_num", ph.getEndRowNumber());
        //数据权限
        Map<String, Object> dataPar = new HashMap<String, Object>();
        List<Map<String, Object>> list = sysDistrictMapper.searchSysDistrictList(pageData);
        Integer count = sysDistrictMapper.countSearchSysDistrict(pageData);

        ph.setTotal(count); // 设置总的记录数
        ph.setRows(list); // 设置返回的记录
        ResultObjectMsg<PagingHelper<Map<String, Object>>> obj = new ResultObjectMsg<PagingHelper<Map<String, Object>>>(ph);
        obj.setPar(dataPar);
        return obj;
    }

    /**
     * 商圈列表
     *
     * @param pageData
     * @return ResultObjectMsg<PagingHelper<BusinessCircle>>
     * @throws Exception
     */
    public ResultObjectMsg<PagingHelper<Map<String, Object>>> searchBusinessCircleList(Map<String, Object> pageData) throws Exception {
        if (null == pageData) {
            return new ResultObjectMsg<PagingHelper<Map<String, Object>>>("缺少参数.");
        }

        int page_num = ParameterUtil.getInt(pageData, "pageNumber", 1);
        int page_size = ParameterUtil.getInt(pageData, "pageSize", 10);

        PagingHelper<Map<String, Object>> ph = new PagingHelper<Map<String, Object>>();
        ph.setPerPageSize(page_size);
        ph.setCurrentPage(page_num);

        pageData.put("begin_num", ph.getBeginRowNumber());
        pageData.put("end_num", ph.getEndRowNumber());
        //数据权限
        Map<String, Object> dataPar = new HashMap<String, Object>();
        List<Map<String, Object>> list = businessCircleMapper.searchBusinessCircleList(pageData);
        Integer count = businessCircleMapper.countSearchBusinessCircle(pageData);

        ph.setTotal(count); // 设置总的记录数
        ph.setRows(list); // 设置返回的记录
        ResultObjectMsg<PagingHelper<Map<String, Object>>> obj = new ResultObjectMsg<PagingHelper<Map<String, Object>>>(ph);
        obj.setPar(dataPar);
        return obj;
    }

    /**
     * 城市城区详情
     *
     * @param code
     * @return ResultObjectMsg<SysDistrict>
     * @throws Exception
     */
    public ResultObjectMsg<SysDistrict> selectSysDistrictDetail(String code) throws Exception {
        return new ResultObjectMsg<SysDistrict>(sysDistrictMapper.selectByPrimaryKey(code));
    }

    /**
     * 商圈详情
     *
     * @param business_circle_id
     * @return ResultObjectMsg<BusinessCircle>
     * @throws Exception
     */
    public ResultObjectMsg<BusinessCircle> selectBusinessCircleDetail(String business_circle_id) throws Exception {
        return new ResultObjectMsg<BusinessCircle>(businessCircleMapper.selectByPrimaryKey(business_circle_id));
    }

    /**
     * 保存城市城区
     *
     * @param sysUser
     * @param sysDistrict
     * @return ResultMsg
     * @throws Exception
     */
    @Transactional
    public ResultMsg saveSysDistrict(SysUser sysUser, SysDistrict sysDistrict) throws Exception {
        if (null == sysUser || StringUtil.isNullOrEmpty(sysUser.getUser_id())) {
            return ResultMsg.createErrorMsg("请登录.");
        }
        if (StringUtil.isNullOrEmpty(sysDistrict.getCode())) {
            return ResultMsg.createErrorMsg("缺少行政区划代码.");
        }
        if (StringUtil.isNullOrEmpty(sysDistrict.getName())) {
            return ResultMsg.createErrorMsg("缺少行政区划名称.");
        }
        if (null == sysDistrict.getLevel()) {
            return ResultMsg.createErrorMsg("缺少行政区划层级.");
        }
        if (sysDistrict.getLevel() == 3 && StringUtil.isNullOrEmpty(sysDistrict.getParent_code())) {
            return ResultMsg.createErrorMsg("缺少上一级行政区划代码.");
        }
        if (sysDistrict.getLevel() == 2 && StringUtil.isNullOrEmpty(sysDistrict.getArea_code())) {
            return ResultMsg.createErrorMsg("缺少电话区号.");
        }
        if (StringUtil.isNullOrEmpty(sysDistrict.getAbridge())) {
            return ResultMsg.createErrorMsg("缺少简拼.");
        }
        sysDistrict.setAbridge(sysDistrict.getAbridge().toUpperCase().replace(" ","").replace(" ",""));
        if (StringUtil.isNullOrEmpty(sysDistrict.getSpell())) {
            return ResultMsg.createErrorMsg("缺少官网SEO全拼.");
        }
        sysDistrict.setSpell(sysDistrict.getSpell().toLowerCase().replace(" ","").replace(" ",""));
        if (StringUtil.isNullOrEmpty(sysDistrict.getLat())) {
            return ResultMsg.createErrorMsg("缺少经度.");
        }
        if (StringUtil.isNullOrEmpty(sysDistrict.getLng())) {
            return ResultMsg.createErrorMsg("缺少纬度");
        }
        if (!SpatialUtils.isRightGeoPoint(sysDistrict.getLng(), sysDistrict.getLat())) {
            return ResultMsg.createErrorMsg("经纬度不合法，请重新输入.");
        }
        // 根据更新时间判断是新增还是更新
        if (StringUtil.isNullOrEmpty(sysDistrict.getUpdate_time())) {
            SysDistrict sysDistrictRes = sysDistrictMapper.selectByPrimaryKey(sysDistrict.getCode());
            if (null != sysDistrictRes) {
                return ResultMsg.createErrorMsg("行政区划代码已存在，不能再新增.");
            }
            Map<String, Object> params = new HashMap<String, Object>();
            params.put("parent_code", sysDistrict.getParent_code());
            params.put("level", sysDistrict.getLevel());
            params.put("name", sysDistrict.getName());
            SysDistrict sysDistrictRes2 = sysDistrictMapper.selectByParams(params);
            if (null != sysDistrictRes2) {
                return ResultMsg.createErrorMsg("行政区划名称已存在，不能再新增.");
            }
            Map<String, Object> params2 = new HashMap<String, Object>();
            params2.put("spell", sysDistrict.getSpell());
            SysDistrict sysDistrictRes3 = sysDistrictMapper.selectByParams(params2);
            BusinessCircle businessCircle = businessCircleMapper.selectByParams(params2);
            if (null != sysDistrictRes3 || null != businessCircle) {
                return ResultMsg.createErrorMsg("官网SEO全拼已存在，不能再新增.");
            }

            if (sysDistrict.getLevel() == 3) {
                SysDistrict sysDistrictParent = sysDistrictMapper.selectByPrimaryKey(sysDistrict.getParent_code());
                if (null == sysDistrictParent || StringUtil.isNullOrEmpty(sysDistrictParent.getArea_code())) {
                    return ResultMsg.createErrorMsg("缺少上一级行政区划或缺少电话区号.");
                }
                sysDistrict.setArea_code(sysDistrictParent.getArea_code());
            }

            sysDistrict.setCreate_time(DateUtil.getCurrentDateTimeAsString());
            sysDistrict.setCreate_uid(sysUser.getUser_id());
            sysDistrict.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
            sysDistrict.setUpdate_uid(sysUser.getUser_id());
            sysDistrictMapper.insert(sysDistrict);
        } else {
            SysDistrict sysDistrictRes = sysDistrictMapper.selectByPrimaryKey(sysDistrict.getCode());
            if (!sysDistrictRes.getUpdate_time().equals(sysDistrict.getUpdate_time())) {
                return ResultMsg.createErrorMsg("用户数据已经被其他用户更新，请返回重新编辑.");
            }
            Map<String, Object> params = new HashMap<String, Object>();
            params.put("parent_code", sysDistrict.getParent_code());
            params.put("level", sysDistrict.getLevel());
            params.put("name", sysDistrict.getName());
            SysDistrict sysDistrictRes2 = sysDistrictMapper.selectByParams(params);
            if (null != sysDistrictRes2 && !sysDistrictRes2.getCode().equals(sysDistrict.getCode())) {
                return ResultMsg.createErrorMsg("行政区划名称已存在，不能再更新.");
            }
            Map<String, Object> params2 = new HashMap<String, Object>();
            params2.put("spell", sysDistrict.getSpell());
            SysDistrict sysDistrictRes3 = sysDistrictMapper.selectByParams(params2);
            BusinessCircle businessCircle = businessCircleMapper.selectByParams(params2);
            if ((null != sysDistrictRes3 && !sysDistrictRes3.getCode().equals(sysDistrict.getCode())) || null != businessCircle) {
                return ResultMsg.createErrorMsg("官网SEO全拼已存在，不能再更新.");
            }

            sysDistrict.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
            sysDistrict.setUpdate_uid(sysUser.getUser_id());
            sysDistrictMapper.updateByPrimaryKeySelective(sysDistrict);
        }

        return ResultMsg.createOkMsg();
    }

    /**
     * 保存商圈
     *
     * @param sysUser
     * @param businessCircle
     * @return ResultMsg
     * @throws Exception
     */
    @Transactional
    public ResultMsg saveBusinessCircle(SysUser sysUser, BusinessCircle businessCircle) throws Exception {
        if (null == sysUser || StringUtil.isNullOrEmpty(sysUser.getUser_id())) {
            return ResultMsg.createErrorMsg("请登录.");
        }
        if (StringUtil.isNullOrEmpty(businessCircle.getCity_code())) {
            return ResultMsg.createErrorMsg("缺少城市代码.");
        }
        if (StringUtil.isNullOrEmpty(businessCircle.getArea_code())) {
            return ResultMsg.createErrorMsg("缺少区域代码.");
        }
        if (StringUtil.isNullOrEmpty(businessCircle.getBusiness_circle_name())) {
            return ResultMsg.createErrorMsg("缺少商圈名称.");
        }
        if (StringUtil.isNullOrEmpty(businessCircle.getAbridge())) {
            return ResultMsg.createErrorMsg("缺少商圈简拼.");
        }
        businessCircle.setAbridge(businessCircle.getAbridge().toUpperCase().replace(" ","").replace(" ",""));
        if (StringUtil.isNullOrEmpty(businessCircle.getSpell())) {
            return ResultMsg.createErrorMsg("缺少商圈全拼.");
        }
        businessCircle.setSpell(businessCircle.getSpell().toLowerCase().replace(" ","").replace(" ",""));
        if (StringUtil.isNullOrEmpty(businessCircle.getLat())) {
            return ResultMsg.createErrorMsg("缺少经度.");
        }
        if (StringUtil.isNullOrEmpty(businessCircle.getLng())) {
            return ResultMsg.createErrorMsg("缺少纬度.");
        }
        if (!SpatialUtils.isRightGeoPoint(businessCircle.getLng(), businessCircle.getLat())) {
            return ResultMsg.createErrorMsg("经纬度不合法，请重新输入.");
        }
        if (StringUtil.isNullOrEmpty(businessCircle.getBusiness_circle_id())) {
            Map<String, Object> params = new HashMap<String, Object>();
            params.put("city_code", businessCircle.getCity_code());
            params.put("area_code", businessCircle.getArea_code());
            params.put("business_circle_name", businessCircle.getBusiness_circle_name());
            BusinessCircle businessCircleRes = businessCircleMapper.selectByParams(params);
            if (null != businessCircleRes) {
                return ResultMsg.createErrorMsg("商圈名称在当前区域下已经存在，不能再新增.");
            }
            Map<String, Object> params2 = new HashMap<String, Object>();
            params2.put("spell",businessCircle.getSpell());
            BusinessCircle businessCircleRes2 = businessCircleMapper.selectByParams(params2);
            SysDistrict sysDistrict = sysDistrictMapper.selectByParams(params2);
            if (null != businessCircleRes2 || null != sysDistrict) {
                return ResultMsg.createErrorMsg("官网SEO全拼已存在，不能再新增.");
            }

            businessCircle.setCreate_time(DateUtil.getCurrentDateTimeAsString());
            businessCircle.setCreate_uid(sysUser.getUser_id());
            businessCircle.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
            businessCircle.setUpdate_uid(sysUser.getUser_id());
            businessCircle.setBusiness_circle_id(UuidUtil.getUUID());
            businessCircleMapper.insert(businessCircle);
            // 区域商圈
            BusinessCircleDistrict businessCircleDistrict = new BusinessCircleDistrict();
            businessCircleDistrict.setBusiness_circle_district_id(UuidUtil.getUUID());
            businessCircleDistrict.setBusiness_circle_id(businessCircle.getBusiness_circle_id());
            businessCircleDistrict.setCity_code(businessCircle.getCity_code());
            businessCircleDistrict.setArea_code(businessCircle.getArea_code());
            businessCircleDistrictMapper.insert(businessCircleDistrict);
        } else {
            BusinessCircle businessCircleOld = businessCircleMapper.selectByPrimaryKey(businessCircle.getBusiness_circle_id());
            if (!businessCircleOld.getUpdate_time().equals(businessCircle.getUpdate_time())) {
                return ResultMsg.createErrorMsg("用户数据已经被其他用户更新，请返回重新编辑.");
            }
            Map<String, Object> params = new HashMap<String, Object>();
            params.put("city_code", businessCircle.getCity_code());
            params.put("area_code", businessCircle.getArea_code());
            params.put("business_circle_name", businessCircle.getBusiness_circle_name());
            BusinessCircle businessCircleRes = businessCircleMapper.selectByParams(params);
            if (null != businessCircleRes && !businessCircleRes.getBusiness_circle_id().equals(businessCircle.getBusiness_circle_id())) {
                return ResultMsg.createErrorMsg("商圈名称在当前区域下已经存在，不能再更新.");
            }
            Map<String, Object> params2 = new HashMap<String, Object>();
            params2.put("spell",businessCircle.getSpell());
            BusinessCircle businessCircleRes2 = businessCircleMapper.selectByParams(params2);
            SysDistrict sysDistrict = sysDistrictMapper.selectByParams(params2);
            if ((null != businessCircleRes2 && !businessCircleRes2.getBusiness_circle_id().equals(businessCircle.getBusiness_circle_id())) || null != sysDistrict) {
                return ResultMsg.createErrorMsg("官网SEO全拼已存在，不能再更新.");
            }

            businessCircle.setUpdate_time(DateUtil.getCurrentDateTimeAsString());
            businessCircle.setUpdate_uid(sysUser.getUser_id());
            businessCircleMapper.updateByPrimaryKeySelective(businessCircle);
        }

        return ResultMsg.createOkMsg();
    }

    /**
     * 删除城市城区
     *
     * @param sysUser
     * @param code
     * @return ResultMsg
     * @throws Exception
     */
    @Transactional
    public ResultMsg deleteSysDistrict(SysUser sysUser, String code) throws Exception {
        // sys_department dep_district
        // sys_district parent_code
        // sys_role city_code
        // sys_position city_code
        // residential city_code area_code
        // customer city_code rent_area_code
        // business_circle_district
        if (null == sysUser || StringUtil.isNullOrEmpty(sysUser.getUser_id())) {
            return ResultMsg.createErrorMsg("请登录.");
        }
        if (StringUtil.isNullOrEmpty(code)) {
            return ResultMsg.createErrorMsg("缺少行政区划代码.");
        }
        SysDistrict sysDistrict = sysDistrictMapper.selectByPrimaryKey(code);
        if (null == sysDistrict) {
            return ResultMsg.createErrorMsg("要删除的行政区划不存在.");
        }
        if (sysDistrict.getLevel() == 2) {
            Integer countSysDepartment = sysDistrictMapper.countSysDepartmentByCityCode(code);
            if (null != countSysDepartment && countSysDepartment > 0) {
                return ResultMsg.createErrorMsg("当前城市下已有部门，不能删除.");
            }
            Integer countSysDistrict = sysDistrictMapper.countSysDistrictByParentCode(code);
            if (null != countSysDistrict && countSysDistrict > 0) {
                return ResultMsg.createErrorMsg("当前城市下已有下级行政区划，不能删除.");
            }
            Integer countSysRole = sysDistrictMapper.countSysRoleByCityCode(code);
            if (null != countSysRole && countSysRole > 0) {
                return ResultMsg.createErrorMsg("当前城市下已有角色，不能删除.");
            }
            Integer countSysPosition = sysDistrictMapper.countSysPositionByCityCode(code);
            if (null != countSysPosition && countSysPosition > 0) {
                return ResultMsg.createErrorMsg("当前城市下已有岗位，不能删除.");
            }
        }
        Integer countResidential = sysDistrictMapper.countResidentialByCode(code);
        if (null != countResidential && countResidential > 0) {
            return ResultMsg.createErrorMsg("当前行政区划下已有楼盘，不能删除.");
        }
        Integer countCustomer = sysDistrictMapper.countCustomerByCode(code);
        if (null != countCustomer && countCustomer > 0) {
            return ResultMsg.createErrorMsg("当前行政区划下已有租前客户，不能删除.");
        }
        Integer countBusinessCircle= sysDistrictMapper.countBusinessCircleByCode(code);
        if (null != countBusinessCircle && countBusinessCircle > 0) {
            return ResultMsg.createErrorMsg("当前行政区划下已有商圈，不能删除.");
        }

        sysDistrictMapper.deleteByPrimaryKey(sysDistrict.getCode());

        return ResultMsg.createOkMsg();
    }

    /**
     * 删除商圈
     *
     * @param sysUser
     * @param business_circle_id
     * @return ResultMsg
     * @throws Exception
     */
    @Transactional
    public ResultMsg deleteBusinessCircle(SysUser sysUser, String business_circle_id) throws Exception {
        // customer_business_circle
        // residential_business_circle
        // business_circle_dep
        if (null == sysUser || StringUtil.isNullOrEmpty(sysUser.getUser_id())) {
            return ResultMsg.createErrorMsg("请登录.");
        }
        if (StringUtil.isNullOrEmpty(business_circle_id)) {
            return ResultMsg.createErrorMsg("缺少商圈ID.");
        }
        BusinessCircle businessCircle = businessCircleMapper.selectByPrimaryKey(business_circle_id);
        if(null == businessCircle) {
            return ResultMsg.createErrorMsg("要删除的商圈不存在.");
        }
        Integer countCustomerBusinessCircle = businessCircleMapper.selectCountCustomerBusinessCircleByBusinessCircleId(business_circle_id);
        if(null != countCustomerBusinessCircle && countCustomerBusinessCircle > 0) {
            return ResultMsg.createErrorMsg("当前商圈下已有租客，不能删除.");
        }
        Integer countResidentialBusinessCircle = businessCircleMapper.selectCountResidentialBusinessCircleByBusinessCircleId(business_circle_id);
        if(null != countResidentialBusinessCircle && countResidentialBusinessCircle > 0) {
            return ResultMsg.createErrorMsg("当前商圈下已有楼盘，不能删除.");
        }
        businessCircleDistrictMapper.deleteByBusinessCircleId(business_circle_id);
        businessCircleMapper.deleteByPrimaryKey(business_circle_id);
        return ResultMsg.createOkMsg();
    }
}
